{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "initialBV",
            "start": 1091,
            "end": 1100
          },
          "init": null,
          "start": 1091,
          "end": 1100
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "currentBV",
            "start": 1102,
            "end": 1111
          },
          "init": null,
          "start": 1102,
          "end": 1111
        }
      ],
      "start": 1087,
      "end": 1112
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "SequenceExpression",
            "expressions": [
              {
                "type": "Literal",
                "value": 0,
                "raw": "0",
                "start": 1115,
                "end": 1116
              },
              {
                "type": "Identifier",
                "name": "eval",
                "start": 1117,
                "end": 1121
              }
            ],
            "start": 1115,
            "end": 1121
          },
          "start": 1114,
          "end": 1122
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "left": {
              "type": "BinaryExpression",
              "left": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Literal",
                  "value": "switch (1) {",
                  "raw": "'switch (1) {'",
                  "start": 1126,
                  "end": 1140
                },
                "operator": "+",
                "right": {
                  "type": "Literal",
                  "value": "  case 1:",
                  "raw": "'  case 1:'",
                  "start": 1145,
                  "end": 1156
                },
                "start": 1126,
                "end": 1156
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "value": "    function f() { initialBV = f; f = 123; currentBV = f; return \"decl\"; }",
                "raw": "'    function f() { initialBV = f; f = 123; currentBV = f; return \"decl\"; }'",
                "start": 1161,
                "end": 1237
              },
              "start": 1126,
              "end": 1237
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "value": "}  ",
              "raw": "'}\\\n  '",
              "start": 1242,
              "end": 1249
            },
            "start": 1126,
            "end": 1249
          }
        ],
        "optional": false,
        "start": 1114,
        "end": 1251
      },
      "start": 1114,
      "end": 1252
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "f",
          "start": 1254,
          "end": 1255
        },
        "arguments": [],
        "optional": false,
        "start": 1254,
        "end": 1257
      },
      "start": 1254,
      "end": 1258
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1260,
            "end": 1266
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1267,
            "end": 1276
          },
          "optional": false,
          "computed": false,
          "start": 1260,
          "end": 1276
        },
        "arguments": [
          {
            "type": "CallExpression",
            "callee": {
              "type": "Identifier",
              "name": "initialBV",
              "start": 1280,
              "end": 1289
            },
            "arguments": [],
            "optional": false,
            "start": 1280,
            "end": 1291
          },
          {
            "type": "Literal",
            "value": "decl",
            "raw": "'decl'",
            "start": 1295,
            "end": 1301
          },
          {
            "type": "Literal",
            "value": "Block-scoped binding value is function object at execution time",
            "raw": "'Block-scoped binding value is function object at execution time'",
            "start": 1305,
            "end": 1370
          }
        ],
        "optional": false,
        "start": 1260,
        "end": 1372
      },
      "start": 1260,
      "end": 1373
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1374,
            "end": 1380
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1381,
            "end": 1390
          },
          "optional": false,
          "computed": false,
          "start": 1374,
          "end": 1390
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "currentBV",
            "start": 1391,
            "end": 1400
          },
          {
            "type": "Literal",
            "value": 123,
            "raw": "123",
            "start": 1402,
            "end": 1405
          },
          {
            "type": "Literal",
            "value": "Block-scoped binding is mutable",
            "raw": "'Block-scoped binding is mutable'",
            "start": 1407,
            "end": 1440
          }
        ],
        "optional": false,
        "start": 1374,
        "end": 1441
      },
      "start": 1374,
      "end": 1442
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1443,
            "end": 1449
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1450,
            "end": 1459
          },
          "optional": false,
          "computed": false,
          "start": 1443,
          "end": 1459
        },
        "arguments": [
          {
            "type": "CallExpression",
            "callee": {
              "type": "Identifier",
              "name": "f",
              "start": 1463,
              "end": 1464
            },
            "arguments": [],
            "optional": false,
            "start": 1463,
            "end": 1466
          },
          {
            "type": "Literal",
            "value": "decl",
            "raw": "'decl'",
            "start": 1470,
            "end": 1476
          },
          {
            "type": "Literal",
            "value": "Block-scoped binding is independent of outer var-scoped binding",
            "raw": "'Block-scoped binding is independent of outer var-scoped binding'",
            "start": 1480,
            "end": 1545
          }
        ],
        "optional": false,
        "start": 1443,
        "end": 1547
      },
      "start": 1443,
      "end": 1548
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1549
}