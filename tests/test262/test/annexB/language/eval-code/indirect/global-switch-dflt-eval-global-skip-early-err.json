{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "SequenceExpression",
            "expressions": [
              {
                "type": "Literal",
                "value": 0,
                "raw": "0",
                "start": 732,
                "end": 733
              },
              {
                "type": "Identifier",
                "name": "eval",
                "start": 734,
                "end": 738
              }
            ],
            "start": 732,
            "end": 738
          },
          "start": 731,
          "end": 739
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "left": {
              "type": "BinaryExpression",
              "left": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Literal",
                  "value": "let f = 123;  assert.sameValue(f, 123, \"binding is not initialized to `undefined`\");switch (1) {",
                  "raw": "'let f = 123;\\\n  assert.sameValue(f, 123, \"binding is not initialized to `undefined`\");switch (1) {'",
                  "start": 743,
                  "end": 843
                },
                "operator": "+",
                "right": {
                  "type": "Literal",
                  "value": "  default:",
                  "raw": "'  default:'",
                  "start": 848,
                  "end": 860
                },
                "start": 743,
                "end": 860
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "value": "    function f() {  }",
                "raw": "'    function f() {  }'",
                "start": 865,
                "end": 888
              },
              "start": 743,
              "end": 888
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "value": "}  assert.sameValue(f, 123, \"value is not updated following evaluation\");",
              "raw": "'}\\\n  assert.sameValue(f, 123, \"value is not updated following evaluation\");'",
              "start": 893,
              "end": 970
            },
            "start": 743,
            "end": 970
          }
        ],
        "optional": false,
        "start": 731,
        "end": 972
      },
      "start": 731,
      "end": 973
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 974
}