{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1211,
            "end": 1217
          },
          "property": {
            "type": "Identifier",
            "name": "throws",
            "start": 1218,
            "end": 1224
          },
          "optional": false,
          "computed": false,
          "start": 1211,
          "end": 1224
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "ReferenceError",
            "start": 1225,
            "end": 1239
          },
          {
            "type": "FunctionExpression",
            "id": null,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "Identifier",
                    "name": "f",
                    "start": 1256,
                    "end": 1257
                  },
                  "start": 1256,
                  "end": 1258
                }
              ],
              "start": 1252,
              "end": 1260
            },
            "expression": false,
            "start": 1241,
            "end": 1260
          },
          {
            "type": "Literal",
            "value": "An initialized binding is not created prior to evaluation",
            "raw": "'An initialized binding is not created prior to evaluation'",
            "start": 1262,
            "end": 1321
          }
        ],
        "optional": false,
        "start": 1211,
        "end": 1322
      },
      "start": 1211,
      "end": 1323
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1324,
            "end": 1330
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1331,
            "end": 1340
          },
          "optional": false,
          "computed": false,
          "start": 1324,
          "end": 1340
        },
        "arguments": [
          {
            "type": "UnaryExpression",
            "operator": "typeof",
            "argument": {
              "type": "Identifier",
              "name": "f",
              "start": 1351,
              "end": 1352
            },
            "prefix": true,
            "start": 1344,
            "end": 1352
          },
          {
            "type": "Literal",
            "value": "undefined",
            "raw": "'undefined'",
            "start": 1356,
            "end": 1367
          },
          {
            "type": "Literal",
            "value": "An uninitialized binding is not created prior to evaluation",
            "raw": "'An uninitialized binding is not created prior to evaluation'",
            "start": 1371,
            "end": 1432
          }
        ],
        "optional": false,
        "start": 1324,
        "end": 1434
      },
      "start": 1324,
      "end": 1435
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "SequenceExpression",
            "expressions": [
              {
                "type": "Literal",
                "value": 0,
                "raw": "0",
                "start": 1438,
                "end": 1439
              },
              {
                "type": "Identifier",
                "name": "eval",
                "start": 1440,
                "end": 1444
              }
            ],
            "start": 1438,
            "end": 1444
          },
          "start": 1437,
          "end": 1445
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "for (let f of [0]) {if (false) ; else function f() {  }}",
            "raw": "'for (let f of [0]) {if (false) ; else function f() {  }}'",
            "start": 1449,
            "end": 1507
          }
        ],
        "optional": false,
        "start": 1437,
        "end": 1509
      },
      "start": 1437,
      "end": 1510
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1512,
            "end": 1518
          },
          "property": {
            "type": "Identifier",
            "name": "throws",
            "start": 1519,
            "end": 1525
          },
          "optional": false,
          "computed": false,
          "start": 1512,
          "end": 1525
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "ReferenceError",
            "start": 1526,
            "end": 1540
          },
          {
            "type": "FunctionExpression",
            "id": null,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "Identifier",
                    "name": "f",
                    "start": 1557,
                    "end": 1558
                  },
                  "start": 1557,
                  "end": 1559
                }
              ],
              "start": 1553,
              "end": 1561
            },
            "expression": false,
            "start": 1542,
            "end": 1561
          },
          {
            "type": "Literal",
            "value": "An initialized binding is not created following evaluation",
            "raw": "'An initialized binding is not created following evaluation'",
            "start": 1563,
            "end": 1623
          }
        ],
        "optional": false,
        "start": 1512,
        "end": 1624
      },
      "start": 1512,
      "end": 1625
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1626,
            "end": 1632
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1633,
            "end": 1642
          },
          "optional": false,
          "computed": false,
          "start": 1626,
          "end": 1642
        },
        "arguments": [
          {
            "type": "UnaryExpression",
            "operator": "typeof",
            "argument": {
              "type": "Identifier",
              "name": "f",
              "start": 1653,
              "end": 1654
            },
            "prefix": true,
            "start": 1646,
            "end": 1654
          },
          {
            "type": "Literal",
            "value": "undefined",
            "raw": "'undefined'",
            "start": 1658,
            "end": 1669
          },
          {
            "type": "Literal",
            "value": "An uninitialized binding is not created following evaluation",
            "raw": "'An uninitialized binding is not created following evaluation'",
            "start": 1673,
            "end": 1735
          }
        ],
        "optional": false,
        "start": 1626,
        "end": 1737
      },
      "start": 1626,
      "end": 1738
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1739
}