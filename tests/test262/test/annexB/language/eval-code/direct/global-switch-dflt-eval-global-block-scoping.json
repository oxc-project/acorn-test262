{
  "type": "Program",
  "start": 0,
  "end": 1566,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 1107,
      "end": 1132,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 1111,
          "end": 1120,
          "id": {
            "type": "Identifier",
            "start": 1111,
            "end": 1120,
            "name": "initialBV"
          },
          "init": null
        },
        {
          "type": "VariableDeclarator",
          "start": 1122,
          "end": 1131,
          "id": {
            "type": "Identifier",
            "start": 1122,
            "end": 1131,
            "name": "currentBV"
          },
          "init": null
        }
      ]
    },
    {
      "type": "ExpressionStatement",
      "start": 1134,
      "end": 1269,
      "expression": {
        "type": "CallExpression",
        "start": 1134,
        "end": 1268,
        "callee": {
          "type": "Identifier",
          "start": 1134,
          "end": 1138,
          "name": "eval"
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 1142,
            "end": 1266,
            "left": {
              "type": "BinaryExpression",
              "start": 1142,
              "end": 1254,
              "left": {
                "type": "BinaryExpression",
                "start": 1142,
                "end": 1173,
                "left": {
                  "type": "Literal",
                  "start": 1142,
                  "end": 1156,
                  "value": "switch (1) {",
                  "raw": "'switch (1) {'"
                },
                "operator": "+",
                "right": {
                  "type": "Literal",
                  "start": 1161,
                  "end": 1173,
                  "value": "  default:",
                  "raw": "'  default:'"
                }
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 1178,
                "end": 1254,
                "value": "    function f() { initialBV = f; f = 123; currentBV = f; return \"decl\"; }",
                "raw": "'    function f() { initialBV = f; f = 123; currentBV = f; return \"decl\"; }'"
              }
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "start": 1259,
              "end": 1266,
              "value": "}  ",
              "raw": "'}\\\n  '"
            }
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1271,
      "end": 1275,
      "expression": {
        "type": "CallExpression",
        "start": 1271,
        "end": 1274,
        "callee": {
          "type": "Identifier",
          "start": 1271,
          "end": 1272,
          "name": "f"
        },
        "arguments": [],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1277,
      "end": 1390,
      "expression": {
        "type": "CallExpression",
        "start": 1277,
        "end": 1389,
        "callee": {
          "type": "MemberExpression",
          "start": 1277,
          "end": 1293,
          "object": {
            "type": "Identifier",
            "start": 1277,
            "end": 1283,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1284,
            "end": 1293,
            "name": "sameValue"
          },
          "optional": false,
          "computed": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 1297,
            "end": 1308,
            "callee": {
              "type": "Identifier",
              "start": 1297,
              "end": 1306,
              "name": "initialBV"
            },
            "arguments": [],
            "optional": false
          },
          {
            "type": "Literal",
            "start": 1312,
            "end": 1318,
            "value": "decl",
            "raw": "'decl'"
          },
          {
            "type": "Literal",
            "start": 1322,
            "end": 1387,
            "value": "Block-scoped binding value is function object at execution time",
            "raw": "'Block-scoped binding value is function object at execution time'"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1391,
      "end": 1459,
      "expression": {
        "type": "CallExpression",
        "start": 1391,
        "end": 1458,
        "callee": {
          "type": "MemberExpression",
          "start": 1391,
          "end": 1407,
          "object": {
            "type": "Identifier",
            "start": 1391,
            "end": 1397,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1398,
            "end": 1407,
            "name": "sameValue"
          },
          "optional": false,
          "computed": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1408,
            "end": 1417,
            "name": "currentBV"
          },
          {
            "type": "Literal",
            "start": 1419,
            "end": 1422,
            "value": 123,
            "raw": "123"
          },
          {
            "type": "Literal",
            "start": 1424,
            "end": 1457,
            "value": "Block-scoped binding is mutable",
            "raw": "'Block-scoped binding is mutable'"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1460,
      "end": 1565,
      "expression": {
        "type": "CallExpression",
        "start": 1460,
        "end": 1564,
        "callee": {
          "type": "MemberExpression",
          "start": 1460,
          "end": 1476,
          "object": {
            "type": "Identifier",
            "start": 1460,
            "end": 1466,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1467,
            "end": 1476,
            "name": "sameValue"
          },
          "optional": false,
          "computed": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 1480,
            "end": 1483,
            "callee": {
              "type": "Identifier",
              "start": 1480,
              "end": 1481,
              "name": "f"
            },
            "arguments": [],
            "optional": false
          },
          {
            "type": "Literal",
            "start": 1487,
            "end": 1493,
            "value": "decl",
            "raw": "'decl'"
          },
          {
            "type": "Literal",
            "start": 1497,
            "end": 1562,
            "value": "Block-scoped binding is independent of outer var-scoped binding",
            "raw": "'Block-scoped binding is independent of outer var-scoped binding'"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}