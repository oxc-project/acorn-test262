{
  "type": "Program",
  "start": 0,
  "end": 1474,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 1063,
      "end": 1088,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 1067,
          "end": 1076,
          "id": {
            "type": "Identifier",
            "start": 1067,
            "end": 1076,
            "name": "initialBV"
          },
          "init": null
        },
        {
          "type": "VariableDeclarator",
          "start": 1078,
          "end": 1087,
          "id": {
            "type": "Identifier",
            "start": 1078,
            "end": 1087,
            "name": "currentBV"
          },
          "init": null
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 1090,
      "end": 1177,
      "expression": {
        "type": "CallExpression",
        "start": 1090,
        "end": 1176,
        "callee": {
          "type": "Identifier",
          "start": 1090,
          "end": 1094,
          "name": "eval"
        },
        "arguments": [
          {
            "type": "Literal",
            "start": 1098,
            "end": 1174,
            "value": "{ function f() { initialBV = f; f = 123; currentBV = f; return \"decl\"; } }",
            "raw": "'{ function f() { initialBV = f; f = 123; currentBV = f; return \"decl\"; } }'"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1179,
      "end": 1183,
      "expression": {
        "type": "CallExpression",
        "start": 1179,
        "end": 1182,
        "callee": {
          "type": "Identifier",
          "start": 1179,
          "end": 1180,
          "name": "f"
        },
        "arguments": [],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1185,
      "end": 1298,
      "expression": {
        "type": "CallExpression",
        "start": 1185,
        "end": 1297,
        "callee": {
          "type": "MemberExpression",
          "start": 1185,
          "end": 1201,
          "object": {
            "type": "Identifier",
            "start": 1185,
            "end": 1191,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1192,
            "end": 1201,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 1205,
            "end": 1216,
            "callee": {
              "type": "Identifier",
              "start": 1205,
              "end": 1214,
              "name": "initialBV"
            },
            "arguments": [],
            "optional": false
          },
          {
            "type": "Literal",
            "start": 1220,
            "end": 1226,
            "value": "decl",
            "raw": "'decl'"
          },
          {
            "type": "Literal",
            "start": 1230,
            "end": 1295,
            "value": "Block-scoped binding value is function object at execution time",
            "raw": "'Block-scoped binding value is function object at execution time'"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1299,
      "end": 1367,
      "expression": {
        "type": "CallExpression",
        "start": 1299,
        "end": 1366,
        "callee": {
          "type": "MemberExpression",
          "start": 1299,
          "end": 1315,
          "object": {
            "type": "Identifier",
            "start": 1299,
            "end": 1305,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1306,
            "end": 1315,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1316,
            "end": 1325,
            "name": "currentBV"
          },
          {
            "type": "Literal",
            "start": 1327,
            "end": 1330,
            "value": 123,
            "raw": "123"
          },
          {
            "type": "Literal",
            "start": 1332,
            "end": 1365,
            "value": "Block-scoped binding is mutable",
            "raw": "'Block-scoped binding is mutable'"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1368,
      "end": 1473,
      "expression": {
        "type": "CallExpression",
        "start": 1368,
        "end": 1472,
        "callee": {
          "type": "MemberExpression",
          "start": 1368,
          "end": 1384,
          "object": {
            "type": "Identifier",
            "start": 1368,
            "end": 1374,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1375,
            "end": 1384,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 1388,
            "end": 1391,
            "callee": {
              "type": "Identifier",
              "start": 1388,
              "end": 1389,
              "name": "f"
            },
            "arguments": [],
            "optional": false
          },
          {
            "type": "Literal",
            "start": 1395,
            "end": 1401,
            "value": "decl",
            "raw": "'decl'"
          },
          {
            "type": "Literal",
            "start": 1405,
            "end": 1470,
            "value": "Block-scoped binding is independent of outer var-scoped binding",
            "raw": "'Block-scoped binding is independent of outer var-scoped binding'"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}