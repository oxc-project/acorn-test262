{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "init",
            "start": 1180,
            "end": 1184
          },
          "init": null,
          "start": 1180,
          "end": 1184
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "after",
            "start": 1186,
            "end": 1191
          },
          "init": null,
          "start": 1186,
          "end": 1191
        }
      ],
      "start": 1176,
      "end": 1192
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "ParenthesizedExpression",
        "expression": {
          "type": "CallExpression",
          "callee": {
            "type": "FunctionExpression",
            "id": null,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "eval",
                      "start": 1210,
                      "end": 1214
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "let f = 123;    init = f;if (false) function _f() {} else function f() {  }after = f;",
                        "raw": "'let f = 123;\\\n    init = f;if (false) function _f() {} else function f() {  }after = f;'",
                        "start": 1220,
                        "end": 1309
                      }
                    ],
                    "optional": false,
                    "start": 1210,
                    "end": 1313
                  },
                  "start": 1210,
                  "end": 1314
                }
              ],
              "start": 1206,
              "end": 1316
            },
            "expression": false,
            "start": 1195,
            "end": 1316
          },
          "arguments": [],
          "optional": false,
          "start": 1195,
          "end": 1318
        },
        "start": 1194,
        "end": 1319
      },
      "start": 1194,
      "end": 1320
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1322,
            "end": 1328
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1329,
            "end": 1338
          },
          "optional": false,
          "computed": false,
          "start": 1322,
          "end": 1338
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "init",
            "start": 1339,
            "end": 1343
          },
          {
            "type": "Literal",
            "value": 123,
            "raw": "123",
            "start": 1345,
            "end": 1348
          },
          {
            "type": "Literal",
            "value": "binding is not initialized to `undefined`",
            "raw": "'binding is not initialized to `undefined`'",
            "start": 1350,
            "end": 1393
          }
        ],
        "optional": false,
        "start": 1322,
        "end": 1394
      },
      "start": 1322,
      "end": 1395
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1396,
            "end": 1402
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1403,
            "end": 1412
          },
          "optional": false,
          "computed": false,
          "start": 1396,
          "end": 1412
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "after",
            "start": 1413,
            "end": 1418
          },
          {
            "type": "Literal",
            "value": 123,
            "raw": "123",
            "start": 1420,
            "end": 1423
          },
          {
            "type": "Literal",
            "value": "value is not updated following evaluation",
            "raw": "'value is not updated following evaluation'",
            "start": 1425,
            "end": 1468
          }
        ],
        "optional": false,
        "start": 1396,
        "end": 1469
      },
      "start": 1396,
      "end": 1470
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1471
}