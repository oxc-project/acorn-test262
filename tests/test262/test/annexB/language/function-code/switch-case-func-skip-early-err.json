{
  "type": "Program",
  "start": 0,
  "end": 1038,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 753,
      "end": 769,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 757,
          "end": 761,
          "id": {
            "type": "Identifier",
            "start": 757,
            "end": 761,
            "name": "init"
          },
          "init": null
        },
        {
          "type": "VariableDeclarator",
          "start": 763,
          "end": 768,
          "id": {
            "type": "Identifier",
            "start": 763,
            "end": 768,
            "name": "after"
          },
          "init": null
        }
      ]
    },
    {
      "type": "ExpressionStatement",
      "start": 771,
      "end": 887,
      "expression": {
        "type": "ParenthesizedExpression",
        "start": 771,
        "end": 886,
        "expression": {
          "type": "CallExpression",
          "start": 772,
          "end": 885,
          "callee": {
            "type": "FunctionExpression",
            "start": 772,
            "end": 883,
            "id": null,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "start": 783,
              "end": 883,
              "body": [
                {
                  "type": "VariableDeclaration",
                  "start": 787,
                  "end": 799,
                  "kind": "let",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 791,
                      "end": 798,
                      "id": {
                        "type": "Identifier",
                        "start": 791,
                        "end": 792,
                        "name": "f"
                      },
                      "init": {
                        "type": "Literal",
                        "start": 795,
                        "end": 798,
                        "value": 123,
                        "raw": "123"
                      }
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "start": 802,
                  "end": 811,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 802,
                    "end": 810,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 802,
                      "end": 806,
                      "name": "init"
                    },
                    "right": {
                      "type": "Identifier",
                      "start": 809,
                      "end": 810,
                      "name": "f"
                    }
                  }
                },
                {
                  "type": "SwitchStatement",
                  "start": 815,
                  "end": 867,
                  "discriminant": {
                    "type": "Literal",
                    "start": 823,
                    "end": 824,
                    "value": 1,
                    "raw": "1"
                  },
                  "cases": [
                    {
                      "type": "SwitchCase",
                      "start": 832,
                      "end": 863,
                      "test": {
                        "type": "Literal",
                        "start": 837,
                        "end": 838,
                        "value": 1,
                        "raw": "1"
                      },
                      "consequent": [
                        {
                          "type": "FunctionDeclaration",
                          "start": 846,
                          "end": 863,
                          "id": {
                            "type": "Identifier",
                            "start": 855,
                            "end": 856,
                            "name": "f"
                          },
                          "generator": false,
                          "async": false,
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "start": 859,
                            "end": 863,
                            "body": []
                          },
                          "expression": false
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "start": 871,
                  "end": 881,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 871,
                    "end": 880,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 871,
                      "end": 876,
                      "name": "after"
                    },
                    "right": {
                      "type": "Identifier",
                      "start": 879,
                      "end": 880,
                      "name": "f"
                    }
                  }
                }
              ]
            },
            "expression": false
          },
          "arguments": [],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 889,
      "end": 962,
      "expression": {
        "type": "CallExpression",
        "start": 889,
        "end": 961,
        "callee": {
          "type": "MemberExpression",
          "start": 889,
          "end": 905,
          "object": {
            "type": "Identifier",
            "start": 889,
            "end": 895,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 896,
            "end": 905,
            "name": "sameValue"
          },
          "optional": false,
          "computed": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 906,
            "end": 910,
            "name": "init"
          },
          {
            "type": "Literal",
            "start": 912,
            "end": 915,
            "value": 123,
            "raw": "123"
          },
          {
            "type": "Literal",
            "start": 917,
            "end": 960,
            "value": "binding is not initialized to `undefined`",
            "raw": "'binding is not initialized to `undefined`'"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 963,
      "end": 1037,
      "expression": {
        "type": "CallExpression",
        "start": 963,
        "end": 1036,
        "callee": {
          "type": "MemberExpression",
          "start": 963,
          "end": 979,
          "object": {
            "type": "Identifier",
            "start": 963,
            "end": 969,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 970,
            "end": 979,
            "name": "sameValue"
          },
          "optional": false,
          "computed": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 980,
            "end": 985,
            "name": "after"
          },
          {
            "type": "Literal",
            "start": 987,
            "end": 990,
            "value": 123,
            "raw": "123"
          },
          {
            "type": "Literal",
            "start": 992,
            "end": 1035,
            "value": "value is not updated following evaluation",
            "raw": "'value is not updated following evaluation'"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}