{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "ParenthesizedExpression",
        "expression": {
          "type": "CallExpression",
          "callee": {
            "type": "FunctionExpression",
            "id": null,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "assert",
                        "start": 790,
                        "end": 796
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "throws",
                        "start": 797,
                        "end": 803
                      },
                      "optional": false,
                      "computed": false,
                      "start": 790,
                      "end": 803
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "ReferenceError",
                        "start": 804,
                        "end": 818
                      },
                      {
                        "type": "FunctionExpression",
                        "id": null,
                        "generator": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "Identifier",
                                "name": "f",
                                "start": 837,
                                "end": 838
                              },
                              "start": 837,
                              "end": 839
                            }
                          ],
                          "start": 831,
                          "end": 843
                        },
                        "expression": false,
                        "start": 820,
                        "end": 843
                      },
                      {
                        "type": "Literal",
                        "value": "An initialized binding is not created prior to evaluation",
                        "raw": "'An initialized binding is not created prior to evaluation'",
                        "start": 845,
                        "end": 904
                      }
                    ],
                    "optional": false,
                    "start": 790,
                    "end": 905
                  },
                  "start": 790,
                  "end": 906
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "assert",
                        "start": 909,
                        "end": 915
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "sameValue",
                        "start": 916,
                        "end": 925
                      },
                      "optional": false,
                      "computed": false,
                      "start": 909,
                      "end": 925
                    },
                    "arguments": [
                      {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "f",
                          "start": 938,
                          "end": 939
                        },
                        "prefix": true,
                        "start": 931,
                        "end": 939
                      },
                      {
                        "type": "Literal",
                        "value": "undefined",
                        "raw": "'undefined'",
                        "start": 945,
                        "end": 956
                      },
                      {
                        "type": "Literal",
                        "value": "An uninitialized binding is not created prior to evaluation",
                        "raw": "'An uninitialized binding is not created prior to evaluation'",
                        "start": 962,
                        "end": 1023
                      }
                    ],
                    "optional": false,
                    "start": 909,
                    "end": 1027
                  },
                  "start": 909,
                  "end": 1028
                },
                {
                  "type": "ForStatement",
                  "init": {
                    "type": "VariableDeclaration",
                    "kind": "let",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "f",
                          "start": 1041,
                          "end": 1042
                        },
                        "init": null,
                        "start": 1041,
                        "end": 1042
                      }
                    ],
                    "start": 1037,
                    "end": 1042
                  },
                  "test": null,
                  "update": null,
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "SwitchStatement",
                        "discriminant": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1",
                          "start": 1061,
                          "end": 1062
                        },
                        "cases": [
                          {
                            "type": "SwitchCase",
                            "test": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1",
                              "start": 1075,
                              "end": 1076
                            },
                            "consequent": [
                              {
                                "type": "FunctionDeclaration",
                                "id": {
                                  "type": "Identifier",
                                  "name": "f",
                                  "start": 1093,
                                  "end": 1094
                                },
                                "generator": false,
                                "async": false,
                                "params": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [],
                                  "start": 1097,
                                  "end": 1101
                                },
                                "expression": false,
                                "start": 1084,
                                "end": 1101
                              }
                            ],
                            "start": 1070,
                            "end": 1101
                          }
                        ],
                        "start": 1053,
                        "end": 1105
                      },
                      {
                        "type": "BreakStatement",
                        "label": null,
                        "start": 1109,
                        "end": 1115
                      }
                    ],
                    "start": 1048,
                    "end": 1119
                  },
                  "start": 1032,
                  "end": 1119
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "assert",
                        "start": 1123,
                        "end": 1129
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "throws",
                        "start": 1130,
                        "end": 1136
                      },
                      "optional": false,
                      "computed": false,
                      "start": 1123,
                      "end": 1136
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "ReferenceError",
                        "start": 1137,
                        "end": 1151
                      },
                      {
                        "type": "FunctionExpression",
                        "id": null,
                        "generator": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "Identifier",
                                "name": "f",
                                "start": 1170,
                                "end": 1171
                              },
                              "start": 1170,
                              "end": 1172
                            }
                          ],
                          "start": 1164,
                          "end": 1176
                        },
                        "expression": false,
                        "start": 1153,
                        "end": 1176
                      },
                      {
                        "type": "Literal",
                        "value": "An initialized binding is not created following evaluation",
                        "raw": "'An initialized binding is not created following evaluation'",
                        "start": 1178,
                        "end": 1238
                      }
                    ],
                    "optional": false,
                    "start": 1123,
                    "end": 1239
                  },
                  "start": 1123,
                  "end": 1240
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "assert",
                        "start": 1243,
                        "end": 1249
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "sameValue",
                        "start": 1250,
                        "end": 1259
                      },
                      "optional": false,
                      "computed": false,
                      "start": 1243,
                      "end": 1259
                    },
                    "arguments": [
                      {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "f",
                          "start": 1272,
                          "end": 1273
                        },
                        "prefix": true,
                        "start": 1265,
                        "end": 1273
                      },
                      {
                        "type": "Literal",
                        "value": "undefined",
                        "raw": "'undefined'",
                        "start": 1279,
                        "end": 1290
                      },
                      {
                        "type": "Literal",
                        "value": "An uninitialized binding is not created following evaluation",
                        "raw": "'An uninitialized binding is not created following evaluation'",
                        "start": 1296,
                        "end": 1358
                      }
                    ],
                    "optional": false,
                    "start": 1243,
                    "end": 1362
                  },
                  "start": 1243,
                  "end": 1363
                }
              ],
              "start": 786,
              "end": 1365
            },
            "expression": false,
            "start": 775,
            "end": 1365
          },
          "arguments": [],
          "optional": false,
          "start": 775,
          "end": 1367
        },
        "start": 774,
        "end": 1368
      },
      "start": 774,
      "end": 1369
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1370
}