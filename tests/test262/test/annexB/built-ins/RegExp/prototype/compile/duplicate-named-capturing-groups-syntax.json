{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "let",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "r",
            "start": 294,
            "end": 295
          },
          "init": {
            "type": "Literal",
            "value": null,
            "raw": "/[ab]/",
            "regex": {
              "pattern": "[ab]",
              "flags": ""
            },
            "start": 298,
            "end": 304
          },
          "start": 294,
          "end": 304
        }
      ],
      "start": 290,
      "end": 305
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 307,
            "end": 313
          },
          "property": {
            "type": "Identifier",
            "name": "throws",
            "start": 314,
            "end": 320
          },
          "optional": false,
          "computed": false,
          "start": 307,
          "end": 320
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "SyntaxError",
            "start": 324,
            "end": 335
          },
          {
            "type": "ArrowFunctionExpression",
            "expression": true,
            "async": false,
            "params": [],
            "body": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "r",
                  "start": 345,
                  "end": 346
                },
                "property": {
                  "type": "Identifier",
                  "name": "compile",
                  "start": 347,
                  "end": 354
                },
                "optional": false,
                "computed": false,
                "start": 345,
                "end": 354
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "(?<x>a)(?<x>b)",
                  "raw": "\"(?<x>a)(?<x>b)\"",
                  "start": 355,
                  "end": 371
                }
              ],
              "optional": false,
              "start": 345,
              "end": 372
            },
            "id": null,
            "generator": false,
            "start": 339,
            "end": 372
          },
          {
            "type": "Literal",
            "value": "Duplicate named capturing groups in the same alternative do not parse",
            "raw": "\"Duplicate named capturing groups in the same alternative do not parse\"",
            "start": 376,
            "end": 447
          }
        ],
        "optional": false,
        "start": 307,
        "end": 449
      },
      "start": 307,
      "end": 450
    },
    {
      "type": "VariableDeclaration",
      "kind": "let",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "source",
            "start": 456,
            "end": 462
          },
          "init": {
            "type": "Literal",
            "value": "(?<x>a)|(?<x>b)",
            "raw": "\"(?<x>a)|(?<x>b)\"",
            "start": 465,
            "end": 482
          },
          "start": 456,
          "end": 482
        }
      ],
      "start": 452,
      "end": 483
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "r",
            "start": 484,
            "end": 485
          },
          "property": {
            "type": "Identifier",
            "name": "compile",
            "start": 486,
            "end": 493
          },
          "optional": false,
          "computed": false,
          "start": 484,
          "end": 493
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "source",
            "start": 494,
            "end": 500
          }
        ],
        "optional": false,
        "start": 484,
        "end": 501
      },
      "start": 484,
      "end": 502
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 503,
            "end": 509
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 510,
            "end": 519
          },
          "optional": false,
          "computed": false,
          "start": 503,
          "end": 519
        },
        "arguments": [
          {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "r",
              "start": 520,
              "end": 521
            },
            "property": {
              "type": "Identifier",
              "name": "source",
              "start": 522,
              "end": 528
            },
            "optional": false,
            "computed": false,
            "start": 520,
            "end": 528
          },
          {
            "type": "Identifier",
            "name": "source",
            "start": 530,
            "end": 536
          },
          {
            "type": "Literal",
            "value": "Duplicate named capturing groups in separate alternatives parse correctly",
            "raw": "\"Duplicate named capturing groups in separate alternatives parse correctly\"",
            "start": 538,
            "end": 613
          }
        ],
        "optional": false,
        "start": 503,
        "end": 614
      },
      "start": 503,
      "end": 615
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 616
}