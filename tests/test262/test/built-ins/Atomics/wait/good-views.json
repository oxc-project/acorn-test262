{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "$262",
              "start": 417,
              "end": 421
            },
            "property": {
              "type": "Identifier",
              "name": "agent",
              "start": 422,
              "end": 427
            },
            "optional": false,
            "computed": false,
            "start": 417,
            "end": 427
          },
          "property": {
            "type": "Identifier",
            "name": "start",
            "start": 428,
            "end": 433
          },
          "optional": false,
          "computed": false,
          "start": 417,
          "end": 433
        },
        "arguments": [
          {
            "type": "TemplateLiteral",
            "quasis": [
              {
                "type": "TemplateElement",
                "value": {
                  "raw": "\n  var sab = new SharedArrayBuffer(1024);\n  var ab = new ArrayBuffer(16);\n\n  var good_indices = [ (view) => 0/-1, // -0\n                       (view) => '-0',\n                       (view) => view.length - 1,\n                       (view) => ({ valueOf: () => 0 }),\n                       (view) => ({ toString: () => '0', valueOf: false }) // non-callable valueOf triggers invocation of toString\n                     ];\n\n  var view = new Int32Array(sab, 32, 20);\n\n  view[0] = 0;\n  $262.agent.report(\"A \" + Atomics.wait(view, 0, 0, 0))\n  $262.agent.report(\"B \" + Atomics.wait(view, 0, 37, 0));\n\n  // In-bounds boundary cases for indexing\n  for ( let IdxGen of good_indices ) {\n      let Idx = IdxGen(view);\n      view.fill(0);\n      // Atomics.store() computes an index from Idx in the same way as other\n      // Atomics operations, not quite like view[Idx].\n      Atomics.store(view, Idx, 37);\n      $262.agent.report(\"C \" + Atomics.wait(view, Idx, 0));\n  }\n\n  $262.agent.report(\"done\");\n  $262.agent.leaving();\n",
                  "cooked": "\n  var sab = new SharedArrayBuffer(1024);\n  var ab = new ArrayBuffer(16);\n\n  var good_indices = [ (view) => 0/-1, // -0\n                       (view) => '-0',\n                       (view) => view.length - 1,\n                       (view) => ({ valueOf: () => 0 }),\n                       (view) => ({ toString: () => '0', valueOf: false }) // non-callable valueOf triggers invocation of toString\n                     ];\n\n  var view = new Int32Array(sab, 32, 20);\n\n  view[0] = 0;\n  $262.agent.report(\"A \" + Atomics.wait(view, 0, 0, 0))\n  $262.agent.report(\"B \" + Atomics.wait(view, 0, 37, 0));\n\n  // In-bounds boundary cases for indexing\n  for ( let IdxGen of good_indices ) {\n      let Idx = IdxGen(view);\n      view.fill(0);\n      // Atomics.store() computes an index from Idx in the same way as other\n      // Atomics operations, not quite like view[Idx].\n      Atomics.store(view, Idx, 37);\n      $262.agent.report(\"C \" + Atomics.wait(view, Idx, 0));\n  }\n\n  $262.agent.report(\"done\");\n  $262.agent.leaving();\n"
                },
                "tail": true,
                "start": 435,
                "end": 1448
              }
            ],
            "expressions": [],
            "start": 434,
            "end": 1449
          }
        ],
        "optional": false,
        "start": 417,
        "end": 1450
      },
      "start": 417,
      "end": 1451
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1453,
            "end": 1459
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1460,
            "end": 1469
          },
          "optional": false,
          "computed": false,
          "start": 1453,
          "end": 1469
        },
        "arguments": [
          {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "object": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "$262",
                  "start": 1473,
                  "end": 1477
                },
                "property": {
                  "type": "Identifier",
                  "name": "agent",
                  "start": 1478,
                  "end": 1483
                },
                "optional": false,
                "computed": false,
                "start": 1473,
                "end": 1483
              },
              "property": {
                "type": "Identifier",
                "name": "getReport",
                "start": 1484,
                "end": 1493
              },
              "optional": false,
              "computed": false,
              "start": 1473,
              "end": 1493
            },
            "arguments": [],
            "optional": false,
            "start": 1473,
            "end": 1495
          },
          {
            "type": "Literal",
            "value": "A timed-out",
            "raw": "'A timed-out'",
            "start": 1499,
            "end": 1512
          },
          {
            "type": "Literal",
            "value": "$262.agent.getReport() returns \"A timed-out\"",
            "raw": "'$262.agent.getReport() returns \"A timed-out\"'",
            "start": 1516,
            "end": 1562
          }
        ],
        "optional": false,
        "start": 1453,
        "end": 1564
      },
      "start": 1453,
      "end": 1565
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1567,
            "end": 1573
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1574,
            "end": 1583
          },
          "optional": false,
          "computed": false,
          "start": 1567,
          "end": 1583
        },
        "arguments": [
          {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "object": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "$262",
                  "start": 1587,
                  "end": 1591
                },
                "property": {
                  "type": "Identifier",
                  "name": "agent",
                  "start": 1592,
                  "end": 1597
                },
                "optional": false,
                "computed": false,
                "start": 1587,
                "end": 1597
              },
              "property": {
                "type": "Identifier",
                "name": "getReport",
                "start": 1598,
                "end": 1607
              },
              "optional": false,
              "computed": false,
              "start": 1587,
              "end": 1607
            },
            "arguments": [],
            "optional": false,
            "start": 1587,
            "end": 1609
          },
          {
            "type": "Literal",
            "value": "B not-equal",
            "raw": "'B not-equal'",
            "start": 1613,
            "end": 1626
          },
          {
            "type": "Literal",
            "value": "$262.agent.getReport() returns \"B not-equal\"",
            "raw": "'$262.agent.getReport() returns \"B not-equal\"'",
            "start": 1630,
            "end": 1676
          }
        ],
        "optional": false,
        "start": 1567,
        "end": 1678
      },
      "start": 1567,
      "end": 1679
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "r",
            "start": 1685,
            "end": 1686
          },
          "init": null,
          "start": 1685,
          "end": 1686
        }
      ],
      "start": 1681,
      "end": 1687
    },
    {
      "type": "WhileStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "AssignmentExpression",
            "operator": "=",
            "left": {
              "type": "Identifier",
              "name": "r",
              "start": 1696,
              "end": 1697
            },
            "right": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "$262",
                    "start": 1700,
                    "end": 1704
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "agent",
                    "start": 1705,
                    "end": 1710
                  },
                  "optional": false,
                  "computed": false,
                  "start": 1700,
                  "end": 1710
                },
                "property": {
                  "type": "Identifier",
                  "name": "getReport",
                  "start": 1711,
                  "end": 1720
                },
                "optional": false,
                "computed": false,
                "start": 1700,
                "end": 1720
              },
              "arguments": [],
              "optional": false,
              "start": 1700,
              "end": 1722
            },
            "start": 1696,
            "end": 1722
          },
          "start": 1695,
          "end": 1723
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "done",
          "raw": "\"done\"",
          "start": 1728,
          "end": 1734
        },
        "start": 1695,
        "end": 1734
      },
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "assert",
                  "start": 1740,
                  "end": 1746
                },
                "property": {
                  "type": "Identifier",
                  "name": "sameValue",
                  "start": 1747,
                  "end": 1756
                },
                "optional": false,
                "computed": false,
                "start": 1740,
                "end": 1756
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "r",
                  "start": 1762,
                  "end": 1763
                },
                {
                  "type": "Literal",
                  "value": "C not-equal",
                  "raw": "'C not-equal'",
                  "start": 1769,
                  "end": 1782
                },
                {
                  "type": "Literal",
                  "value": "$262.agent.getReport() returns \"C not-equal\"",
                  "raw": "'$262.agent.getReport() returns \"C not-equal\"'",
                  "start": 1788,
                  "end": 1834
                }
              ],
              "optional": false,
              "start": 1740,
              "end": 1838
            },
            "start": 1740,
            "end": 1839
          }
        ],
        "start": 1736,
        "end": 1841
      },
      "start": 1688,
      "end": 1841
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1842
}