{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 348,
            "end": 354
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 355,
            "end": 364
          },
          "optional": false,
          "computed": false,
          "start": 348,
          "end": 364
        },
        "arguments": [
          {
            "type": "UnaryExpression",
            "operator": "typeof",
            "argument": {
              "type": "MemberExpression",
              "object": {
                "type": "Identifier",
                "name": "Atomics",
                "start": 372,
                "end": 379
              },
              "property": {
                "type": "Identifier",
                "name": "waitAsync",
                "start": 380,
                "end": 389
              },
              "optional": false,
              "computed": false,
              "start": 372,
              "end": 389
            },
            "prefix": true,
            "start": 365,
            "end": 389
          },
          {
            "type": "Literal",
            "value": "function",
            "raw": "'function'",
            "start": 391,
            "end": 401
          },
          {
            "type": "Literal",
            "value": "The value of `typeof Atomics.waitAsync` is \"function\"",
            "raw": "'The value of `typeof Atomics.waitAsync` is \"function\"'",
            "start": 403,
            "end": 458
          }
        ],
        "optional": false,
        "start": 348,
        "end": 459
      },
      "start": 348,
      "end": 460
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "$262",
              "start": 462,
              "end": 466
            },
            "property": {
              "type": "Identifier",
              "name": "agent",
              "start": 467,
              "end": 472
            },
            "optional": false,
            "computed": false,
            "start": 462,
            "end": 472
          },
          "property": {
            "type": "Identifier",
            "name": "start",
            "start": 473,
            "end": 478
          },
          "optional": false,
          "computed": false,
          "start": 462,
          "end": 478
        },
        "arguments": [
          {
            "type": "TemplateLiteral",
            "quasis": [
              {
                "type": "TemplateElement",
                "value": {
                  "raw": "\n  (async () => {\n    var sab = new SharedArrayBuffer(1024);\n    var good_indices = [ (view) => 0/-1, // -0\n                         (view) => '-0',\n                         (view) => view.length - 1,\n                         (view) => ({ valueOf: () => 0 }),\n                         (view) => ({ toString: () => '0', valueOf: false }) // non-callable valueOf triggers invocation of toString\n                       ];\n\n    var view = new Int32Array(sab, 32, 20);\n\n    view[0] = 0;\n    $262.agent.report(\"A \" + (await Atomics.waitAsync(view, 0, 0, 0).value))\n    $262.agent.report(\"B \" + (await Atomics.waitAsync(view, 0, 37, 0).value));\n\n    const results = [];\n    // In-bounds boundary cases for indexing\n    for ( let IdxGen of good_indices ) {\n        let Idx = IdxGen(view);\n        view.fill(0);\n        // Atomics.store() computes an index from Idx in the same way as other\n        // Atomics operations, not quite like view[Idx].\n        Atomics.store(view, Idx, 37);\n        results.push(await Atomics.waitAsync(view, Idx, 0).value);\n    }\n    $262.agent.report(\"C \" + results.join(\",\"));\n    $262.agent.leaving();\n  })();\n",
                  "cooked": "\n  (async () => {\n    var sab = new SharedArrayBuffer(1024);\n    var good_indices = [ (view) => 0/-1, // -0\n                         (view) => '-0',\n                         (view) => view.length - 1,\n                         (view) => ({ valueOf: () => 0 }),\n                         (view) => ({ toString: () => '0', valueOf: false }) // non-callable valueOf triggers invocation of toString\n                       ];\n\n    var view = new Int32Array(sab, 32, 20);\n\n    view[0] = 0;\n    $262.agent.report(\"A \" + (await Atomics.waitAsync(view, 0, 0, 0).value))\n    $262.agent.report(\"B \" + (await Atomics.waitAsync(view, 0, 37, 0).value));\n\n    const results = [];\n    // In-bounds boundary cases for indexing\n    for ( let IdxGen of good_indices ) {\n        let Idx = IdxGen(view);\n        view.fill(0);\n        // Atomics.store() computes an index from Idx in the same way as other\n        // Atomics operations, not quite like view[Idx].\n        Atomics.store(view, Idx, 37);\n        results.push(await Atomics.waitAsync(view, Idx, 0).value);\n    }\n    $262.agent.report(\"C \" + results.join(\",\"));\n    $262.agent.leaving();\n  })();\n"
                },
                "tail": true,
                "start": 480,
                "end": 1613
              }
            ],
            "expressions": [],
            "start": 479,
            "end": 1614
          }
        ],
        "optional": false,
        "start": 462,
        "end": 1615
      },
      "start": 462,
      "end": 1616
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "asyncTest",
          "start": 1619,
          "end": 1628
        },
        "arguments": [
          {
            "type": "ArrowFunctionExpression",
            "expression": false,
            "async": true,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "kind": "const",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "outcomes",
                        "start": 1651,
                        "end": 1659
                      },
                      "init": {
                        "type": "ArrayExpression",
                        "elements": [],
                        "start": 1662,
                        "end": 1664
                      },
                      "start": 1651,
                      "end": 1664
                    }
                  ],
                  "start": 1645,
                  "end": 1665
                },
                {
                  "type": "ForStatement",
                  "init": {
                    "type": "VariableDeclaration",
                    "kind": "let",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "i",
                          "start": 1678,
                          "end": 1679
                        },
                        "init": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "start": 1682,
                          "end": 1683
                        },
                        "start": 1678,
                        "end": 1683
                      }
                    ],
                    "start": 1674,
                    "end": 1683
                  },
                  "test": {
                    "type": "BinaryExpression",
                    "left": {
                      "type": "Identifier",
                      "name": "i",
                      "start": 1685,
                      "end": 1686
                    },
                    "operator": "<",
                    "right": {
                      "type": "Literal",
                      "value": 3,
                      "raw": "3",
                      "start": 1689,
                      "end": 1690
                    },
                    "start": 1685,
                    "end": 1690
                  },
                  "update": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "prefix": false,
                    "argument": {
                      "type": "Identifier",
                      "name": "i",
                      "start": 1692,
                      "end": 1693
                    },
                    "start": 1692,
                    "end": 1695
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "outcomes",
                              "start": 1703,
                              "end": 1711
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "push",
                              "start": 1712,
                              "end": 1716
                            },
                            "optional": false,
                            "computed": false,
                            "start": 1703,
                            "end": 1716
                          },
                          "arguments": [
                            {
                              "type": "AwaitExpression",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "object": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "$262",
                                      "start": 1723,
                                      "end": 1727
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "agent",
                                      "start": 1728,
                                      "end": 1733
                                    },
                                    "optional": false,
                                    "computed": false,
                                    "start": 1723,
                                    "end": 1733
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "getReportAsync",
                                    "start": 1734,
                                    "end": 1748
                                  },
                                  "optional": false,
                                  "computed": false,
                                  "start": 1723,
                                  "end": 1748
                                },
                                "arguments": [],
                                "optional": false,
                                "start": 1723,
                                "end": 1750
                              },
                              "start": 1717,
                              "end": 1750
                            }
                          ],
                          "optional": false,
                          "start": 1703,
                          "end": 1751
                        },
                        "start": 1703,
                        "end": 1752
                      }
                    ],
                    "start": 1697,
                    "end": 1756
                  },
                  "start": 1669,
                  "end": 1756
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "assert",
                        "start": 1760,
                        "end": 1766
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "sameValue",
                        "start": 1767,
                        "end": 1776
                      },
                      "optional": false,
                      "computed": false,
                      "start": 1760,
                      "end": 1776
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "outcomes",
                          "start": 1782,
                          "end": 1790
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "start": 1791,
                          "end": 1792
                        },
                        "optional": false,
                        "computed": true,
                        "start": 1782,
                        "end": 1793
                      },
                      {
                        "type": "Literal",
                        "value": "A timed-out",
                        "raw": "'A timed-out'",
                        "start": 1799,
                        "end": 1812
                      },
                      {
                        "type": "Literal",
                        "value": "The value of outcomes[0] is \"A timed-out\"",
                        "raw": "'The value of outcomes[0] is \"A timed-out\"'",
                        "start": 1818,
                        "end": 1861
                      }
                    ],
                    "optional": false,
                    "start": 1760,
                    "end": 1865
                  },
                  "start": 1760,
                  "end": 1866
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "assert",
                        "start": 1870,
                        "end": 1876
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "sameValue",
                        "start": 1877,
                        "end": 1886
                      },
                      "optional": false,
                      "computed": false,
                      "start": 1870,
                      "end": 1886
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "outcomes",
                          "start": 1892,
                          "end": 1900
                        },
                        "property": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1",
                          "start": 1901,
                          "end": 1902
                        },
                        "optional": false,
                        "computed": true,
                        "start": 1892,
                        "end": 1903
                      },
                      {
                        "type": "Literal",
                        "value": "B not-equal",
                        "raw": "'B not-equal'",
                        "start": 1909,
                        "end": 1922
                      },
                      {
                        "type": "Literal",
                        "value": "The value of outcomes[1] is \"B not-equal\"",
                        "raw": "'The value of outcomes[1] is \"B not-equal\"'",
                        "start": 1928,
                        "end": 1971
                      }
                    ],
                    "optional": false,
                    "start": 1870,
                    "end": 1975
                  },
                  "start": 1870,
                  "end": 1976
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "assert",
                        "start": 1979,
                        "end": 1985
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "sameValue",
                        "start": 1986,
                        "end": 1995
                      },
                      "optional": false,
                      "computed": false,
                      "start": 1979,
                      "end": 1995
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "outcomes",
                          "start": 2001,
                          "end": 2009
                        },
                        "property": {
                          "type": "Literal",
                          "value": 2,
                          "raw": "2",
                          "start": 2010,
                          "end": 2011
                        },
                        "optional": false,
                        "computed": true,
                        "start": 2001,
                        "end": 2012
                      },
                      {
                        "type": "Literal",
                        "value": "C not-equal,not-equal,not-equal,not-equal,not-equal",
                        "raw": "'C not-equal,not-equal,not-equal,not-equal,not-equal'",
                        "start": 2018,
                        "end": 2071
                      },
                      {
                        "type": "Literal",
                        "value": "The value of outcomes[2] is \"C not-equal,not-equal,not-equal,not-equal,not-equal\"",
                        "raw": "'The value of outcomes[2] is \"C not-equal,not-equal,not-equal,not-equal,not-equal\"'",
                        "start": 2077,
                        "end": 2160
                      }
                    ],
                    "optional": false,
                    "start": 1979,
                    "end": 2164
                  },
                  "start": 1979,
                  "end": 2165
                }
              ],
              "start": 1641,
              "end": 2167
            },
            "id": null,
            "generator": false,
            "start": 1629,
            "end": 2167
          }
        ],
        "optional": false,
        "start": 1619,
        "end": 2168
      },
      "start": 1619,
      "end": 2169
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 2170
}