{
  "type": "Program",
  "start": 0,
  "end": 1883,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 261,
      "end": 282,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 265,
          "end": 281,
          "id": {
            "type": "Identifier",
            "start": 265,
            "end": 266,
            "name": "x"
          },
          "init": {
            "type": "ArrayExpression",
            "start": 269,
            "end": 281,
            "elements": [
              {
                "type": "Literal",
                "start": 270,
                "end": 271,
                "value": 0,
                "raw": "0"
              },
              {
                "type": "Literal",
                "start": 273,
                "end": 274,
                "value": 1,
                "raw": "1"
              },
              {
                "type": "Literal",
                "start": 276,
                "end": 277,
                "value": 2,
                "raw": "2"
              },
              {
                "type": "Literal",
                "start": 279,
                "end": 280,
                "value": 3,
                "raw": "3"
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "start": 283,
      "end": 394,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 287,
          "end": 393,
          "id": {
            "type": "Identifier",
            "start": 287,
            "end": 290,
            "name": "arr"
          },
          "init": {
            "type": "CallExpression",
            "start": 293,
            "end": 393,
            "callee": {
              "type": "MemberExpression",
              "start": 293,
              "end": 301,
              "object": {
                "type": "Identifier",
                "start": 293,
                "end": 294,
                "name": "x"
              },
              "property": {
                "type": "Identifier",
                "start": 295,
                "end": 301,
                "name": "splice"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 302,
                "end": 303,
                "value": 0,
                "raw": "0"
              },
              {
                "type": "ObjectExpression",
                "start": 305,
                "end": 392,
                "properties": [
                  {
                    "type": "Property",
                    "start": 309,
                    "end": 347,
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 309,
                      "end": 316,
                      "name": "valueOf"
                    },
                    "value": {
                      "type": "FunctionExpression",
                      "start": 318,
                      "end": 347,
                      "id": null,
                      "expression": false,
                      "generator": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 329,
                        "end": 347,
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "start": 335,
                            "end": 343,
                            "argument": {
                              "type": "Literal",
                              "start": 342,
                              "end": 343,
                              "value": 3,
                              "raw": "3"
                            }
                          }
                        ]
                      }
                    },
                    "kind": "init"
                  },
                  {
                    "type": "Property",
                    "start": 351,
                    "end": 390,
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "key": {
                      "type": "Identifier",
                      "start": 351,
                      "end": 359,
                      "name": "toString"
                    },
                    "value": {
                      "type": "FunctionExpression",
                      "start": 361,
                      "end": 390,
                      "id": null,
                      "expression": false,
                      "generator": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "start": 372,
                        "end": 390,
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "start": 378,
                            "end": 386,
                            "argument": {
                              "type": "Literal",
                              "start": 385,
                              "end": 386,
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        ]
                      }
                    },
                    "kind": "init"
                  }
                ]
              }
            ],
            "optional": false
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 396,
      "end": 437,
      "expression": {
        "type": "AssignmentExpression",
        "start": 396,
        "end": 436,
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "start": 396,
          "end": 408,
          "object": {
            "type": "Identifier",
            "start": 396,
            "end": 399,
            "name": "arr"
          },
          "property": {
            "type": "Identifier",
            "start": 400,
            "end": 408,
            "name": "getClass"
          },
          "computed": false,
          "optional": false
        },
        "right": {
          "type": "MemberExpression",
          "start": 411,
          "end": 436,
          "object": {
            "type": "MemberExpression",
            "start": 411,
            "end": 427,
            "object": {
              "type": "Identifier",
              "start": 411,
              "end": 417,
              "name": "Object"
            },
            "property": {
              "type": "Identifier",
              "start": 418,
              "end": 427,
              "name": "prototype"
            },
            "computed": false,
            "optional": false
          },
          "property": {
            "type": "Identifier",
            "start": 428,
            "end": 436,
            "name": "toString"
          },
          "computed": false,
          "optional": false
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 438,
      "end": 682,
      "test": {
        "type": "BinaryExpression",
        "start": 442,
        "end": 487,
        "left": {
          "type": "CallExpression",
          "start": 442,
          "end": 456,
          "callee": {
            "type": "MemberExpression",
            "start": 442,
            "end": 454,
            "object": {
              "type": "Identifier",
              "start": 442,
              "end": 445,
              "name": "arr"
            },
            "property": {
              "type": "Identifier",
              "start": 446,
              "end": 454,
              "name": "getClass"
            },
            "computed": false,
            "optional": false
          },
          "arguments": [],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "BinaryExpression",
          "start": 461,
          "end": 487,
          "left": {
            "type": "BinaryExpression",
            "start": 461,
            "end": 481,
            "left": {
              "type": "Literal",
              "start": 461,
              "end": 471,
              "value": "[object ",
              "raw": "\"[object \""
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "start": 474,
              "end": 481,
              "value": "Array",
              "raw": "\"Array\""
            }
          },
          "operator": "+",
          "right": {
            "type": "Literal",
            "start": 484,
            "end": 487,
            "value": "]",
            "raw": "\"]\""
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 489,
        "end": 682,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 493,
            "end": 680,
            "argument": {
              "type": "NewExpression",
              "start": 499,
              "end": 679,
              "callee": {
                "type": "Identifier",
                "start": 503,
                "end": 515,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 516,
                  "end": 678,
                  "left": {
                    "type": "Literal",
                    "start": 516,
                    "end": 659,
                    "value": "#1: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr is Array object. Actual: ",
                    "raw": "'#1: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr is Array object. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 662,
                    "end": 678,
                    "expression": {
                      "type": "CallExpression",
                      "start": 663,
                      "end": 677,
                      "callee": {
                        "type": "MemberExpression",
                        "start": 663,
                        "end": 675,
                        "object": {
                          "type": "Identifier",
                          "start": 663,
                          "end": 666,
                          "name": "arr"
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 667,
                          "end": 675,
                          "name": "getClass"
                        },
                        "computed": false,
                        "optional": false
                      },
                      "arguments": [],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 684,
      "end": 892,
      "test": {
        "type": "BinaryExpression",
        "start": 688,
        "end": 704,
        "left": {
          "type": "MemberExpression",
          "start": 688,
          "end": 698,
          "object": {
            "type": "Identifier",
            "start": 688,
            "end": 691,
            "name": "arr"
          },
          "property": {
            "type": "Identifier",
            "start": 692,
            "end": 698,
            "name": "length"
          },
          "computed": false,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 703,
          "end": 704,
          "value": 3,
          "raw": "3"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 706,
        "end": 892,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 710,
            "end": 890,
            "argument": {
              "type": "NewExpression",
              "start": 716,
              "end": 889,
              "callee": {
                "type": "Identifier",
                "start": 720,
                "end": 732,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 733,
                  "end": 888,
                  "left": {
                    "type": "Literal",
                    "start": 733,
                    "end": 873,
                    "value": "#2: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr.length === 3. Actual: ",
                    "raw": "'#2: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr.length === 3. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 876,
                    "end": 888,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 877,
                      "end": 887,
                      "object": {
                        "type": "Identifier",
                        "start": 877,
                        "end": 880,
                        "name": "arr"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 881,
                        "end": 887,
                        "name": "length"
                      },
                      "computed": false,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 894,
      "end": 1090,
      "test": {
        "type": "BinaryExpression",
        "start": 898,
        "end": 910,
        "left": {
          "type": "MemberExpression",
          "start": 898,
          "end": 904,
          "object": {
            "type": "Identifier",
            "start": 898,
            "end": 901,
            "name": "arr"
          },
          "property": {
            "type": "Literal",
            "start": 902,
            "end": 903,
            "value": 0,
            "raw": "0"
          },
          "computed": true,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 909,
          "end": 910,
          "value": 0,
          "raw": "0"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 912,
        "end": 1090,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 916,
            "end": 1088,
            "argument": {
              "type": "NewExpression",
              "start": 922,
              "end": 1087,
              "callee": {
                "type": "Identifier",
                "start": 926,
                "end": 938,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 939,
                  "end": 1086,
                  "left": {
                    "type": "Literal",
                    "start": 939,
                    "end": 1075,
                    "value": "#3: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[0] === 0. Actual: ",
                    "raw": "'#3: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[0] === 0. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1078,
                    "end": 1086,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 1079,
                      "end": 1085,
                      "object": {
                        "type": "Identifier",
                        "start": 1079,
                        "end": 1082,
                        "name": "arr"
                      },
                      "property": {
                        "type": "Literal",
                        "start": 1083,
                        "end": 1084,
                        "value": 0,
                        "raw": "0"
                      },
                      "computed": true,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1092,
      "end": 1288,
      "test": {
        "type": "BinaryExpression",
        "start": 1096,
        "end": 1108,
        "left": {
          "type": "MemberExpression",
          "start": 1096,
          "end": 1102,
          "object": {
            "type": "Identifier",
            "start": 1096,
            "end": 1099,
            "name": "arr"
          },
          "property": {
            "type": "Literal",
            "start": 1100,
            "end": 1101,
            "value": 1,
            "raw": "1"
          },
          "computed": true,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1107,
          "end": 1108,
          "value": 1,
          "raw": "1"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1110,
        "end": 1288,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1114,
            "end": 1286,
            "argument": {
              "type": "NewExpression",
              "start": 1120,
              "end": 1285,
              "callee": {
                "type": "Identifier",
                "start": 1124,
                "end": 1136,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1137,
                  "end": 1284,
                  "left": {
                    "type": "Literal",
                    "start": 1137,
                    "end": 1273,
                    "value": "#4: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[1] === 1. Actual: ",
                    "raw": "'#4: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[1] === 1. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1276,
                    "end": 1284,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 1277,
                      "end": 1283,
                      "object": {
                        "type": "Identifier",
                        "start": 1277,
                        "end": 1280,
                        "name": "arr"
                      },
                      "property": {
                        "type": "Literal",
                        "start": 1281,
                        "end": 1282,
                        "value": 1,
                        "raw": "1"
                      },
                      "computed": true,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1290,
      "end": 1486,
      "test": {
        "type": "BinaryExpression",
        "start": 1294,
        "end": 1306,
        "left": {
          "type": "MemberExpression",
          "start": 1294,
          "end": 1300,
          "object": {
            "type": "Identifier",
            "start": 1294,
            "end": 1297,
            "name": "arr"
          },
          "property": {
            "type": "Literal",
            "start": 1298,
            "end": 1299,
            "value": 2,
            "raw": "2"
          },
          "computed": true,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1305,
          "end": 1306,
          "value": 2,
          "raw": "2"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1308,
        "end": 1486,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1312,
            "end": 1484,
            "argument": {
              "type": "NewExpression",
              "start": 1318,
              "end": 1483,
              "callee": {
                "type": "Identifier",
                "start": 1322,
                "end": 1334,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1335,
                  "end": 1482,
                  "left": {
                    "type": "Literal",
                    "start": 1335,
                    "end": 1471,
                    "value": "#5: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[2] === 2. Actual: ",
                    "raw": "'#5: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[2] === 2. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1474,
                    "end": 1482,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 1475,
                      "end": 1481,
                      "object": {
                        "type": "Identifier",
                        "start": 1475,
                        "end": 1478,
                        "name": "arr"
                      },
                      "property": {
                        "type": "Literal",
                        "start": 1479,
                        "end": 1480,
                        "value": 2,
                        "raw": "2"
                      },
                      "computed": true,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1488,
      "end": 1690,
      "test": {
        "type": "BinaryExpression",
        "start": 1492,
        "end": 1506,
        "left": {
          "type": "MemberExpression",
          "start": 1492,
          "end": 1500,
          "object": {
            "type": "Identifier",
            "start": 1492,
            "end": 1493,
            "name": "x"
          },
          "property": {
            "type": "Identifier",
            "start": 1494,
            "end": 1500,
            "name": "length"
          },
          "computed": false,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1505,
          "end": 1506,
          "value": 1,
          "raw": "1"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1508,
        "end": 1690,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1512,
            "end": 1688,
            "argument": {
              "type": "NewExpression",
              "start": 1518,
              "end": 1687,
              "callee": {
                "type": "Identifier",
                "start": 1522,
                "end": 1534,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1535,
                  "end": 1686,
                  "left": {
                    "type": "Literal",
                    "start": 1535,
                    "end": 1673,
                    "value": "#6: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); x.length === 1. Actual: ",
                    "raw": "'#6: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); x.length === 1. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1676,
                    "end": 1686,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 1677,
                      "end": 1685,
                      "object": {
                        "type": "Identifier",
                        "start": 1677,
                        "end": 1678,
                        "name": "x"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 1679,
                        "end": 1685,
                        "name": "length"
                      },
                      "computed": false,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1692,
      "end": 1882,
      "test": {
        "type": "BinaryExpression",
        "start": 1696,
        "end": 1706,
        "left": {
          "type": "MemberExpression",
          "start": 1696,
          "end": 1700,
          "object": {
            "type": "Identifier",
            "start": 1696,
            "end": 1697,
            "name": "x"
          },
          "property": {
            "type": "Literal",
            "start": 1698,
            "end": 1699,
            "value": 0,
            "raw": "0"
          },
          "computed": true,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1705,
          "end": 1706,
          "value": 3,
          "raw": "3"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1708,
        "end": 1882,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1712,
            "end": 1880,
            "argument": {
              "type": "NewExpression",
              "start": 1718,
              "end": 1879,
              "callee": {
                "type": "Identifier",
                "start": 1722,
                "end": 1734,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1735,
                  "end": 1878,
                  "left": {
                    "type": "Literal",
                    "start": 1735,
                    "end": 1869,
                    "value": "#7: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); x[0] === 3. Actual: ",
                    "raw": "'#7: var x = [0,1,2,3]; var arr = x.splice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); x[0] === 3. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1872,
                    "end": 1878,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 1873,
                      "end": 1877,
                      "object": {
                        "type": "Identifier",
                        "start": 1873,
                        "end": 1874,
                        "name": "x"
                      },
                      "property": {
                        "type": "Literal",
                        "start": 1875,
                        "end": 1876,
                        "value": 0,
                        "raw": "0"
                      },
                      "computed": true,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}