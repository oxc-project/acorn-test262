{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "x",
            "start": 322,
            "end": 323
          },
          "init": {
            "type": "NewExpression",
            "callee": {
              "type": "Identifier",
              "name": "Array",
              "start": 330,
              "end": 335
            },
            "arguments": [
              {
                "type": "Literal",
                "value": 0,
                "raw": "0",
                "start": 336,
                "end": 337
              },
              {
                "type": "Literal",
                "value": 1,
                "raw": "1",
                "start": 339,
                "end": 340
              },
              {
                "type": "Literal",
                "value": 2,
                "raw": "2",
                "start": 342,
                "end": 343
              },
              {
                "type": "Literal",
                "value": 3,
                "raw": "3",
                "start": 345,
                "end": 346
              }
            ],
            "start": 326,
            "end": 347
          },
          "start": 322,
          "end": 347
        }
      ],
      "start": 318,
      "end": 348
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "x",
              "start": 353,
              "end": 354
            },
            "property": {
              "type": "Identifier",
              "name": "join",
              "start": 355,
              "end": 359
            },
            "optional": false,
            "computed": false,
            "start": 353,
            "end": 359
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "",
              "raw": "\"\"",
              "start": 360,
              "end": 362
            }
          ],
          "optional": false,
          "start": 353,
          "end": 363
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "0123",
          "raw": "\"0123\"",
          "start": 368,
          "end": 374
        },
        "start": 353,
        "end": 374
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 390,
                "end": 402
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#0: x = new Array(0,1,2,3); x.join(\"\") === \"0123\". Actual: ",
                    "raw": "'#0: x = new Array(0,1,2,3); x.join(\"\") === \"0123\". Actual: '",
                    "start": 403,
                    "end": 464
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "x",
                          "start": 468,
                          "end": 469
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "join",
                          "start": 470,
                          "end": 474
                        },
                        "optional": false,
                        "computed": false,
                        "start": 468,
                        "end": 474
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "",
                          "raw": "\"\"",
                          "start": 475,
                          "end": 477
                        }
                      ],
                      "optional": false,
                      "start": 468,
                      "end": 478
                    },
                    "start": 467,
                    "end": 479
                  },
                  "start": 403,
                  "end": 479
                }
              ],
              "start": 386,
              "end": 480
            },
            "start": 380,
            "end": 481
          }
        ],
        "start": 376,
        "end": 483
      },
      "alternate": null,
      "start": 349,
      "end": 483
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 485,
          "end": 486
        },
        "right": {
          "type": "NewExpression",
          "callee": {
            "type": "Identifier",
            "name": "Array",
            "start": 493,
            "end": 498
          },
          "arguments": [
            {
              "type": "Literal",
              "value": 0,
              "raw": "0",
              "start": 499,
              "end": 500
            },
            {
              "type": "Literal",
              "value": 1,
              "raw": "1",
              "start": 502,
              "end": 503
            },
            {
              "type": "Literal",
              "value": 2,
              "raw": "2",
              "start": 505,
              "end": 506
            },
            {
              "type": "Literal",
              "value": 3,
              "raw": "3",
              "start": 508,
              "end": 509
            }
          ],
          "start": 489,
          "end": 510
        },
        "start": 485,
        "end": 510
      },
      "start": 485,
      "end": 511
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "x",
              "start": 516,
              "end": 517
            },
            "property": {
              "type": "Identifier",
              "name": "join",
              "start": 518,
              "end": 522
            },
            "optional": false,
            "computed": false,
            "start": 516,
            "end": 522
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "\\",
              "raw": "\"\\\\\"",
              "start": 523,
              "end": 527
            }
          ],
          "optional": false,
          "start": 516,
          "end": 528
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "0\\1\\2\\3",
          "raw": "\"0\\\\1\\\\2\\\\3\"",
          "start": 533,
          "end": 545
        },
        "start": 516,
        "end": 545
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 561,
                "end": 573
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1: x = new Array(0,1,2,3); x.join(\"\\\") === \"0\\1\\2\\3\". Actual: ",
                    "raw": "'#1: x = new Array(0,1,2,3); x.join(\"\\\\\") === \"0\\\\1\\\\2\\\\3\". Actual: '",
                    "start": 574,
                    "end": 643
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "x",
                          "start": 647,
                          "end": 648
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "join",
                          "start": 649,
                          "end": 653
                        },
                        "optional": false,
                        "computed": false,
                        "start": 647,
                        "end": 653
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "\\",
                          "raw": "\"\\\\\"",
                          "start": 654,
                          "end": 658
                        }
                      ],
                      "optional": false,
                      "start": 647,
                      "end": 659
                    },
                    "start": 646,
                    "end": 660
                  },
                  "start": 574,
                  "end": 660
                }
              ],
              "start": 557,
              "end": 661
            },
            "start": 551,
            "end": 662
          }
        ],
        "start": 547,
        "end": 664
      },
      "alternate": null,
      "start": 512,
      "end": 664
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "x",
              "start": 670,
              "end": 671
            },
            "property": {
              "type": "Identifier",
              "name": "join",
              "start": 672,
              "end": 676
            },
            "optional": false,
            "computed": false,
            "start": 670,
            "end": 676
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "&",
              "raw": "\"&\"",
              "start": 677,
              "end": 680
            }
          ],
          "optional": false,
          "start": 670,
          "end": 681
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "0&1&2&3",
          "raw": "\"0&1&2&3\"",
          "start": 686,
          "end": 695
        },
        "start": 670,
        "end": 695
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 711,
                "end": 723
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#2: x = new Array(0,1,2,3); x.join(\"&\") === \"0&1&2&3\". Actual: ",
                    "raw": "'#2: x = new Array(0,1,2,3); x.join(\"&\") === \"0&1&2&3\". Actual: '",
                    "start": 724,
                    "end": 789
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "x",
                          "start": 793,
                          "end": 794
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "join",
                          "start": 795,
                          "end": 799
                        },
                        "optional": false,
                        "computed": false,
                        "start": 793,
                        "end": 799
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "&",
                          "raw": "\"&\"",
                          "start": 800,
                          "end": 803
                        }
                      ],
                      "optional": false,
                      "start": 793,
                      "end": 804
                    },
                    "start": 792,
                    "end": 805
                  },
                  "start": 724,
                  "end": 805
                }
              ],
              "start": 707,
              "end": 806
            },
            "start": 701,
            "end": 807
          }
        ],
        "start": 697,
        "end": 809
      },
      "alternate": null,
      "start": 666,
      "end": 809
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "x",
              "start": 815,
              "end": 816
            },
            "property": {
              "type": "Identifier",
              "name": "join",
              "start": 817,
              "end": 821
            },
            "optional": false,
            "computed": false,
            "start": 815,
            "end": 821
          },
          "arguments": [
            {
              "type": "Literal",
              "value": true,
              "raw": "true",
              "start": 822,
              "end": 826
            }
          ],
          "optional": false,
          "start": 815,
          "end": 827
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "0true1true2true3",
          "raw": "\"0true1true2true3\"",
          "start": 832,
          "end": 850
        },
        "start": 815,
        "end": 850
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 866,
                "end": 878
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#3: x = new Array(0,1,2,3); x.join(true) === \"0true1true2true3\". Actual: ",
                    "raw": "'#3: x = new Array(0,1,2,3); x.join(true) === \"0true1true2true3\". Actual: '",
                    "start": 879,
                    "end": 954
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "x",
                          "start": 958,
                          "end": 959
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "join",
                          "start": 960,
                          "end": 964
                        },
                        "optional": false,
                        "computed": false,
                        "start": 958,
                        "end": 964
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": true,
                          "raw": "true",
                          "start": 965,
                          "end": 969
                        }
                      ],
                      "optional": false,
                      "start": 958,
                      "end": 970
                    },
                    "start": 957,
                    "end": 971
                  },
                  "start": 879,
                  "end": 971
                }
              ],
              "start": 862,
              "end": 972
            },
            "start": 856,
            "end": 973
          }
        ],
        "start": 852,
        "end": 975
      },
      "alternate": null,
      "start": 811,
      "end": 975
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "x",
              "start": 981,
              "end": 982
            },
            "property": {
              "type": "Identifier",
              "name": "join",
              "start": 983,
              "end": 987
            },
            "optional": false,
            "computed": false,
            "start": 981,
            "end": 987
          },
          "arguments": [
            {
              "type": "Identifier",
              "name": "Infinity",
              "start": 988,
              "end": 996
            }
          ],
          "optional": false,
          "start": 981,
          "end": 997
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "0Infinity1Infinity2Infinity3",
          "raw": "\"0Infinity1Infinity2Infinity3\"",
          "start": 1002,
          "end": 1032
        },
        "start": 981,
        "end": 1032
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1048,
                "end": 1060
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#4: x = new Array(0,1,2,3); x.join(Infinity) === \"0Infinity1Infinity2Infinity3\". Actual: ",
                    "raw": "'#4: x = new Array(0,1,2,3); x.join(Infinity) === \"0Infinity1Infinity2Infinity3\". Actual: '",
                    "start": 1061,
                    "end": 1152
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "x",
                          "start": 1156,
                          "end": 1157
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "join",
                          "start": 1158,
                          "end": 1162
                        },
                        "optional": false,
                        "computed": false,
                        "start": 1156,
                        "end": 1162
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "Infinity",
                          "start": 1163,
                          "end": 1171
                        }
                      ],
                      "optional": false,
                      "start": 1156,
                      "end": 1172
                    },
                    "start": 1155,
                    "end": 1173
                  },
                  "start": 1061,
                  "end": 1173
                }
              ],
              "start": 1044,
              "end": 1174
            },
            "start": 1038,
            "end": 1175
          }
        ],
        "start": 1034,
        "end": 1177
      },
      "alternate": null,
      "start": 977,
      "end": 1177
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "x",
              "start": 1183,
              "end": 1184
            },
            "property": {
              "type": "Identifier",
              "name": "join",
              "start": 1185,
              "end": 1189
            },
            "optional": false,
            "computed": false,
            "start": 1183,
            "end": 1189
          },
          "arguments": [
            {
              "type": "Literal",
              "value": null,
              "raw": "null",
              "start": 1190,
              "end": 1194
            }
          ],
          "optional": false,
          "start": 1183,
          "end": 1195
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "0null1null2null3",
          "raw": "\"0null1null2null3\"",
          "start": 1200,
          "end": 1218
        },
        "start": 1183,
        "end": 1218
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1234,
                "end": 1246
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#3: 5 = new Array(0,1,2,3); x.join(null) === \"0null1null2null3\". Actual: ",
                    "raw": "'#3: 5 = new Array(0,1,2,3); x.join(null) === \"0null1null2null3\". Actual: '",
                    "start": 1247,
                    "end": 1322
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "x",
                          "start": 1326,
                          "end": 1327
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "join",
                          "start": 1328,
                          "end": 1332
                        },
                        "optional": false,
                        "computed": false,
                        "start": 1326,
                        "end": 1332
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": null,
                          "raw": "null",
                          "start": 1333,
                          "end": 1337
                        }
                      ],
                      "optional": false,
                      "start": 1326,
                      "end": 1338
                    },
                    "start": 1325,
                    "end": 1339
                  },
                  "start": 1247,
                  "end": 1339
                }
              ],
              "start": 1230,
              "end": 1340
            },
            "start": 1224,
            "end": 1341
          }
        ],
        "start": 1220,
        "end": 1343
      },
      "alternate": null,
      "start": 1179,
      "end": 1343
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "x",
              "start": 1349,
              "end": 1350
            },
            "property": {
              "type": "Identifier",
              "name": "join",
              "start": 1351,
              "end": 1355
            },
            "optional": false,
            "computed": false,
            "start": 1349,
            "end": 1355
          },
          "arguments": [
            {
              "type": "Identifier",
              "name": "undefined",
              "start": 1356,
              "end": 1365
            }
          ],
          "optional": false,
          "start": 1349,
          "end": 1366
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "0,1,2,3",
          "raw": "\"0,1,2,3\"",
          "start": 1371,
          "end": 1380
        },
        "start": 1349,
        "end": 1380
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1396,
                "end": 1408
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#6: x = new Array(0,1,2,3); x.join(undefined) === \"0,1,2,3\". Actual: ",
                    "raw": "'#6: x = new Array(0,1,2,3); x.join(undefined) === \"0,1,2,3\". Actual: '",
                    "start": 1409,
                    "end": 1480
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "x",
                          "start": 1484,
                          "end": 1485
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "join",
                          "start": 1486,
                          "end": 1490
                        },
                        "optional": false,
                        "computed": false,
                        "start": 1484,
                        "end": 1490
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "undefined",
                          "start": 1491,
                          "end": 1500
                        }
                      ],
                      "optional": false,
                      "start": 1484,
                      "end": 1501
                    },
                    "start": 1483,
                    "end": 1502
                  },
                  "start": 1409,
                  "end": 1502
                }
              ],
              "start": 1392,
              "end": 1503
            },
            "start": 1386,
            "end": 1504
          }
        ],
        "start": 1382,
        "end": 1506
      },
      "alternate": null,
      "start": 1345,
      "end": 1506
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "x",
              "start": 1512,
              "end": 1513
            },
            "property": {
              "type": "Identifier",
              "name": "join",
              "start": 1514,
              "end": 1518
            },
            "optional": false,
            "computed": false,
            "start": 1512,
            "end": 1518
          },
          "arguments": [
            {
              "type": "Identifier",
              "name": "NaN",
              "start": 1519,
              "end": 1522
            }
          ],
          "optional": false,
          "start": 1512,
          "end": 1523
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "0NaN1NaN2NaN3",
          "raw": "\"0NaN1NaN2NaN3\"",
          "start": 1528,
          "end": 1543
        },
        "start": 1512,
        "end": 1543
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1559,
                "end": 1571
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#7: x = new Array(0,1,2,3); x.join(NaN) === \"0NaN1NaN2NaN3\". Actual: ",
                    "raw": "'#7: x = new Array(0,1,2,3); x.join(NaN) === \"0NaN1NaN2NaN3\". Actual: '",
                    "start": 1572,
                    "end": 1643
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "x",
                          "start": 1647,
                          "end": 1648
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "join",
                          "start": 1649,
                          "end": 1653
                        },
                        "optional": false,
                        "computed": false,
                        "start": 1647,
                        "end": 1653
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "NaN",
                          "start": 1654,
                          "end": 1657
                        }
                      ],
                      "optional": false,
                      "start": 1647,
                      "end": 1658
                    },
                    "start": 1646,
                    "end": 1659
                  },
                  "start": 1572,
                  "end": 1659
                }
              ],
              "start": 1555,
              "end": 1660
            },
            "start": 1549,
            "end": 1661
          }
        ],
        "start": 1545,
        "end": 1663
      },
      "alternate": null,
      "start": 1508,
      "end": 1663
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1664
}