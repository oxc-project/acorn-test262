{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "x",
            "start": 256,
            "end": 257
          },
          "init": {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": 0,
                "raw": "0",
                "start": 261,
                "end": 262
              },
              {
                "type": "Literal",
                "value": 1,
                "raw": "1",
                "start": 264,
                "end": 265
              },
              {
                "type": "Literal",
                "value": 2,
                "raw": "2",
                "start": 267,
                "end": 268
              },
              {
                "type": "Literal",
                "value": 3,
                "raw": "3",
                "start": 270,
                "end": 271
              },
              {
                "type": "Literal",
                "value": 4,
                "raw": "4",
                "start": 273,
                "end": 274
              }
            ],
            "start": 260,
            "end": 275
          },
          "start": 256,
          "end": 275
        }
      ],
      "start": 252,
      "end": 276
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "arr",
            "start": 281,
            "end": 284
          },
          "init": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "object": {
                "type": "Identifier",
                "name": "x",
                "start": 287,
                "end": 288
              },
              "property": {
                "type": "Identifier",
                "name": "slice",
                "start": 289,
                "end": 294
              },
              "optional": false,
              "computed": false,
              "start": 287,
              "end": 294
            },
            "arguments": [
              {
                "type": "Literal",
                "value": 0,
                "raw": "0",
                "start": 295,
                "end": 296
              },
              {
                "type": "ObjectExpression",
                "properties": [
                  {
                    "type": "Property",
                    "kind": "init",
                    "key": {
                      "type": "Identifier",
                      "name": "valueOf",
                      "start": 302,
                      "end": 309
                    },
                    "value": {
                      "type": "FunctionExpression",
                      "id": null,
                      "generator": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": 3,
                              "raw": "3",
                              "start": 335,
                              "end": 336
                            },
                            "start": 328,
                            "end": 336
                          }
                        ],
                        "start": 322,
                        "end": 340
                      },
                      "expression": false,
                      "start": 311,
                      "end": 340
                    },
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "start": 302,
                    "end": 340
                  },
                  {
                    "type": "Property",
                    "kind": "init",
                    "key": {
                      "type": "Identifier",
                      "name": "toString",
                      "start": 344,
                      "end": 352
                    },
                    "value": {
                      "type": "FunctionExpression",
                      "id": null,
                      "generator": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0",
                              "start": 378,
                              "end": 379
                            },
                            "start": 371,
                            "end": 379
                          }
                        ],
                        "start": 365,
                        "end": 383
                      },
                      "expression": false,
                      "start": 354,
                      "end": 383
                    },
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "start": 344,
                    "end": 383
                  }
                ],
                "start": 298,
                "end": 385
              }
            ],
            "optional": false,
            "start": 287,
            "end": 386
          },
          "start": 281,
          "end": 386
        }
      ],
      "start": 277,
      "end": 387
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 389,
            "end": 392
          },
          "property": {
            "type": "Identifier",
            "name": "getClass",
            "start": 393,
            "end": 401
          },
          "optional": false,
          "computed": false,
          "start": 389,
          "end": 401
        },
        "right": {
          "type": "MemberExpression",
          "object": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "Object",
              "start": 404,
              "end": 410
            },
            "property": {
              "type": "Identifier",
              "name": "prototype",
              "start": 411,
              "end": 420
            },
            "optional": false,
            "computed": false,
            "start": 404,
            "end": 420
          },
          "property": {
            "type": "Identifier",
            "name": "toString",
            "start": 421,
            "end": 429
          },
          "optional": false,
          "computed": false,
          "start": 404,
          "end": 429
        },
        "start": 389,
        "end": 429
      },
      "start": 389,
      "end": 430
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "arr",
              "start": 435,
              "end": 438
            },
            "property": {
              "type": "Identifier",
              "name": "getClass",
              "start": 439,
              "end": 447
            },
            "optional": false,
            "computed": false,
            "start": 435,
            "end": 447
          },
          "arguments": [],
          "optional": false,
          "start": 435,
          "end": 449
        },
        "operator": "!==",
        "right": {
          "type": "BinaryExpression",
          "left": {
            "type": "BinaryExpression",
            "left": {
              "type": "Literal",
              "value": "[object ",
              "raw": "\"[object \"",
              "start": 454,
              "end": 464
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "value": "Array",
              "raw": "\"Array\"",
              "start": 467,
              "end": 474
            },
            "start": 454,
            "end": 474
          },
          "operator": "+",
          "right": {
            "type": "Literal",
            "value": "]",
            "raw": "\"]\"",
            "start": 477,
            "end": 480
          },
          "start": 454,
          "end": 480
        },
        "start": 435,
        "end": 480
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 496,
                "end": 508
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr is Array object. Actual: ",
                    "raw": "'#1: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr is Array object. Actual: '",
                    "start": 509,
                    "end": 653
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "arr",
                          "start": 657,
                          "end": 660
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "getClass",
                          "start": 661,
                          "end": 669
                        },
                        "optional": false,
                        "computed": false,
                        "start": 657,
                        "end": 669
                      },
                      "arguments": [],
                      "optional": false,
                      "start": 657,
                      "end": 671
                    },
                    "start": 656,
                    "end": 672
                  },
                  "start": 509,
                  "end": 672
                }
              ],
              "start": 492,
              "end": 673
            },
            "start": 486,
            "end": 674
          }
        ],
        "start": 482,
        "end": 676
      },
      "alternate": null,
      "start": 431,
      "end": 676
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 682,
            "end": 685
          },
          "property": {
            "type": "Identifier",
            "name": "length",
            "start": 686,
            "end": 692
          },
          "optional": false,
          "computed": false,
          "start": 682,
          "end": 692
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 3,
          "raw": "3",
          "start": 697,
          "end": 698
        },
        "start": 682,
        "end": 698
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 714,
                "end": 726
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#2: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr.length === 3. Actual: ",
                    "raw": "'#2: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr.length === 3. Actual: '",
                    "start": 727,
                    "end": 868
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "arr",
                        "start": 872,
                        "end": 875
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length",
                        "start": 876,
                        "end": 882
                      },
                      "optional": false,
                      "computed": false,
                      "start": 872,
                      "end": 882
                    },
                    "start": 871,
                    "end": 883
                  },
                  "start": 727,
                  "end": 883
                }
              ],
              "start": 710,
              "end": 884
            },
            "start": 704,
            "end": 885
          }
        ],
        "start": 700,
        "end": 887
      },
      "alternate": null,
      "start": 678,
      "end": 887
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 893,
            "end": 896
          },
          "property": {
            "type": "Literal",
            "value": 0,
            "raw": "0",
            "start": 897,
            "end": 898
          },
          "optional": false,
          "computed": true,
          "start": 893,
          "end": 899
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 0,
          "raw": "0",
          "start": 904,
          "end": 905
        },
        "start": 893,
        "end": 905
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 921,
                "end": 933
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#3: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[0] === 0. Actual: ",
                    "raw": "'#3: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[0] === 0. Actual: '",
                    "start": 934,
                    "end": 1071
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "arr",
                        "start": 1075,
                        "end": 1078
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "start": 1079,
                        "end": 1080
                      },
                      "optional": false,
                      "computed": true,
                      "start": 1075,
                      "end": 1081
                    },
                    "start": 1074,
                    "end": 1082
                  },
                  "start": 934,
                  "end": 1082
                }
              ],
              "start": 917,
              "end": 1083
            },
            "start": 911,
            "end": 1084
          }
        ],
        "start": 907,
        "end": 1086
      },
      "alternate": null,
      "start": 889,
      "end": 1086
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 1092,
            "end": 1095
          },
          "property": {
            "type": "Literal",
            "value": 1,
            "raw": "1",
            "start": 1096,
            "end": 1097
          },
          "optional": false,
          "computed": true,
          "start": 1092,
          "end": 1098
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 1,
          "raw": "1",
          "start": 1103,
          "end": 1104
        },
        "start": 1092,
        "end": 1104
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1120,
                "end": 1132
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#4: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[1] === 1. Actual: ",
                    "raw": "'#4: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[1] === 1. Actual: '",
                    "start": 1133,
                    "end": 1270
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "arr",
                        "start": 1274,
                        "end": 1277
                      },
                      "property": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "start": 1278,
                        "end": 1279
                      },
                      "optional": false,
                      "computed": true,
                      "start": 1274,
                      "end": 1280
                    },
                    "start": 1273,
                    "end": 1281
                  },
                  "start": 1133,
                  "end": 1281
                }
              ],
              "start": 1116,
              "end": 1282
            },
            "start": 1110,
            "end": 1283
          }
        ],
        "start": 1106,
        "end": 1285
      },
      "alternate": null,
      "start": 1088,
      "end": 1285
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 1291,
            "end": 1294
          },
          "property": {
            "type": "Literal",
            "value": 2,
            "raw": "2",
            "start": 1295,
            "end": 1296
          },
          "optional": false,
          "computed": true,
          "start": 1291,
          "end": 1297
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 2,
          "raw": "2",
          "start": 1302,
          "end": 1303
        },
        "start": 1291,
        "end": 1303
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1319,
                "end": 1331
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#5: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[2] === 2. Actual: ",
                    "raw": "'#5: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[2] === 2. Actual: '",
                    "start": 1332,
                    "end": 1469
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "arr",
                        "start": 1473,
                        "end": 1476
                      },
                      "property": {
                        "type": "Literal",
                        "value": 2,
                        "raw": "2",
                        "start": 1477,
                        "end": 1478
                      },
                      "optional": false,
                      "computed": true,
                      "start": 1473,
                      "end": 1479
                    },
                    "start": 1472,
                    "end": 1480
                  },
                  "start": 1332,
                  "end": 1480
                }
              ],
              "start": 1315,
              "end": 1481
            },
            "start": 1309,
            "end": 1482
          }
        ],
        "start": 1305,
        "end": 1484
      },
      "alternate": null,
      "start": 1287,
      "end": 1484
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 1490,
            "end": 1493
          },
          "property": {
            "type": "Literal",
            "value": 3,
            "raw": "3",
            "start": 1494,
            "end": 1495
          },
          "optional": false,
          "computed": true,
          "start": 1490,
          "end": 1496
        },
        "operator": "!==",
        "right": {
          "type": "Identifier",
          "name": "undefined",
          "start": 1501,
          "end": 1510
        },
        "start": 1490,
        "end": 1510
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1526,
                "end": 1538
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#6: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[3] === undefined. Actual: ",
                    "raw": "'#6: var x = [0,1,2,3,4]; var arr = x.slice(0,{valueOf: function() {return 3}, toString: function() {return 0}}); arr[3] === undefined. Actual: '",
                    "start": 1539,
                    "end": 1684
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "arr",
                        "start": 1688,
                        "end": 1691
                      },
                      "property": {
                        "type": "Literal",
                        "value": 3,
                        "raw": "3",
                        "start": 1692,
                        "end": 1693
                      },
                      "optional": false,
                      "computed": true,
                      "start": 1688,
                      "end": 1694
                    },
                    "start": 1687,
                    "end": 1695
                  },
                  "start": 1539,
                  "end": 1695
                }
              ],
              "start": 1522,
              "end": 1696
            },
            "start": 1516,
            "end": 1697
          }
        ],
        "start": 1512,
        "end": 1699
      },
      "alternate": null,
      "start": 1486,
      "end": 1699
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1700
}