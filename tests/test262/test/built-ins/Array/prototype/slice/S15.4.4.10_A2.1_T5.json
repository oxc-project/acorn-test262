{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "x",
            "start": 258,
            "end": 259
          },
          "init": {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": 0,
                "raw": "0",
                "start": 263,
                "end": 264
              },
              {
                "type": "Literal",
                "value": 1,
                "raw": "1",
                "start": 266,
                "end": 267
              },
              {
                "type": "Literal",
                "value": 2,
                "raw": "2",
                "start": 269,
                "end": 270
              },
              {
                "type": "Literal",
                "value": 3,
                "raw": "3",
                "start": 272,
                "end": 273
              },
              {
                "type": "Literal",
                "value": 4,
                "raw": "4",
                "start": 275,
                "end": 276
              }
            ],
            "start": 262,
            "end": 277
          },
          "start": 258,
          "end": 277
        }
      ],
      "start": 254,
      "end": 278
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "arr",
            "start": 283,
            "end": 286
          },
          "init": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "object": {
                "type": "Identifier",
                "name": "x",
                "start": 289,
                "end": 290
              },
              "property": {
                "type": "Identifier",
                "name": "slice",
                "start": 291,
                "end": 296
              },
              "optional": false,
              "computed": false,
              "start": 289,
              "end": 296
            },
            "arguments": [
              {
                "type": "ObjectExpression",
                "properties": [
                  {
                    "type": "Property",
                    "kind": "init",
                    "key": {
                      "type": "Identifier",
                      "name": "valueOf",
                      "start": 301,
                      "end": 308
                    },
                    "value": {
                      "type": "FunctionExpression",
                      "id": null,
                      "generator": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0",
                              "start": 334,
                              "end": 335
                            },
                            "start": 327,
                            "end": 335
                          }
                        ],
                        "start": 321,
                        "end": 339
                      },
                      "expression": false,
                      "start": 310,
                      "end": 339
                    },
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "start": 301,
                    "end": 339
                  },
                  {
                    "type": "Property",
                    "kind": "init",
                    "key": {
                      "type": "Identifier",
                      "name": "toString",
                      "start": 343,
                      "end": 351
                    },
                    "value": {
                      "type": "FunctionExpression",
                      "id": null,
                      "generator": false,
                      "async": false,
                      "params": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": 3,
                              "raw": "3",
                              "start": 377,
                              "end": 378
                            },
                            "start": 370,
                            "end": 378
                          }
                        ],
                        "start": 364,
                        "end": 382
                      },
                      "expression": false,
                      "start": 353,
                      "end": 382
                    },
                    "method": false,
                    "shorthand": false,
                    "computed": false,
                    "start": 343,
                    "end": 382
                  }
                ],
                "start": 297,
                "end": 384
              },
              {
                "type": "Literal",
                "value": 3,
                "raw": "3",
                "start": 386,
                "end": 387
              }
            ],
            "optional": false,
            "start": 289,
            "end": 388
          },
          "start": 283,
          "end": 388
        }
      ],
      "start": 279,
      "end": 389
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 391,
            "end": 394
          },
          "property": {
            "type": "Identifier",
            "name": "getClass",
            "start": 395,
            "end": 403
          },
          "optional": false,
          "computed": false,
          "start": 391,
          "end": 403
        },
        "right": {
          "type": "MemberExpression",
          "object": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "Object",
              "start": 406,
              "end": 412
            },
            "property": {
              "type": "Identifier",
              "name": "prototype",
              "start": 413,
              "end": 422
            },
            "optional": false,
            "computed": false,
            "start": 406,
            "end": 422
          },
          "property": {
            "type": "Identifier",
            "name": "toString",
            "start": 423,
            "end": 431
          },
          "optional": false,
          "computed": false,
          "start": 406,
          "end": 431
        },
        "start": 391,
        "end": 431
      },
      "start": 391,
      "end": 432
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "arr",
              "start": 437,
              "end": 440
            },
            "property": {
              "type": "Identifier",
              "name": "getClass",
              "start": 441,
              "end": 449
            },
            "optional": false,
            "computed": false,
            "start": 437,
            "end": 449
          },
          "arguments": [],
          "optional": false,
          "start": 437,
          "end": 451
        },
        "operator": "!==",
        "right": {
          "type": "BinaryExpression",
          "left": {
            "type": "BinaryExpression",
            "left": {
              "type": "Literal",
              "value": "[object ",
              "raw": "\"[object \"",
              "start": 456,
              "end": 466
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "value": "Array",
              "raw": "\"Array\"",
              "start": 469,
              "end": 476
            },
            "start": 456,
            "end": 476
          },
          "operator": "+",
          "right": {
            "type": "Literal",
            "value": "]",
            "raw": "\"]\"",
            "start": 479,
            "end": 482
          },
          "start": 456,
          "end": 482
        },
        "start": 437,
        "end": 482
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 498,
                "end": 510
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr is Array object. Actual: ",
                    "raw": "'#1: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr is Array object. Actual: '",
                    "start": 511,
                    "end": 655
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "arr",
                          "start": 659,
                          "end": 662
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "getClass",
                          "start": 663,
                          "end": 671
                        },
                        "optional": false,
                        "computed": false,
                        "start": 659,
                        "end": 671
                      },
                      "arguments": [],
                      "optional": false,
                      "start": 659,
                      "end": 673
                    },
                    "start": 658,
                    "end": 674
                  },
                  "start": 511,
                  "end": 674
                }
              ],
              "start": 494,
              "end": 675
            },
            "start": 488,
            "end": 676
          }
        ],
        "start": 484,
        "end": 678
      },
      "alternate": null,
      "start": 433,
      "end": 678
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 684,
            "end": 687
          },
          "property": {
            "type": "Identifier",
            "name": "length",
            "start": 688,
            "end": 694
          },
          "optional": false,
          "computed": false,
          "start": 684,
          "end": 694
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 3,
          "raw": "3",
          "start": 699,
          "end": 700
        },
        "start": 684,
        "end": 700
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 716,
                "end": 728
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#2: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr.length === 3. Actual: ",
                    "raw": "'#2: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr.length === 3. Actual: '",
                    "start": 729,
                    "end": 870
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "arr",
                        "start": 874,
                        "end": 877
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length",
                        "start": 878,
                        "end": 884
                      },
                      "optional": false,
                      "computed": false,
                      "start": 874,
                      "end": 884
                    },
                    "start": 873,
                    "end": 885
                  },
                  "start": 729,
                  "end": 885
                }
              ],
              "start": 712,
              "end": 886
            },
            "start": 706,
            "end": 887
          }
        ],
        "start": 702,
        "end": 889
      },
      "alternate": null,
      "start": 680,
      "end": 889
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 895,
            "end": 898
          },
          "property": {
            "type": "Literal",
            "value": 0,
            "raw": "0",
            "start": 899,
            "end": 900
          },
          "optional": false,
          "computed": true,
          "start": 895,
          "end": 901
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 0,
          "raw": "0",
          "start": 906,
          "end": 907
        },
        "start": 895,
        "end": 907
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 923,
                "end": 935
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#3: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[0] === 0. Actual: ",
                    "raw": "'#3: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[0] === 0. Actual: '",
                    "start": 936,
                    "end": 1073
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "arr",
                        "start": 1077,
                        "end": 1080
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "start": 1081,
                        "end": 1082
                      },
                      "optional": false,
                      "computed": true,
                      "start": 1077,
                      "end": 1083
                    },
                    "start": 1076,
                    "end": 1084
                  },
                  "start": 936,
                  "end": 1084
                }
              ],
              "start": 919,
              "end": 1085
            },
            "start": 913,
            "end": 1086
          }
        ],
        "start": 909,
        "end": 1088
      },
      "alternate": null,
      "start": 891,
      "end": 1088
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 1094,
            "end": 1097
          },
          "property": {
            "type": "Literal",
            "value": 1,
            "raw": "1",
            "start": 1098,
            "end": 1099
          },
          "optional": false,
          "computed": true,
          "start": 1094,
          "end": 1100
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 1,
          "raw": "1",
          "start": 1105,
          "end": 1106
        },
        "start": 1094,
        "end": 1106
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1122,
                "end": 1134
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#4: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[1] === 1. Actual: ",
                    "raw": "'#4: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[1] === 1. Actual: '",
                    "start": 1135,
                    "end": 1272
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "arr",
                        "start": 1276,
                        "end": 1279
                      },
                      "property": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "start": 1280,
                        "end": 1281
                      },
                      "optional": false,
                      "computed": true,
                      "start": 1276,
                      "end": 1282
                    },
                    "start": 1275,
                    "end": 1283
                  },
                  "start": 1135,
                  "end": 1283
                }
              ],
              "start": 1118,
              "end": 1284
            },
            "start": 1112,
            "end": 1285
          }
        ],
        "start": 1108,
        "end": 1287
      },
      "alternate": null,
      "start": 1090,
      "end": 1287
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 1293,
            "end": 1296
          },
          "property": {
            "type": "Literal",
            "value": 2,
            "raw": "2",
            "start": 1297,
            "end": 1298
          },
          "optional": false,
          "computed": true,
          "start": 1293,
          "end": 1299
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 2,
          "raw": "2",
          "start": 1304,
          "end": 1305
        },
        "start": 1293,
        "end": 1305
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1321,
                "end": 1333
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#5: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[2] === 2. Actual: ",
                    "raw": "'#5: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[2] === 2. Actual: '",
                    "start": 1334,
                    "end": 1471
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "arr",
                        "start": 1475,
                        "end": 1478
                      },
                      "property": {
                        "type": "Literal",
                        "value": 2,
                        "raw": "2",
                        "start": 1479,
                        "end": 1480
                      },
                      "optional": false,
                      "computed": true,
                      "start": 1475,
                      "end": 1481
                    },
                    "start": 1474,
                    "end": 1482
                  },
                  "start": 1334,
                  "end": 1482
                }
              ],
              "start": 1317,
              "end": 1483
            },
            "start": 1311,
            "end": 1484
          }
        ],
        "start": 1307,
        "end": 1486
      },
      "alternate": null,
      "start": 1289,
      "end": 1486
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "arr",
            "start": 1492,
            "end": 1495
          },
          "property": {
            "type": "Literal",
            "value": 3,
            "raw": "3",
            "start": 1496,
            "end": 1497
          },
          "optional": false,
          "computed": true,
          "start": 1492,
          "end": 1498
        },
        "operator": "!==",
        "right": {
          "type": "Identifier",
          "name": "undefined",
          "start": 1503,
          "end": 1512
        },
        "start": 1492,
        "end": 1512
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1528,
                "end": 1540
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#6: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[3] === undefined. Actual: ",
                    "raw": "'#6: var x = [0,1,2,3,4]; var arr = x.slice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[3] === undefined. Actual: '",
                    "start": 1541,
                    "end": 1686
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "arr",
                        "start": 1690,
                        "end": 1693
                      },
                      "property": {
                        "type": "Literal",
                        "value": 3,
                        "raw": "3",
                        "start": 1694,
                        "end": 1695
                      },
                      "optional": false,
                      "computed": true,
                      "start": 1690,
                      "end": 1696
                    },
                    "start": 1689,
                    "end": 1697
                  },
                  "start": 1541,
                  "end": 1697
                }
              ],
              "start": 1524,
              "end": 1698
            },
            "start": 1518,
            "end": 1699
          }
        ],
        "start": 1514,
        "end": 1701
      },
      "alternate": null,
      "start": 1488,
      "end": 1701
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1702
}