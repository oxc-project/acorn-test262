{
  "type": "Program",
  "body": [
    {
      "type": "ForStatement",
      "init": {
        "type": "VariableDeclaration",
        "kind": "var",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": {
              "type": "Identifier",
              "name": "i",
              "start": 412,
              "end": 413
            },
            "init": {
              "type": "Literal",
              "value": 0,
              "raw": "0",
              "start": 416,
              "end": 417
            },
            "start": 412,
            "end": 417
          }
        ],
        "start": 408,
        "end": 417
      },
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "Identifier",
          "name": "i",
          "start": 419,
          "end": 420
        },
        "operator": "<",
        "right": {
          "type": "Literal",
          "value": 100,
          "raw": "100",
          "start": 423,
          "end": 426
        },
        "start": 419,
        "end": 426
      },
      "update": {
        "type": "UpdateExpression",
        "operator": "++",
        "prefix": false,
        "argument": {
          "type": "Identifier",
          "name": "i",
          "start": 428,
          "end": 429
        },
        "start": 428,
        "end": 431
      },
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "kind": "var",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "val",
                  "start": 441,
                  "end": 444
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "Math",
                      "start": 447,
                      "end": 451
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "random",
                      "start": 452,
                      "end": 458
                    },
                    "optional": false,
                    "computed": false,
                    "start": 447,
                    "end": 458
                  },
                  "arguments": [],
                  "optional": false,
                  "start": 447,
                  "end": 460
                },
                "start": 441,
                "end": 460
              }
            ],
            "start": 437,
            "end": 461
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "assert",
                  "start": 465,
                  "end": 471
                },
                "property": {
                  "type": "Identifier",
                  "name": "sameValue",
                  "start": 472,
                  "end": 481
                },
                "optional": false,
                "computed": false,
                "start": 465,
                "end": 481
              },
              "arguments": [
                {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "val",
                    "start": 494,
                    "end": 497
                  },
                  "prefix": true,
                  "start": 487,
                  "end": 497
                },
                {
                  "type": "Literal",
                  "value": "number",
                  "raw": "'number'",
                  "start": 499,
                  "end": 507
                },
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "should not produce a non-numeric value: ",
                    "raw": "'should not produce a non-numeric value: '",
                    "start": 509,
                    "end": 551
                  },
                  "operator": "+",
                  "right": {
                    "type": "Identifier",
                    "name": "val",
                    "start": 554,
                    "end": 557
                  },
                  "start": 509,
                  "end": 557
                }
              ],
              "optional": false,
              "start": 465,
              "end": 561
            },
            "start": 465,
            "end": 562
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "assert",
                  "start": 565,
                  "end": 571
                },
                "property": {
                  "type": "Identifier",
                  "name": "notSameValue",
                  "start": 572,
                  "end": 584
                },
                "optional": false,
                "computed": false,
                "start": 565,
                "end": 584
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "val",
                  "start": 585,
                  "end": 588
                },
                {
                  "type": "Identifier",
                  "name": "NaN",
                  "start": 590,
                  "end": 593
                },
                {
                  "type": "Literal",
                  "value": "should not produce NaN",
                  "raw": "'should not produce NaN'",
                  "start": 595,
                  "end": 619
                }
              ],
              "optional": false,
              "start": 565,
              "end": 620
            },
            "start": 565,
            "end": 621
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "LogicalExpression",
              "left": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Identifier",
                  "name": "val",
                  "start": 629,
                  "end": 632
                },
                "operator": "<",
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0",
                  "start": 635,
                  "end": 636
                },
                "start": 629,
                "end": 636
              },
              "operator": "||",
              "right": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Identifier",
                  "name": "val",
                  "start": 640,
                  "end": 643
                },
                "operator": ">=",
                "right": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1",
                  "start": 647,
                  "end": 648
                },
                "start": 640,
                "end": 648
              },
              "start": 629,
              "end": 648
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ThrowStatement",
                  "argument": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Test262Error",
                      "start": 668,
                      "end": 680
                    },
                    "arguments": [
                      {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Literal",
                          "value": "#1: Math.random() = ",
                          "raw": "\"#1: Math.random() = \"",
                          "start": 681,
                          "end": 703
                        },
                        "operator": "+",
                        "right": {
                          "type": "Identifier",
                          "name": "val",
                          "start": 706,
                          "end": 709
                        },
                        "start": 681,
                        "end": 709
                      }
                    ],
                    "start": 664,
                    "end": 710
                  },
                  "start": 658,
                  "end": 711
                }
              ],
              "start": 652,
              "end": 715
            },
            "alternate": null,
            "start": 625,
            "end": 715
          }
        ],
        "start": 433,
        "end": 717
      },
      "start": 403,
      "end": 717
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 718
}