{
  "type": "Program",
  "start": 0,
  "end": 709,
  "body": [
    {
      "type": "TryStatement",
      "start": 404,
      "end": 540,
      "block": {
        "type": "BlockStatement",
        "start": 408,
        "end": 481,
        "body": [
          {
            "type": "VariableDeclaration",
            "start": 412,
            "end": 479,
            "kind": "var",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "start": 416,
                "end": 478,
                "id": {
                  "type": "Identifier",
                  "start": 416,
                  "end": 417,
                  "name": "f"
                },
                "init": {
                  "type": "CallExpression",
                  "start": 420,
                  "end": 478,
                  "callee": {
                    "type": "Identifier",
                    "start": 420,
                    "end": 428,
                    "name": "Function"
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "start": 429,
                      "end": 435,
                      "value": "arg1",
                      "raw": "\"arg1\""
                    },
                    {
                      "type": "Literal",
                      "start": 437,
                      "end": 443,
                      "value": "arg2",
                      "raw": "\"arg2\""
                    },
                    {
                      "type": "Literal",
                      "start": 445,
                      "end": 451,
                      "value": "arg3",
                      "raw": "\"arg3\""
                    },
                    {
                      "type": "Literal",
                      "start": 453,
                      "end": 477,
                      "value": "return arg1+arg2+arg3;",
                      "raw": "\"return arg1+arg2+arg3;\""
                    }
                  ],
                  "optional": false
                }
              }
            ]
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 482,
        "end": 540,
        "param": {
          "type": "Identifier",
          "start": 489,
          "end": 490,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 492,
          "end": 540,
          "body": [
            {
              "type": "ThrowStatement",
              "start": 496,
              "end": 538,
              "argument": {
                "type": "NewExpression",
                "start": 502,
                "end": 537,
                "callee": {
                  "type": "Identifier",
                  "start": 506,
                  "end": 518,
                  "name": "Test262Error"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "start": 519,
                    "end": 536,
                    "value": "#1: test failed",
                    "raw": "'#1: test failed'"
                  }
                ]
              }
            }
          ]
        }
      },
      "finalizer": null
    },
    {
      "type": "ExpressionStatement",
      "start": 542,
      "end": 647,
      "expression": {
        "type": "CallExpression",
        "start": 542,
        "end": 646,
        "callee": {
          "type": "Identifier",
          "start": 542,
          "end": 548,
          "name": "assert"
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 549,
            "end": 570,
            "left": {
              "type": "Identifier",
              "start": 549,
              "end": 550,
              "name": "f"
            },
            "operator": "instanceof",
            "right": {
              "type": "Identifier",
              "start": 562,
              "end": 570,
              "name": "Function"
            }
          },
          {
            "type": "Literal",
            "start": 572,
            "end": 645,
            "value": "The result of evaluating (f instanceof Function) is expected to be true",
            "raw": "'The result of evaluating (f instanceof Function) is expected to be true'"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 648,
      "end": 708,
      "expression": {
        "type": "CallExpression",
        "start": 648,
        "end": 707,
        "callee": {
          "type": "MemberExpression",
          "start": 648,
          "end": 664,
          "object": {
            "type": "Identifier",
            "start": 648,
            "end": 654,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 655,
            "end": 664,
            "name": "sameValue"
          },
          "optional": false,
          "computed": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 665,
            "end": 675,
            "callee": {
              "type": "Identifier",
              "start": 665,
              "end": 666,
              "name": "f"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 667,
                "end": 668,
                "value": 1,
                "raw": "1"
              },
              {
                "type": "Literal",
                "start": 670,
                "end": 671,
                "value": 2,
                "raw": "2"
              },
              {
                "type": "Literal",
                "start": 673,
                "end": 674,
                "value": 3,
                "raw": "3"
              }
            ],
            "optional": false
          },
          {
            "type": "Literal",
            "start": 677,
            "end": 678,
            "value": 6,
            "raw": "6"
          },
          {
            "type": "Literal",
            "start": 680,
            "end": 706,
            "value": "f(1, 2, 3) must return 6",
            "raw": "'f(1, 2, 3) must return 6'"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}