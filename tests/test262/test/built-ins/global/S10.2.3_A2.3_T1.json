{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "evalStr",
            "start": 289,
            "end": 296
          },
          "init": {
            "type": "BinaryExpression",
            "left": {
              "type": "BinaryExpression",
              "left": {
                "type": "BinaryExpression",
                "left": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "BinaryExpression",
                    "left": {
                      "type": "BinaryExpression",
                      "left": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "Literal",
                              "value": "//CHECK#1\n",
                              "raw": "'//CHECK#1\\n'",
                              "start": 299,
                              "end": 312
                            },
                            "operator": "+",
                            "right": {
                              "type": "Literal",
                              "value": "for (var x in this) {\n",
                              "raw": "'for (var x in this) {\\n'",
                              "start": 314,
                              "end": 339
                            },
                            "start": 299,
                            "end": 339
                          },
                          "operator": "+",
                          "right": {
                            "type": "Literal",
                            "value": "  if ( x === 'NaN' ) {\n",
                            "raw": "'  if ( x === \\'NaN\\' ) {\\n'",
                            "start": 341,
                            "end": 369
                          },
                          "start": 299,
                          "end": 369
                        },
                        "operator": "+",
                        "right": {
                          "type": "Literal",
                          "value": "    throw new Test262Error(\"#1: 'NaN' have attribute DontEnum\");\n",
                          "raw": "'    throw new Test262Error(\"#1: \\'NaN\\' have attribute DontEnum\");\\n'",
                          "start": 371,
                          "end": 441
                        },
                        "start": 299,
                        "end": 441
                      },
                      "operator": "+",
                      "right": {
                        "type": "Literal",
                        "value": "  } else if ( x === 'Infinity' ) {\n",
                        "raw": "'  } else if ( x === \\'Infinity\\' ) {\\n'",
                        "start": 443,
                        "end": 483
                      },
                      "start": 299,
                      "end": 483
                    },
                    "operator": "+",
                    "right": {
                      "type": "Literal",
                      "value": "    throw new Test262Error(\"#1: 'Infinity' have attribute DontEnum\");\n",
                      "raw": "'    throw new Test262Error(\"#1: \\'Infinity\\' have attribute DontEnum\");\\n'",
                      "start": 485,
                      "end": 560
                    },
                    "start": 299,
                    "end": 560
                  },
                  "operator": "+",
                  "right": {
                    "type": "Literal",
                    "value": "  } else if ( x === 'undefined' ) {\n",
                    "raw": "'  } else if ( x === \\'undefined\\' ) {\\n'",
                    "start": 562,
                    "end": 603
                  },
                  "start": 299,
                  "end": 603
                },
                "operator": "+",
                "right": {
                  "type": "Literal",
                  "value": "    throw new Test262Error(\"#1: 'undefined' have attribute DontEnum\");\n",
                  "raw": "'    throw new Test262Error(\"#1: \\'undefined\\' have attribute DontEnum\");\\n'",
                  "start": 605,
                  "end": 681
                },
                "start": 299,
                "end": 681
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "value": "  }\n",
                "raw": "'  }\\n'",
                "start": 683,
                "end": 690
              },
              "start": 299,
              "end": 690
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "value": "}\n",
              "raw": "'}\\n'",
              "start": 692,
              "end": 697
            },
            "start": 299,
            "end": 697
          },
          "start": 289,
          "end": 697
        }
      ],
      "start": 285,
      "end": 698
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "eval",
          "start": 700,
          "end": 704
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "evalStr",
            "start": 705,
            "end": 712
          }
        ],
        "optional": false,
        "start": 700,
        "end": 713
      },
      "start": 700,
      "end": 714
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 715
}