{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "__reg",
            "start": 269,
            "end": 274
          },
          "init": {
            "type": "NewExpression",
            "callee": {
              "type": "Identifier",
              "name": "RegExp",
              "start": 281,
              "end": 287
            },
            "arguments": [
              {
                "type": "Literal",
                "value": "abc",
                "raw": "\"abc\"",
                "start": 288,
                "end": 293
              }
            ],
            "start": 277,
            "end": 294
          },
          "start": 269,
          "end": 294
        }
      ],
      "start": 265,
      "end": 295
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "__reg",
            "start": 296,
            "end": 301
          },
          "property": {
            "type": "Identifier",
            "name": "toUpperCase",
            "start": 302,
            "end": 313
          },
          "optional": false,
          "computed": false,
          "start": 296,
          "end": 313
        },
        "right": {
          "type": "MemberExpression",
          "object": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "String",
              "start": 316,
              "end": 322
            },
            "property": {
              "type": "Identifier",
              "name": "prototype",
              "start": 323,
              "end": 332
            },
            "optional": false,
            "computed": false,
            "start": 316,
            "end": 332
          },
          "property": {
            "type": "Identifier",
            "name": "toUpperCase",
            "start": 333,
            "end": 344
          },
          "optional": false,
          "computed": false,
          "start": 316,
          "end": 344
        },
        "start": 296,
        "end": 344
      },
      "start": 296,
      "end": 345
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "__reg",
              "start": 439,
              "end": 444
            },
            "property": {
              "type": "Identifier",
              "name": "toUpperCase",
              "start": 445,
              "end": 456
            },
            "optional": false,
            "computed": false,
            "start": 439,
            "end": 456
          },
          "arguments": [],
          "optional": false,
          "start": 439,
          "end": 458
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "/ABC/",
          "raw": "\"/ABC/\"",
          "start": 463,
          "end": 470
        },
        "start": 439,
        "end": 470
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 486,
                "end": 498
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1: var __reg = new RegExp(\"abc\"); __reg.toUpperCase = String.prototype.toUpperCase; __reg.toUpperCase() === \"/ABC/\". Actual: ",
                    "raw": "'#1: var __reg = new RegExp(\"abc\"); __reg.toUpperCase = String.prototype.toUpperCase; __reg.toUpperCase() === \"/ABC/\". Actual: '",
                    "start": 499,
                    "end": 627
                  },
                  "operator": "+",
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "__reg",
                        "start": 630,
                        "end": 635
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "toUpperCase",
                        "start": 636,
                        "end": 647
                      },
                      "optional": false,
                      "computed": false,
                      "start": 630,
                      "end": 647
                    },
                    "arguments": [],
                    "optional": false,
                    "start": 630,
                    "end": 649
                  },
                  "start": 499,
                  "end": 649
                }
              ],
              "start": 482,
              "end": 650
            },
            "start": 476,
            "end": 651
          }
        ],
        "start": 472,
        "end": 653
      },
      "alternate": null,
      "start": 435,
      "end": 653
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 736
}