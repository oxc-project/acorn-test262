{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "const",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "s1",
            "start": 351,
            "end": 353
          },
          "init": {
            "type": "NewExpression",
            "callee": {
              "type": "Identifier",
              "name": "Set",
              "start": 360,
              "end": 363
            },
            "arguments": [
              {
                "type": "ArrayExpression",
                "elements": [
                  {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "start": 365,
                    "end": 366
                  },
                  {
                    "type": "Literal",
                    "value": 2,
                    "raw": "2",
                    "start": 368,
                    "end": 369
                  }
                ],
                "start": 364,
                "end": 370
              }
            ],
            "start": 356,
            "end": 371
          },
          "start": 351,
          "end": 371
        }
      ],
      "start": 345,
      "end": 372
    },
    {
      "type": "VariableDeclaration",
      "kind": "const",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "s2",
            "start": 379,
            "end": 381
          },
          "init": {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": 5,
                "raw": "5",
                "start": 385,
                "end": 386
              },
              {
                "type": "Literal",
                "value": 6,
                "raw": "6",
                "start": 388,
                "end": 389
              }
            ],
            "start": 384,
            "end": 390
          },
          "start": 379,
          "end": 390
        }
      ],
      "start": 373,
      "end": 391
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "s2",
            "start": 392,
            "end": 394
          },
          "property": {
            "type": "Identifier",
            "name": "size",
            "start": 395,
            "end": 399
          },
          "optional": false,
          "computed": false,
          "start": 392,
          "end": 399
        },
        "right": {
          "type": "Literal",
          "value": 3,
          "raw": "3",
          "start": 402,
          "end": 403
        },
        "start": 392,
        "end": 403
      },
      "start": 392,
      "end": 404
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "s2",
            "start": 405,
            "end": 407
          },
          "property": {
            "type": "Identifier",
            "name": "has",
            "start": 408,
            "end": 411
          },
          "optional": false,
          "computed": false,
          "start": 405,
          "end": 411
        },
        "right": {
          "type": "FunctionExpression",
          "id": null,
          "generator": false,
          "async": false,
          "params": [
            {
              "type": "Identifier",
              "name": "v",
              "start": 424,
              "end": 425
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Identifier",
                    "name": "v",
                    "start": 435,
                    "end": 436
                  },
                  "operator": "===",
                  "right": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "start": 441,
                    "end": 442
                  },
                  "start": 435,
                  "end": 442
                },
                "consequent": {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "Literal",
                    "value": false,
                    "raw": "false",
                    "start": 451,
                    "end": 456
                  },
                  "start": 444,
                  "end": 457
                },
                "alternate": null,
                "start": 431,
                "end": 457
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Identifier",
                    "name": "v",
                    "start": 464,
                    "end": 465
                  },
                  "operator": "===",
                  "right": {
                    "type": "Literal",
                    "value": 2,
                    "raw": "2",
                    "start": 470,
                    "end": 471
                  },
                  "start": 464,
                  "end": 471
                },
                "consequent": {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "Literal",
                    "value": true,
                    "raw": "true",
                    "start": 480,
                    "end": 484
                  },
                  "start": 473,
                  "end": 485
                },
                "alternate": null,
                "start": 460,
                "end": 485
              },
              {
                "type": "ThrowStatement",
                "argument": {
                  "type": "NewExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "Test262Error",
                    "start": 498,
                    "end": 510
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": "Set.prototype.intersection should only call its argument's has method with contents of this",
                      "raw": "\"Set.prototype.intersection should only call its argument's has method with contents of this\"",
                      "start": 511,
                      "end": 604
                    }
                  ],
                  "start": 494,
                  "end": 605
                },
                "start": 488,
                "end": 606
              }
            ],
            "start": 427,
            "end": 608
          },
          "expression": false,
          "start": 414,
          "end": 608
        },
        "start": 405,
        "end": 608
      },
      "start": 405,
      "end": 609
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "s2",
            "start": 610,
            "end": 612
          },
          "property": {
            "type": "Identifier",
            "name": "keys",
            "start": 613,
            "end": 617
          },
          "optional": false,
          "computed": false,
          "start": 610,
          "end": 617
        },
        "right": {
          "type": "FunctionExpression",
          "id": null,
          "generator": false,
          "async": false,
          "params": [],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ThrowStatement",
                "argument": {
                  "type": "NewExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "Test262Error",
                    "start": 646,
                    "end": 658
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": "Set.prototype.intersection should not call its argument's keys iterator when this.size ≤ arg.size",
                      "raw": "\"Set.prototype.intersection should not call its argument's keys iterator when this.size ≤ arg.size\"",
                      "start": 659,
                      "end": 758
                    }
                  ],
                  "start": 642,
                  "end": 759
                },
                "start": 636,
                "end": 760
              }
            ],
            "start": 632,
            "end": 762
          },
          "expression": false,
          "start": 620,
          "end": 762
        },
        "start": 610,
        "end": 762
      },
      "start": 610,
      "end": 763
    },
    {
      "type": "VariableDeclaration",
      "kind": "const",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "expected",
            "start": 771,
            "end": 779
          },
          "init": {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": 2,
                "raw": "2",
                "start": 783,
                "end": 784
              }
            ],
            "start": 782,
            "end": 785
          },
          "start": 771,
          "end": 785
        }
      ],
      "start": 765,
      "end": 786
    },
    {
      "type": "VariableDeclaration",
      "kind": "const",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "combined",
            "start": 793,
            "end": 801
          },
          "init": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "object": {
                "type": "Identifier",
                "name": "s1",
                "start": 804,
                "end": 806
              },
              "property": {
                "type": "Identifier",
                "name": "intersection",
                "start": 807,
                "end": 819
              },
              "optional": false,
              "computed": false,
              "start": 804,
              "end": 819
            },
            "arguments": [
              {
                "type": "Identifier",
                "name": "s2",
                "start": 820,
                "end": 822
              }
            ],
            "optional": false,
            "start": 804,
            "end": 823
          },
          "start": 793,
          "end": 823
        }
      ],
      "start": 787,
      "end": 824
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 826,
            "end": 832
          },
          "property": {
            "type": "Identifier",
            "name": "compareArray",
            "start": 833,
            "end": 845
          },
          "optional": false,
          "computed": false,
          "start": 826,
          "end": 845
        },
        "arguments": [
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "SpreadElement",
                "argument": {
                  "type": "Identifier",
                  "name": "combined",
                  "start": 850,
                  "end": 858
                },
                "start": 847,
                "end": 858
              }
            ],
            "start": 846,
            "end": 859
          },
          {
            "type": "Identifier",
            "name": "expected",
            "start": 861,
            "end": 869
          }
        ],
        "optional": false,
        "start": 826,
        "end": 870
      },
      "start": 826,
      "end": 871
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 872,
            "end": 878
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 879,
            "end": 888
          },
          "optional": false,
          "computed": false,
          "start": 872,
          "end": 888
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "left": {
              "type": "Identifier",
              "name": "combined",
              "start": 889,
              "end": 897
            },
            "operator": "instanceof",
            "right": {
              "type": "Identifier",
              "name": "Set",
              "start": 909,
              "end": 912
            },
            "start": 889,
            "end": 912
          },
          {
            "type": "Literal",
            "value": true,
            "raw": "true",
            "start": 914,
            "end": 918
          },
          {
            "type": "Literal",
            "value": "The returned object is a Set",
            "raw": "\"The returned object is a Set\"",
            "start": 920,
            "end": 950
          }
        ],
        "optional": false,
        "start": 872,
        "end": 951
      },
      "start": 872,
      "end": 952
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 953
}