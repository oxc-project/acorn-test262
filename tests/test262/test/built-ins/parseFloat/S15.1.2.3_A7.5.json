{
  "type": "Program",
  "body": [
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "object": {
              "type": "ThisExpression",
              "start": 300,
              "end": 304
            },
            "property": {
              "type": "Identifier",
              "name": "propertyIsEnumerable",
              "start": 305,
              "end": 325
            },
            "optional": false,
            "computed": false,
            "start": 300,
            "end": 325
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "parseFloat",
              "raw": "'parseFloat'",
              "start": 326,
              "end": 338
            }
          ],
          "optional": false,
          "start": 300,
          "end": 339
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": false,
          "raw": "false",
          "start": 344,
          "end": 349
        },
        "start": 300,
        "end": 349
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 365,
                "end": 377
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1:this.propertyIsEnumerable('parseFloat') === false. Actual: ",
                    "raw": "'#1:this.propertyIsEnumerable(\\'parseFloat\\') === false. Actual: '",
                    "start": 378,
                    "end": 444
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "ThisExpression",
                          "start": 448,
                          "end": 452
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "propertyIsEnumerable",
                          "start": 453,
                          "end": 473
                        },
                        "optional": false,
                        "computed": false,
                        "start": 448,
                        "end": 473
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "parseFloat",
                          "raw": "'parseFloat'",
                          "start": 474,
                          "end": 486
                        }
                      ],
                      "optional": false,
                      "start": 448,
                      "end": 487
                    },
                    "start": 447,
                    "end": 488
                  },
                  "start": 378,
                  "end": 488
                }
              ],
              "start": 361,
              "end": 489
            },
            "start": 355,
            "end": 490
          }
        ],
        "start": 351,
        "end": 492
      },
      "alternate": null,
      "start": 296,
      "end": 492
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "result",
            "start": 508,
            "end": 514
          },
          "init": {
            "type": "Literal",
            "value": true,
            "raw": "true",
            "start": 517,
            "end": 521
          },
          "start": 508,
          "end": 521
        }
      ],
      "start": 504,
      "end": 522
    },
    {
      "type": "ForInStatement",
      "left": {
        "type": "VariableDeclaration",
        "kind": "var",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": {
              "type": "Identifier",
              "name": "p",
              "start": 532,
              "end": 533
            },
            "init": null,
            "start": 532,
            "end": 533
          }
        ],
        "start": 528,
        "end": 533
      },
      "right": {
        "type": "ThisExpression",
        "start": 537,
        "end": 541
      },
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "IfStatement",
            "test": {
              "type": "BinaryExpression",
              "left": {
                "type": "Identifier",
                "name": "p",
                "start": 551,
                "end": 552
              },
              "operator": "===",
              "right": {
                "type": "Literal",
                "value": "parseFloat",
                "raw": "\"parseFloat\"",
                "start": 557,
                "end": 569
              },
              "start": 551,
              "end": 569
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "result",
                      "start": 577,
                      "end": 583
                    },
                    "right": {
                      "type": "Literal",
                      "value": false,
                      "raw": "false",
                      "start": 586,
                      "end": 591
                    },
                    "start": 577,
                    "end": 591
                  },
                  "start": 577,
                  "end": 592
                }
              ],
              "start": 571,
              "end": 596
            },
            "alternate": null,
            "start": 547,
            "end": 596
          }
        ],
        "start": 543,
        "end": 598
      },
      "start": 523,
      "end": 598
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "Identifier",
          "name": "result",
          "start": 604,
          "end": 610
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 615,
          "end": 619
        },
        "start": 604,
        "end": 619
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 635,
                "end": 647
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "#2: result = true; for (p in this) { if (p === \"parseFloat\") result = false; }  result === true;",
                  "raw": "'#2: result = true; for (p in this) { if (p === \"parseFloat\") result = false; }  result === true;'",
                  "start": 648,
                  "end": 746
                }
              ],
              "start": 631,
              "end": 747
            },
            "start": 625,
            "end": 748
          }
        ],
        "start": 621,
        "end": 750
      },
      "alternate": null,
      "start": 600,
      "end": 750
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 751
}