{
  "type": "Program",
  "start": 0,
  "end": 1066,
  "body": [
    {
      "type": "IfStatement",
      "start": 252,
      "end": 440,
      "test": {
        "type": "BinaryExpression",
        "start": 256,
        "end": 307,
        "left": {
          "type": "CallExpression",
          "start": 256,
          "end": 284,
          "callee": {
            "type": "Identifier",
            "start": 256,
            "end": 266,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 267,
              "end": 283,
              "callee": {
                "type": "Identifier",
                "start": 271,
                "end": 277,
                "name": "Number"
              },
              "arguments": [
                {
                  "type": "UnaryExpression",
                  "start": 278,
                  "end": 282,
                  "operator": "-",
                  "argument": {
                    "type": "Literal",
                    "start": 279,
                    "end": 282,
                    "value": 1.1,
                    "raw": "1.1"
                  },
                  "prefix": true
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "start": 289,
          "end": 307,
          "callee": {
            "type": "Identifier",
            "start": 289,
            "end": 299,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 300,
              "end": 306,
              "value": "-1.1",
              "raw": "\"-1.1\""
            }
          ],
          "optional": false
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 309,
        "end": 440,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 313,
            "end": 438,
            "argument": {
              "type": "NewExpression",
              "start": 319,
              "end": 437,
              "callee": {
                "type": "Identifier",
                "start": 323,
                "end": 335,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 336,
                  "end": 436,
                  "left": {
                    "type": "Literal",
                    "start": 336,
                    "end": 403,
                    "value": "#1: parseFloat(new Number(-1.1)) === parseFloat(\"-1.1\"). Actual: ",
                    "raw": "'#1: parseFloat(new Number(-1.1)) === parseFloat(\"-1.1\"). Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 406,
                    "end": 436,
                    "expression": {
                      "type": "CallExpression",
                      "start": 407,
                      "end": 435,
                      "callee": {
                        "type": "Identifier",
                        "start": 407,
                        "end": 417,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 418,
                          "end": 434,
                          "callee": {
                            "type": "Identifier",
                            "start": 422,
                            "end": 428,
                            "name": "Number"
                          },
                          "arguments": [
                            {
                              "type": "UnaryExpression",
                              "start": 429,
                              "end": 433,
                              "operator": "-",
                              "argument": {
                                "type": "Literal",
                                "start": 430,
                                "end": 433,
                                "value": 1.1,
                                "raw": "1.1"
                              },
                              "prefix": true
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 452,
      "end": 660,
      "test": {
        "type": "BinaryExpression",
        "start": 456,
        "end": 515,
        "left": {
          "type": "CallExpression",
          "start": 456,
          "end": 488,
          "callee": {
            "type": "Identifier",
            "start": 456,
            "end": 466,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 467,
              "end": 487,
              "callee": {
                "type": "Identifier",
                "start": 471,
                "end": 477,
                "name": "Number"
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "start": 478,
                  "end": 486,
                  "name": "Infinity"
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "start": 493,
          "end": 515,
          "callee": {
            "type": "Identifier",
            "start": 493,
            "end": 503,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 504,
              "end": 514,
              "value": "Infinity",
              "raw": "\"Infinity\""
            }
          ],
          "optional": false
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 517,
        "end": 660,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 521,
            "end": 658,
            "argument": {
              "type": "NewExpression",
              "start": 527,
              "end": 657,
              "callee": {
                "type": "Identifier",
                "start": 531,
                "end": 543,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 544,
                  "end": 656,
                  "left": {
                    "type": "Literal",
                    "start": 544,
                    "end": 619,
                    "value": "#2: parseFloat(new Number(Infinity)) === parseFloat(\"Infinity\"). Actual: ",
                    "raw": "'#2: parseFloat(new Number(Infinity)) === parseFloat(\"Infinity\"). Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 622,
                    "end": 656,
                    "expression": {
                      "type": "CallExpression",
                      "start": 623,
                      "end": 655,
                      "callee": {
                        "type": "Identifier",
                        "start": 623,
                        "end": 633,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 634,
                          "end": 654,
                          "callee": {
                            "type": "Identifier",
                            "start": 638,
                            "end": 644,
                            "name": "Number"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "start": 645,
                              "end": 653,
                              "name": "Infinity"
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 672,
      "end": 855,
      "test": {
        "type": "BinaryExpression",
        "start": 676,
        "end": 721,
        "left": {
          "type": "CallExpression",
          "start": 676,
          "end": 711,
          "callee": {
            "type": "Identifier",
            "start": 676,
            "end": 682,
            "name": "String"
          },
          "arguments": [
            {
              "type": "CallExpression",
              "start": 683,
              "end": 710,
              "callee": {
                "type": "Identifier",
                "start": 683,
                "end": 693,
                "name": "parseFloat"
              },
              "arguments": [
                {
                  "type": "NewExpression",
                  "start": 694,
                  "end": 709,
                  "callee": {
                    "type": "Identifier",
                    "start": 698,
                    "end": 704,
                    "name": "Number"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "start": 705,
                      "end": 708,
                      "name": "NaN"
                    }
                  ]
                }
              ],
              "optional": false
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 716,
          "end": 721,
          "value": "NaN",
          "raw": "\"NaN\""
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 723,
        "end": 855,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 727,
            "end": 853,
            "argument": {
              "type": "NewExpression",
              "start": 733,
              "end": 852,
              "callee": {
                "type": "Identifier",
                "start": 737,
                "end": 749,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 750,
                  "end": 851,
                  "left": {
                    "type": "Literal",
                    "start": 750,
                    "end": 811,
                    "value": "#3: String(parseFloat(new Number(NaN))) === \"NaN\". Actual: ",
                    "raw": "'#3: String(parseFloat(new Number(NaN))) === \"NaN\". Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 814,
                    "end": 851,
                    "expression": {
                      "type": "CallExpression",
                      "start": 815,
                      "end": 850,
                      "callee": {
                        "type": "Identifier",
                        "start": 815,
                        "end": 821,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "start": 822,
                          "end": 849,
                          "callee": {
                            "type": "Identifier",
                            "start": 822,
                            "end": 832,
                            "name": "parseFloat"
                          },
                          "arguments": [
                            {
                              "type": "NewExpression",
                              "start": 833,
                              "end": 848,
                              "callee": {
                                "type": "Identifier",
                                "start": 837,
                                "end": 843,
                                "name": "Number"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "start": 844,
                                  "end": 847,
                                  "name": "NaN"
                                }
                              ]
                            }
                          ],
                          "optional": false
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 867,
      "end": 1065,
      "test": {
        "type": "BinaryExpression",
        "start": 871,
        "end": 926,
        "left": {
          "type": "CallExpression",
          "start": 871,
          "end": 901,
          "callee": {
            "type": "Identifier",
            "start": 871,
            "end": 881,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 882,
              "end": 900,
              "callee": {
                "type": "Identifier",
                "start": 886,
                "end": 892,
                "name": "Number"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 893,
                  "end": 899,
                  "value": 1,
                  "raw": ".01e+2"
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "start": 906,
          "end": 926,
          "callee": {
            "type": "Identifier",
            "start": 906,
            "end": 916,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 917,
              "end": 925,
              "value": ".01e+2",
              "raw": "\".01e+2\""
            }
          ],
          "optional": false
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 928,
        "end": 1065,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 932,
            "end": 1063,
            "argument": {
              "type": "NewExpression",
              "start": 938,
              "end": 1062,
              "callee": {
                "type": "Identifier",
                "start": 942,
                "end": 954,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 955,
                  "end": 1061,
                  "left": {
                    "type": "Literal",
                    "start": 955,
                    "end": 1026,
                    "value": "#4: parseFloat(new Number(.01e+2)) === parseFloat(\".01e+2\"). Actual: ",
                    "raw": "'#4: parseFloat(new Number(.01e+2)) === parseFloat(\".01e+2\"). Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1029,
                    "end": 1061,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1030,
                      "end": 1060,
                      "callee": {
                        "type": "Identifier",
                        "start": 1030,
                        "end": 1040,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 1041,
                          "end": 1059,
                          "callee": {
                            "type": "Identifier",
                            "start": 1045,
                            "end": 1051,
                            "name": "Number"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 1052,
                              "end": 1058,
                              "value": 1,
                              "raw": ".01e+2"
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}