{
  "type": "Program",
  "body": [
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 256,
            "end": 266
          },
          "arguments": [
            {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Number",
                "start": 271,
                "end": 277
              },
              "arguments": [
                {
                  "type": "UnaryExpression",
                  "operator": "-",
                  "argument": {
                    "type": "Literal",
                    "value": 1.1,
                    "raw": "1.1",
                    "start": 279,
                    "end": 282
                  },
                  "prefix": true,
                  "start": 278,
                  "end": 282
                }
              ],
              "start": 267,
              "end": 283
            }
          ],
          "optional": false,
          "start": 256,
          "end": 284
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 289,
            "end": 299
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "-1.1",
              "raw": "\"-1.1\"",
              "start": 300,
              "end": 306
            }
          ],
          "optional": false,
          "start": 289,
          "end": 307
        },
        "start": 256,
        "end": 307
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 323,
                "end": 335
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1: parseFloat(new Number(-1.1)) === parseFloat(\"-1.1\"). Actual: ",
                    "raw": "'#1: parseFloat(new Number(-1.1)) === parseFloat(\"-1.1\"). Actual: '",
                    "start": 336,
                    "end": 403
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat",
                        "start": 407,
                        "end": 417
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "Number",
                            "start": 422,
                            "end": 428
                          },
                          "arguments": [
                            {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Literal",
                                "value": 1.1,
                                "raw": "1.1",
                                "start": 430,
                                "end": 433
                              },
                              "prefix": true,
                              "start": 429,
                              "end": 433
                            }
                          ],
                          "start": 418,
                          "end": 434
                        }
                      ],
                      "optional": false,
                      "start": 407,
                      "end": 435
                    },
                    "start": 406,
                    "end": 436
                  },
                  "start": 336,
                  "end": 436
                }
              ],
              "start": 319,
              "end": 437
            },
            "start": 313,
            "end": 438
          }
        ],
        "start": 309,
        "end": 440
      },
      "alternate": null,
      "start": 252,
      "end": 440
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 456,
            "end": 466
          },
          "arguments": [
            {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Number",
                "start": 471,
                "end": 477
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "Infinity",
                  "start": 478,
                  "end": 486
                }
              ],
              "start": 467,
              "end": 487
            }
          ],
          "optional": false,
          "start": 456,
          "end": 488
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 493,
            "end": 503
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "Infinity",
              "raw": "\"Infinity\"",
              "start": 504,
              "end": 514
            }
          ],
          "optional": false,
          "start": 493,
          "end": 515
        },
        "start": 456,
        "end": 515
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 531,
                "end": 543
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#2: parseFloat(new Number(Infinity)) === parseFloat(\"Infinity\"). Actual: ",
                    "raw": "'#2: parseFloat(new Number(Infinity)) === parseFloat(\"Infinity\"). Actual: '",
                    "start": 544,
                    "end": 619
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat",
                        "start": 623,
                        "end": 633
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "Number",
                            "start": 638,
                            "end": 644
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "Infinity",
                              "start": 645,
                              "end": 653
                            }
                          ],
                          "start": 634,
                          "end": 654
                        }
                      ],
                      "optional": false,
                      "start": 623,
                      "end": 655
                    },
                    "start": 622,
                    "end": 656
                  },
                  "start": 544,
                  "end": 656
                }
              ],
              "start": 527,
              "end": 657
            },
            "start": 521,
            "end": 658
          }
        ],
        "start": 517,
        "end": 660
      },
      "alternate": null,
      "start": 452,
      "end": 660
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "String",
            "start": 676,
            "end": 682
          },
          "arguments": [
            {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "parseFloat",
                "start": 683,
                "end": 693
              },
              "arguments": [
                {
                  "type": "NewExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "Number",
                    "start": 698,
                    "end": 704
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "NaN",
                      "start": 705,
                      "end": 708
                    }
                  ],
                  "start": 694,
                  "end": 709
                }
              ],
              "optional": false,
              "start": 683,
              "end": 710
            }
          ],
          "optional": false,
          "start": 676,
          "end": 711
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": "NaN",
          "raw": "\"NaN\"",
          "start": 716,
          "end": 721
        },
        "start": 676,
        "end": 721
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 737,
                "end": 749
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#3: String(parseFloat(new Number(NaN))) === \"NaN\". Actual: ",
                    "raw": "'#3: String(parseFloat(new Number(NaN))) === \"NaN\". Actual: '",
                    "start": 750,
                    "end": 811
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "String",
                        "start": 815,
                        "end": 821
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "parseFloat",
                            "start": 822,
                            "end": 832
                          },
                          "arguments": [
                            {
                              "type": "NewExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "Number",
                                "start": 837,
                                "end": 843
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "NaN",
                                  "start": 844,
                                  "end": 847
                                }
                              ],
                              "start": 833,
                              "end": 848
                            }
                          ],
                          "optional": false,
                          "start": 822,
                          "end": 849
                        }
                      ],
                      "optional": false,
                      "start": 815,
                      "end": 850
                    },
                    "start": 814,
                    "end": 851
                  },
                  "start": 750,
                  "end": 851
                }
              ],
              "start": 733,
              "end": 852
            },
            "start": 727,
            "end": 853
          }
        ],
        "start": 723,
        "end": 855
      },
      "alternate": null,
      "start": 672,
      "end": 855
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 871,
            "end": 881
          },
          "arguments": [
            {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Number",
                "start": 886,
                "end": 892
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": 1,
                  "raw": ".01e+2",
                  "start": 893,
                  "end": 899
                }
              ],
              "start": 882,
              "end": 900
            }
          ],
          "optional": false,
          "start": 871,
          "end": 901
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 906,
            "end": 916
          },
          "arguments": [
            {
              "type": "Literal",
              "value": ".01e+2",
              "raw": "\".01e+2\"",
              "start": 917,
              "end": 925
            }
          ],
          "optional": false,
          "start": 906,
          "end": 926
        },
        "start": 871,
        "end": 926
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 942,
                "end": 954
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#4: parseFloat(new Number(.01e+2)) === parseFloat(\".01e+2\"). Actual: ",
                    "raw": "'#4: parseFloat(new Number(.01e+2)) === parseFloat(\".01e+2\"). Actual: '",
                    "start": 955,
                    "end": 1026
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat",
                        "start": 1030,
                        "end": 1040
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "Number",
                            "start": 1045,
                            "end": 1051
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": 1,
                              "raw": ".01e+2",
                              "start": 1052,
                              "end": 1058
                            }
                          ],
                          "start": 1041,
                          "end": 1059
                        }
                      ],
                      "optional": false,
                      "start": 1030,
                      "end": 1060
                    },
                    "start": 1029,
                    "end": 1061
                  },
                  "start": 955,
                  "end": 1061
                }
              ],
              "start": 938,
              "end": 1062
            },
            "start": 932,
            "end": 1063
          }
        ],
        "start": 928,
        "end": 1065
      },
      "alternate": null,
      "start": 867,
      "end": 1065
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1066
}