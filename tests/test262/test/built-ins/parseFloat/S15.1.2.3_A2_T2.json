{
  "type": "Program",
  "body": [
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 284,
            "end": 294
          },
          "arguments": [
            {
              "type": "Literal",
              "value": " 1.1",
              "raw": "\"\\u00201.1\"",
              "start": 295,
              "end": 306
            }
          ],
          "optional": false,
          "start": 284,
          "end": 307
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 312,
            "end": 322
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "1.1",
              "raw": "\"1.1\"",
              "start": 323,
              "end": 328
            }
          ],
          "optional": false,
          "start": 312,
          "end": 329
        },
        "start": 284,
        "end": 329
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 345,
                "end": 357
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1: parseFloat(\"\\u00201.1\") === parseFloat(\"1.1\"). Actual: ",
                    "raw": "'#1: parseFloat(\"\\\\u00201.1\") === parseFloat(\"1.1\"). Actual: '",
                    "start": 358,
                    "end": 420
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat",
                        "start": 424,
                        "end": 434
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": " 1.1",
                          "raw": "\"\\u00201.1\"",
                          "start": 435,
                          "end": 446
                        }
                      ],
                      "optional": false,
                      "start": 424,
                      "end": 447
                    },
                    "start": 423,
                    "end": 448
                  },
                  "start": 358,
                  "end": 448
                }
              ],
              "start": 341,
              "end": 449
            },
            "start": 335,
            "end": 450
          }
        ],
        "start": 331,
        "end": 452
      },
      "alternate": null,
      "start": 280,
      "end": 452
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 468,
            "end": 478
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "  -1.1",
              "raw": "\"\\u0020\\u0020-1.1\"",
              "start": 479,
              "end": 497
            }
          ],
          "optional": false,
          "start": 468,
          "end": 498
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 503,
            "end": 513
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "-1.1",
              "raw": "\"-1.1\"",
              "start": 514,
              "end": 520
            }
          ],
          "optional": false,
          "start": 503,
          "end": 521
        },
        "start": 468,
        "end": 521
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 537,
                "end": 549
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#2: parseFloat(\"\\u0020\\u0020-1.1\") === parseFloat(\"-1.1\"). Actual: ",
                    "raw": "'#2: parseFloat(\"\\\\u0020\\\\u0020-1.1\") === parseFloat(\"-1.1\"). Actual: '",
                    "start": 550,
                    "end": 621
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat",
                        "start": 625,
                        "end": 635
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "  -1.1",
                          "raw": "\"\\u0020\\u0020-1.1\"",
                          "start": 636,
                          "end": 654
                        }
                      ],
                      "optional": false,
                      "start": 625,
                      "end": 655
                    },
                    "start": 624,
                    "end": 656
                  },
                  "start": 550,
                  "end": 656
                }
              ],
              "start": 533,
              "end": 657
            },
            "start": 527,
            "end": 658
          }
        ],
        "start": 523,
        "end": 660
      },
      "alternate": null,
      "start": 464,
      "end": 660
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 676,
            "end": 686
          },
          "arguments": [
            {
              "type": "Literal",
              "value": " 1.1",
              "raw": "\" 1.1\"",
              "start": 687,
              "end": 693
            }
          ],
          "optional": false,
          "start": 676,
          "end": 694
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 699,
            "end": 709
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "1.1",
              "raw": "\"1.1\"",
              "start": 710,
              "end": 715
            }
          ],
          "optional": false,
          "start": 699,
          "end": 716
        },
        "start": 676,
        "end": 716
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 732,
                "end": 744
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#3: parseFloat(\" 1.1\") === parseFloat(\"1.1\"). Actual: ",
                    "raw": "'#3: parseFloat(\" 1.1\") === parseFloat(\"1.1\"). Actual: '",
                    "start": 745,
                    "end": 801
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat",
                        "start": 805,
                        "end": 815
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": " 1.1",
                          "raw": "\" 1.1\"",
                          "start": 816,
                          "end": 822
                        }
                      ],
                      "optional": false,
                      "start": 805,
                      "end": 823
                    },
                    "start": 804,
                    "end": 824
                  },
                  "start": 745,
                  "end": 824
                }
              ],
              "start": 728,
              "end": 825
            },
            "start": 722,
            "end": 826
          }
        ],
        "start": 718,
        "end": 828
      },
      "alternate": null,
      "start": 672,
      "end": 828
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 844,
            "end": 854
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "       1.1",
              "raw": "\"       1.1\"",
              "start": 855,
              "end": 867
            }
          ],
          "optional": false,
          "start": 844,
          "end": 868
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 873,
            "end": 883
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "1.1",
              "raw": "\"1.1\"",
              "start": 884,
              "end": 889
            }
          ],
          "optional": false,
          "start": 873,
          "end": 890
        },
        "start": 844,
        "end": 890
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 906,
                "end": 918
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#4: parseFloat(\"       1.1\") === parseFloat(\"1.1\"). Actual: ",
                    "raw": "'#4: parseFloat(\"       1.1\") === parseFloat(\"1.1\"). Actual: '",
                    "start": 919,
                    "end": 981
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat",
                        "start": 985,
                        "end": 995
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "       1.1",
                          "raw": "\"       1.1\"",
                          "start": 996,
                          "end": 1008
                        }
                      ],
                      "optional": false,
                      "start": 985,
                      "end": 1009
                    },
                    "start": 984,
                    "end": 1010
                  },
                  "start": 919,
                  "end": 1010
                }
              ],
              "start": 902,
              "end": 1011
            },
            "start": 896,
            "end": 1012
          }
        ],
        "start": 892,
        "end": 1014
      },
      "alternate": null,
      "start": 840,
      "end": 1014
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 1030,
            "end": 1040
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "                -1.1",
              "raw": "\"       \\u0020       \\u0020-1.1\"",
              "start": 1041,
              "end": 1073
            }
          ],
          "optional": false,
          "start": 1030,
          "end": 1074
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "parseFloat",
            "start": 1079,
            "end": 1089
          },
          "arguments": [
            {
              "type": "Literal",
              "value": "-1.1",
              "raw": "\"-1.1\"",
              "start": 1090,
              "end": 1096
            }
          ],
          "optional": false,
          "start": 1079,
          "end": 1097
        },
        "start": 1030,
        "end": 1097
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1113,
                "end": 1125
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#5: parseFloat(\"       \\u0020       \\u0020-1.1\") === parseFloat(\"-1.1\"). Actual: ",
                    "raw": "'#5: parseFloat(\"       \\\\u0020       \\\\u0020-1.1\") === parseFloat(\"-1.1\"). Actual: '",
                    "start": 1126,
                    "end": 1211
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat",
                        "start": 1215,
                        "end": 1225
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "                -1.1",
                          "raw": "\"       \\u0020       \\u0020-1.1\"",
                          "start": 1226,
                          "end": 1258
                        }
                      ],
                      "optional": false,
                      "start": 1215,
                      "end": 1259
                    },
                    "start": 1214,
                    "end": 1260
                  },
                  "start": 1126,
                  "end": 1260
                }
              ],
              "start": 1109,
              "end": 1261
            },
            "start": 1103,
            "end": 1262
          }
        ],
        "start": 1099,
        "end": 1264
      },
      "alternate": null,
      "start": 1026,
      "end": 1264
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1276,
            "end": 1282
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1283,
            "end": 1292
          },
          "optional": false,
          "computed": false,
          "start": 1276,
          "end": 1292
        },
        "arguments": [
          {
            "type": "CallExpression",
            "callee": {
              "type": "Identifier",
              "name": "parseFloat",
              "start": 1293,
              "end": 1303
            },
            "arguments": [
              {
                "type": "Literal",
                "value": " ",
                "raw": "\"\\u0020\"",
                "start": 1304,
                "end": 1312
              }
            ],
            "optional": false,
            "start": 1293,
            "end": 1313
          },
          {
            "type": "Identifier",
            "name": "NaN",
            "start": 1315,
            "end": 1318
          }
        ],
        "optional": false,
        "start": 1276,
        "end": 1319
      },
      "start": 1276,
      "end": 1320
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1321
}