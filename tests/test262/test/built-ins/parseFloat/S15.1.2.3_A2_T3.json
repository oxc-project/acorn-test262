{
  "type": "Program",
  "start": 0,
  "end": 719,
  "body": [
    {
      "type": "IfStatement",
      "start": 282,
      "end": 454,
      "test": {
        "type": "BinaryExpression",
        "start": 286,
        "end": 331,
        "left": {
          "type": "CallExpression",
          "start": 286,
          "end": 309,
          "callee": {
            "type": "Identifier",
            "start": 286,
            "end": 296,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 297,
              "end": 308,
              "value": " 1.1",
              "raw": "\"\\u00A01.1\""
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "start": 314,
          "end": 331,
          "callee": {
            "type": "Identifier",
            "start": 314,
            "end": 324,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 325,
              "end": 330,
              "value": "1.1",
              "raw": "\"1.1\""
            }
          ],
          "optional": false
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 333,
        "end": 454,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 337,
            "end": 452,
            "argument": {
              "type": "NewExpression",
              "start": 343,
              "end": 451,
              "callee": {
                "type": "Identifier",
                "start": 347,
                "end": 359,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 360,
                  "end": 450,
                  "left": {
                    "type": "Literal",
                    "start": 360,
                    "end": 422,
                    "value": "#1: parseFloat(\"\\u00A01.1\") === parseFloat(\"1.1\"). Actual: ",
                    "raw": "'#1: parseFloat(\"\\\\u00A01.1\") === parseFloat(\"1.1\"). Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 425,
                    "end": 450,
                    "expression": {
                      "type": "CallExpression",
                      "start": 426,
                      "end": 449,
                      "callee": {
                        "type": "Identifier",
                        "start": 426,
                        "end": 436,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 437,
                          "end": 448,
                          "value": " 1.1",
                          "raw": "\"\\u00A01.1\""
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 466,
      "end": 662,
      "test": {
        "type": "BinaryExpression",
        "start": 470,
        "end": 523,
        "left": {
          "type": "CallExpression",
          "start": 470,
          "end": 500,
          "callee": {
            "type": "Identifier",
            "start": 470,
            "end": 480,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 481,
              "end": 499,
              "value": "  -1.1",
              "raw": "\"\\u00A0\\u00A0-1.1\""
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "start": 505,
          "end": 523,
          "callee": {
            "type": "Identifier",
            "start": 505,
            "end": 515,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 516,
              "end": 522,
              "value": "-1.1",
              "raw": "\"-1.1\""
            }
          ],
          "optional": false
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 525,
        "end": 662,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 529,
            "end": 660,
            "argument": {
              "type": "NewExpression",
              "start": 535,
              "end": 659,
              "callee": {
                "type": "Identifier",
                "start": 539,
                "end": 551,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 552,
                  "end": 658,
                  "left": {
                    "type": "Literal",
                    "start": 552,
                    "end": 623,
                    "value": "#2: parseFloat(\"\\u00A0\\u00A0-1.1\") === parseFloat(\"-1.1\"). Actual: ",
                    "raw": "'#2: parseFloat(\"\\\\u00A0\\\\u00A0-1.1\") === parseFloat(\"-1.1\"). Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 626,
                    "end": 658,
                    "expression": {
                      "type": "CallExpression",
                      "start": 627,
                      "end": 657,
                      "callee": {
                        "type": "Identifier",
                        "start": 627,
                        "end": 637,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 638,
                          "end": 656,
                          "value": "  -1.1",
                          "raw": "\"\\u00A0\\u00A0-1.1\""
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 674,
      "end": 718,
      "expression": {
        "type": "CallExpression",
        "start": 674,
        "end": 717,
        "callee": {
          "type": "MemberExpression",
          "start": 674,
          "end": 690,
          "object": {
            "type": "Identifier",
            "start": 674,
            "end": 680,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 681,
            "end": 690,
            "name": "sameValue"
          },
          "optional": false,
          "computed": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 691,
            "end": 711,
            "callee": {
              "type": "Identifier",
              "start": 691,
              "end": 701,
              "name": "parseFloat"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 702,
                "end": 710,
                "value": " ",
                "raw": "\"\\u00A0\""
              }
            ],
            "optional": false
          },
          {
            "type": "Identifier",
            "start": 713,
            "end": 716,
            "name": "NaN"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}