{
  "type": "Program",
  "start": 0,
  "end": 1215,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 562,
      "end": 580,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 566,
          "end": 579,
          "id": {
            "type": "Identifier",
            "start": 566,
            "end": 572,
            "name": "result"
          },
          "init": {
            "type": "Literal",
            "start": 575,
            "end": 579,
            "value": true,
            "raw": "true"
          }
        }
      ]
    },
    {
      "type": "VariableDeclaration",
      "start": 581,
      "end": 665,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 585,
          "end": 664,
          "id": {
            "type": "Identifier",
            "start": 585,
            "end": 593,
            "name": "interval"
          },
          "init": {
            "type": "ArrayExpression",
            "start": 596,
            "end": 664,
            "elements": [
              {
                "type": "ArrayExpression",
                "start": 600,
                "end": 612,
                "elements": [
                  {
                    "type": "Literal",
                    "start": 601,
                    "end": 605,
                    "value": 0,
                    "raw": "0x00"
                  },
                  {
                    "type": "Literal",
                    "start": 607,
                    "end": 611,
                    "value": 47,
                    "raw": "0x2F"
                  }
                ]
              },
              {
                "type": "ArrayExpression",
                "start": 616,
                "end": 628,
                "elements": [
                  {
                    "type": "Literal",
                    "start": 617,
                    "end": 621,
                    "value": 58,
                    "raw": "0x3A"
                  },
                  {
                    "type": "Literal",
                    "start": 623,
                    "end": 627,
                    "value": 64,
                    "raw": "0x40"
                  }
                ]
              },
              {
                "type": "ArrayExpression",
                "start": 632,
                "end": 644,
                "elements": [
                  {
                    "type": "Literal",
                    "start": 633,
                    "end": 637,
                    "value": 71,
                    "raw": "0x47"
                  },
                  {
                    "type": "Literal",
                    "start": 639,
                    "end": 643,
                    "value": 96,
                    "raw": "0x60"
                  }
                ]
              },
              {
                "type": "ArrayExpression",
                "start": 648,
                "end": 662,
                "elements": [
                  {
                    "type": "Literal",
                    "start": 649,
                    "end": 653,
                    "value": 103,
                    "raw": "0x67"
                  },
                  {
                    "type": "Literal",
                    "start": 655,
                    "end": 661,
                    "value": 65535,
                    "raw": "0xFFFF"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "type": "ForStatement",
      "start": 666,
      "end": 1027,
      "init": {
        "type": "VariableDeclaration",
        "start": 671,
        "end": 685,
        "kind": "var",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 675,
            "end": 685,
            "id": {
              "type": "Identifier",
              "start": 675,
              "end": 681,
              "name": "indexI"
            },
            "init": {
              "type": "Literal",
              "start": 684,
              "end": 685,
              "value": 0,
              "raw": "0"
            }
          }
        ]
      },
      "test": {
        "type": "BinaryExpression",
        "start": 687,
        "end": 711,
        "left": {
          "type": "Identifier",
          "start": 687,
          "end": 693,
          "name": "indexI"
        },
        "operator": "<",
        "right": {
          "type": "MemberExpression",
          "start": 696,
          "end": 711,
          "object": {
            "type": "Identifier",
            "start": 696,
            "end": 704,
            "name": "interval"
          },
          "property": {
            "type": "Identifier",
            "start": 705,
            "end": 711,
            "name": "length"
          },
          "optional": false,
          "computed": false
        }
      },
      "update": {
        "type": "UpdateExpression",
        "start": 713,
        "end": 721,
        "operator": "++",
        "prefix": false,
        "argument": {
          "type": "Identifier",
          "start": 713,
          "end": 719,
          "name": "indexI"
        }
      },
      "body": {
        "type": "BlockStatement",
        "start": 723,
        "end": 1027,
        "body": [
          {
            "type": "ForStatement",
            "start": 727,
            "end": 1025,
            "init": {
              "type": "VariableDeclaration",
              "start": 732,
              "end": 764,
              "kind": "var",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 736,
                  "end": 764,
                  "id": {
                    "type": "Identifier",
                    "start": 736,
                    "end": 742,
                    "name": "indexJ"
                  },
                  "init": {
                    "type": "MemberExpression",
                    "start": 745,
                    "end": 764,
                    "object": {
                      "type": "MemberExpression",
                      "start": 745,
                      "end": 761,
                      "object": {
                        "type": "Identifier",
                        "start": 745,
                        "end": 753,
                        "name": "interval"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 754,
                        "end": 760,
                        "name": "indexI"
                      },
                      "optional": false,
                      "computed": true
                    },
                    "property": {
                      "type": "Literal",
                      "start": 762,
                      "end": 763,
                      "value": 0,
                      "raw": "0"
                    },
                    "optional": false,
                    "computed": true
                  }
                }
              ]
            },
            "test": {
              "type": "BinaryExpression",
              "start": 766,
              "end": 795,
              "left": {
                "type": "Identifier",
                "start": 766,
                "end": 772,
                "name": "indexJ"
              },
              "operator": "<=",
              "right": {
                "type": "MemberExpression",
                "start": 776,
                "end": 795,
                "object": {
                  "type": "MemberExpression",
                  "start": 776,
                  "end": 792,
                  "object": {
                    "type": "Identifier",
                    "start": 776,
                    "end": 784,
                    "name": "interval"
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 785,
                    "end": 791,
                    "name": "indexI"
                  },
                  "optional": false,
                  "computed": true
                },
                "property": {
                  "type": "Literal",
                  "start": 793,
                  "end": 794,
                  "value": 1,
                  "raw": "1"
                },
                "optional": false,
                "computed": true
              }
            },
            "update": {
              "type": "UpdateExpression",
              "start": 797,
              "end": 805,
              "operator": "++",
              "prefix": false,
              "argument": {
                "type": "Identifier",
                "start": 797,
                "end": 803,
                "name": "indexJ"
              }
            },
            "body": {
              "type": "BlockStatement",
              "start": 807,
              "end": 1025,
              "body": [
                {
                  "type": "TryStatement",
                  "start": 813,
                  "end": 1021,
                  "block": {
                    "type": "BlockStatement",
                    "start": 817,
                    "end": 925,
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "start": 825,
                        "end": 897,
                        "expression": {
                          "type": "CallExpression",
                          "start": 825,
                          "end": 896,
                          "callee": {
                            "type": "Identifier",
                            "start": 825,
                            "end": 834,
                            "name": "decodeURI"
                          },
                          "arguments": [
                            {
                              "type": "BinaryExpression",
                              "start": 835,
                              "end": 895,
                              "left": {
                                "type": "BinaryExpression",
                                "start": 835,
                                "end": 887,
                                "left": {
                                  "type": "BinaryExpression",
                                  "start": 835,
                                  "end": 849,
                                  "left": {
                                    "type": "Literal",
                                    "start": 835,
                                    "end": 840,
                                    "value": "%F0",
                                    "raw": "\"%F0\""
                                  },
                                  "operator": "+",
                                  "right": {
                                    "type": "Literal",
                                    "start": 843,
                                    "end": 849,
                                    "value": "%A0%",
                                    "raw": "\"%A0%\""
                                  }
                                },
                                "operator": "+",
                                "right": {
                                  "type": "CallExpression",
                                  "start": 852,
                                  "end": 887,
                                  "callee": {
                                    "type": "MemberExpression",
                                    "start": 852,
                                    "end": 871,
                                    "object": {
                                      "type": "Identifier",
                                      "start": 852,
                                      "end": 858,
                                      "name": "String"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "start": 859,
                                      "end": 871,
                                      "name": "fromCharCode"
                                    },
                                    "optional": false,
                                    "computed": false
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "start": 872,
                                      "end": 878,
                                      "name": "indexJ"
                                    },
                                    {
                                      "type": "Identifier",
                                      "start": 880,
                                      "end": 886,
                                      "name": "indexJ"
                                    }
                                  ],
                                  "optional": false
                                }
                              },
                              "operator": "+",
                              "right": {
                                "type": "Literal",
                                "start": 890,
                                "end": 895,
                                "value": "%A0",
                                "raw": "\"%A0\""
                              }
                            }
                          ],
                          "optional": false
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "start": 904,
                        "end": 919,
                        "expression": {
                          "type": "AssignmentExpression",
                          "start": 904,
                          "end": 918,
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "start": 904,
                            "end": 910,
                            "name": "result"
                          },
                          "right": {
                            "type": "Literal",
                            "start": 913,
                            "end": 918,
                            "value": false,
                            "raw": "false"
                          }
                        }
                      }
                    ]
                  },
                  "handler": {
                    "type": "CatchClause",
                    "start": 926,
                    "end": 1021,
                    "param": {
                      "type": "Identifier",
                      "start": 933,
                      "end": 934,
                      "name": "e"
                    },
                    "body": {
                      "type": "BlockStatement",
                      "start": 936,
                      "end": 1021,
                      "body": [
                        {
                          "type": "IfStatement",
                          "start": 944,
                          "end": 1015,
                          "test": {
                            "type": "BinaryExpression",
                            "start": 948,
                            "end": 980,
                            "left": {
                              "type": "ParenthesizedExpression",
                              "start": 948,
                              "end": 971,
                              "expression": {
                                "type": "BinaryExpression",
                                "start": 949,
                                "end": 970,
                                "left": {
                                  "type": "Identifier",
                                  "start": 949,
                                  "end": 950,
                                  "name": "e"
                                },
                                "operator": "instanceof",
                                "right": {
                                  "type": "Identifier",
                                  "start": 962,
                                  "end": 970,
                                  "name": "URIError"
                                }
                              }
                            },
                            "operator": "!==",
                            "right": {
                              "type": "Literal",
                              "start": 976,
                              "end": 980,
                              "value": true,
                              "raw": "true"
                            }
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "start": 982,
                            "end": 1015,
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "start": 992,
                                "end": 1007,
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "start": 992,
                                  "end": 1006,
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "start": 992,
                                    "end": 998,
                                    "name": "result"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "start": 1001,
                                    "end": 1006,
                                    "value": false,
                                    "raw": "false"
                                  }
                                }
                              }
                            ]
                          },
                          "alternate": null
                        }
                      ]
                    }
                  },
                  "finalizer": null
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "IfStatement",
      "start": 1029,
      "end": 1214,
      "test": {
        "type": "BinaryExpression",
        "start": 1033,
        "end": 1048,
        "left": {
          "type": "Identifier",
          "start": 1033,
          "end": 1039,
          "name": "result"
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1044,
          "end": 1048,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1050,
        "end": 1214,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1054,
            "end": 1212,
            "argument": {
              "type": "NewExpression",
              "start": 1060,
              "end": 1211,
              "callee": {
                "type": "Identifier",
                "start": 1064,
                "end": 1076,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 1077,
                  "end": 1210,
                  "value": "#1: If B = 11110xxx (n = 4) and (string.charAt(k + 7) and string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError",
                  "raw": "'#1: If B = 11110xxx (n = 4) and (string.charAt(k + 7) and string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError'"
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}