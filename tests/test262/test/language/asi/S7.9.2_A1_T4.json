{
  "type": "Program",
  "start": 0,
  "end": 551,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 391,
      "end": 403,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 395,
          "end": 398,
          "id": {
            "type": "Identifier",
            "start": 395,
            "end": 396,
            "name": "a"
          },
          "init": {
            "type": "Literal",
            "start": 397,
            "end": 398,
            "value": 1,
            "raw": "1"
          }
        },
        {
          "type": "VariableDeclarator",
          "start": 399,
          "end": 402,
          "id": {
            "type": "Identifier",
            "start": 399,
            "end": 400,
            "name": "b"
          },
          "init": {
            "type": "Literal",
            "start": 401,
            "end": 402,
            "value": 2,
            "raw": "2"
          }
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "start": 404,
      "end": 435,
      "id": {
        "type": "Identifier",
        "start": 413,
        "end": 417,
        "name": "test"
      },
      "generator": false,
      "async": false,
      "params": [],
      "body": {
        "type": "BlockStatement",
        "start": 419,
        "end": 435,
        "body": [
          {
            "type": "ReturnStatement",
            "start": 422,
            "end": 428,
            "argument": null
          },
          {
            "type": "ExpressionStatement",
            "start": 430,
            "end": 433,
            "expression": {
              "type": "BinaryExpression",
              "start": 430,
              "end": 433,
              "left": {
                "type": "Identifier",
                "start": 430,
                "end": 431,
                "name": "a"
              },
              "operator": "+",
              "right": {
                "type": "Identifier",
                "start": 432,
                "end": 433,
                "name": "b"
              }
            }
          }
        ]
      },
      "expression": false
    },
    {
      "type": "VariableDeclaration",
      "start": 436,
      "end": 449,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 440,
          "end": 448,
          "id": {
            "type": "Identifier",
            "start": 440,
            "end": 441,
            "name": "x"
          },
          "init": {
            "type": "CallExpression",
            "start": 442,
            "end": 448,
            "callee": {
              "type": "Identifier",
              "start": 442,
              "end": 446,
              "name": "test"
            },
            "arguments": [],
            "optional": false
          }
        }
      ]
    },
    {
      "type": "IfStatement",
      "start": 450,
      "end": 550,
      "test": {
        "type": "BinaryExpression",
        "start": 454,
        "end": 467,
        "left": {
          "type": "Identifier",
          "start": 454,
          "end": 455,
          "name": "x"
        },
        "operator": "!==",
        "right": {
          "type": "Identifier",
          "start": 458,
          "end": 467,
          "name": "undefined"
        }
      },
      "consequent": {
        "type": "ThrowStatement",
        "start": 469,
        "end": 550,
        "argument": {
          "type": "NewExpression",
          "start": 475,
          "end": 549,
          "callee": {
            "type": "Identifier",
            "start": 479,
            "end": 491,
            "name": "Test262Error"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 492,
              "end": 548,
              "value": "#1: Automatic semicolon insertion not work with return",
              "raw": "'#1: Automatic semicolon insertion not work with return'"
            }
          ]
        }
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}