{
  "type": "Program",
  "start": 0,
  "end": 914,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 377,
      "end": 383,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 381,
          "end": 382,
          "id": {
            "type": "Identifier",
            "start": 381,
            "end": 382,
            "name": "x"
          },
          "init": null
        }
      ]
    },
    {
      "type": "IfStatement",
      "start": 473,
      "end": 569,
      "test": {
        "type": "BinaryExpression",
        "start": 477,
        "end": 492,
        "left": {
          "type": "Identifier",
          "start": 477,
          "end": 478,
          "name": "x"
        },
        "operator": "!==",
        "right": {
          "type": "Identifier",
          "start": 483,
          "end": 492,
          "name": "undefined"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 494,
        "end": 569,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 498,
            "end": 567,
            "argument": {
              "type": "NewExpression",
              "start": 504,
              "end": 566,
              "callee": {
                "type": "Identifier",
                "start": 508,
                "end": 520,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 521,
                  "end": 565,
                  "left": {
                    "type": "Literal",
                    "start": 521,
                    "end": 559,
                    "value": "#1: var x; x === undefined. Actual: ",
                    "raw": "'#1: var x; x === undefined. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 562,
                    "end": 565,
                    "expression": {
                      "type": "Identifier",
                      "start": 563,
                      "end": 564,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 652,
      "end": 656,
      "expression": {
        "type": "UpdateExpression",
        "start": 652,
        "end": 655,
        "operator": "++",
        "prefix": false,
        "argument": {
          "type": "Identifier",
          "start": 652,
          "end": 653,
          "name": "x"
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 746,
      "end": 831,
      "test": {
        "type": "BinaryExpression",
        "start": 750,
        "end": 765,
        "left": {
          "type": "Identifier",
          "start": 750,
          "end": 751,
          "name": "x"
        },
        "operator": "===",
        "right": {
          "type": "Identifier",
          "start": 756,
          "end": 765,
          "name": "undefined"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 767,
        "end": 831,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 771,
            "end": 829,
            "argument": {
              "type": "NewExpression",
              "start": 777,
              "end": 828,
              "callee": {
                "type": "Identifier",
                "start": 781,
                "end": 793,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 794,
                  "end": 827,
                  "value": "#2: var x; x++; x !== undefined",
                  "raw": "'#2: var x; x++; x !== undefined'"
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}