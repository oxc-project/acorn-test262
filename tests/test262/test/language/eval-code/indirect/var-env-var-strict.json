{
  "type": "Program",
  "start": 0,
  "end": 441,
  "body": [
    {
      "type": "IfStatement",
      "start": 262,
      "end": 440,
      "test": {
        "type": "UnaryExpression",
        "start": 266,
        "end": 282,
        "operator": "!",
        "prefix": true,
        "argument": {
          "type": "ParenthesizedExpression",
          "start": 267,
          "end": 282,
          "expression": {
            "type": "BinaryExpression",
            "start": 268,
            "end": 281,
            "left": {
              "type": "Literal",
              "start": 268,
              "end": 273,
              "value": "foo",
              "raw": "'foo'"
            },
            "operator": "in",
            "right": {
              "type": "ThisExpression",
              "start": 277,
              "end": 281
            }
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 284,
        "end": 440,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 288,
            "end": 328,
            "expression": {
              "type": "CallExpression",
              "start": 288,
              "end": 327,
              "callee": {
                "type": "ParenthesizedExpression",
                "start": 288,
                "end": 296,
                "expression": {
                  "type": "SequenceExpression",
                  "start": 289,
                  "end": 295,
                  "expressions": [
                    {
                      "type": "Literal",
                      "start": 289,
                      "end": 290,
                      "value": 1,
                      "raw": "1"
                    },
                    {
                      "type": "Identifier",
                      "start": 291,
                      "end": 295,
                      "name": "eval"
                    }
                  ]
                }
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 297,
                  "end": 326,
                  "value": "\"use strict\"; var foo = 88;",
                  "raw": "'\"use strict\"; var foo = 88;'"
                }
              ],
              "optional": false
            }
          },
          {
            "type": "IfStatement",
            "start": 331,
            "end": 438,
            "test": {
              "type": "BinaryExpression",
              "start": 335,
              "end": 348,
              "left": {
                "type": "Literal",
                "start": 335,
                "end": 340,
                "value": "foo",
                "raw": "'foo'"
              },
              "operator": "in",
              "right": {
                "type": "ThisExpression",
                "start": 344,
                "end": 348
              }
            },
            "consequent": {
              "type": "BlockStatement",
              "start": 350,
              "end": 438,
              "body": [
                {
                  "type": "ThrowStatement",
                  "start": 356,
                  "end": 434,
                  "argument": {
                    "type": "NewExpression",
                    "start": 362,
                    "end": 433,
                    "callee": {
                      "type": "Identifier",
                      "start": 366,
                      "end": 378,
                      "name": "Test262Error"
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "start": 379,
                        "end": 432,
                        "value": "Strict indirect eval leaked a top level declaration",
                        "raw": "\"Strict indirect eval leaked a top level declaration\""
                      }
                    ]
                  }
                }
              ]
            },
            "alternate": null
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}