{
  "type": "Program",
  "start": 0,
  "end": 809,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 619,
      "end": 630,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 623,
          "end": 629,
          "id": {
            "type": "Identifier",
            "start": 623,
            "end": 629,
            "name": "caught"
          },
          "init": null
        }
      ]
    },
    {
      "type": "VariableDeclaration",
      "start": 631,
      "end": 665,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 635,
          "end": 664,
          "id": {
            "type": "Identifier",
            "start": 635,
            "end": 636,
            "name": "f"
          },
          "init": {
            "type": "ArrowFunctionExpression",
            "start": 639,
            "end": 664,
            "expression": true,
            "async": false,
            "params": [],
            "body": {
              "type": "CallExpression",
              "start": 645,
              "end": 664,
              "callee": {
                "type": "Identifier",
                "start": 645,
                "end": 649,
                "name": "eval"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 650,
                  "end": 663,
                  "value": "new.target;",
                  "raw": "'new.target;'"
                }
              ],
              "optional": false
            },
            "id": null,
            "generator": false
          }
        }
      ]
    },
    {
      "type": "TryStatement",
      "start": 667,
      "end": 713,
      "block": {
        "type": "BlockStatement",
        "start": 671,
        "end": 681,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 675,
            "end": 679,
            "expression": {
              "type": "CallExpression",
              "start": 675,
              "end": 678,
              "callee": {
                "type": "Identifier",
                "start": 675,
                "end": 676,
                "name": "f"
              },
              "arguments": [],
              "optional": false
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 682,
        "end": 713,
        "param": {
          "type": "Identifier",
          "start": 689,
          "end": 692,
          "name": "err"
        },
        "body": {
          "type": "BlockStatement",
          "start": 694,
          "end": 713,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 698,
              "end": 711,
              "expression": {
                "type": "AssignmentExpression",
                "start": 698,
                "end": 710,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 698,
                  "end": 704,
                  "name": "caught"
                },
                "right": {
                  "type": "Identifier",
                  "start": 707,
                  "end": 710,
                  "name": "err"
                }
              }
            }
          ]
        }
      },
      "finalizer": null
    },
    {
      "type": "ExpressionStatement",
      "start": 715,
      "end": 757,
      "expression": {
        "type": "CallExpression",
        "start": 715,
        "end": 756,
        "callee": {
          "type": "MemberExpression",
          "start": 715,
          "end": 731,
          "object": {
            "type": "Identifier",
            "start": 715,
            "end": 721,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 722,
            "end": 731,
            "name": "sameValue"
          },
          "optional": false,
          "computed": false
        },
        "arguments": [
          {
            "type": "UnaryExpression",
            "start": 732,
            "end": 745,
            "operator": "typeof",
            "argument": {
              "type": "Identifier",
              "start": 739,
              "end": 745,
              "name": "caught"
            },
            "prefix": true
          },
          {
            "type": "Literal",
            "start": 747,
            "end": 755,
            "value": "object",
            "raw": "'object'"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 758,
      "end": 808,
      "expression": {
        "type": "CallExpression",
        "start": 758,
        "end": 807,
        "callee": {
          "type": "MemberExpression",
          "start": 758,
          "end": 774,
          "object": {
            "type": "Identifier",
            "start": 758,
            "end": 764,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 765,
            "end": 774,
            "name": "sameValue"
          },
          "optional": false,
          "computed": false
        },
        "arguments": [
          {
            "type": "MemberExpression",
            "start": 775,
            "end": 793,
            "object": {
              "type": "Identifier",
              "start": 775,
              "end": 781,
              "name": "caught"
            },
            "property": {
              "type": "Identifier",
              "start": 782,
              "end": 793,
              "name": "constructor"
            },
            "optional": false,
            "computed": false
          },
          {
            "type": "Identifier",
            "start": 795,
            "end": 806,
            "name": "SyntaxError"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}