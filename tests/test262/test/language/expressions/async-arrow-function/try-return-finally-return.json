{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "f",
            "start": 351,
            "end": 352
          },
          "init": {
            "type": "ArrowFunctionExpression",
            "expression": false,
            "async": true,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "TryStatement",
                  "block": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Literal",
                          "value": "early-return",
                          "raw": "\"early-return\"",
                          "start": 387,
                          "end": 401
                        },
                        "start": 380,
                        "end": 402
                      }
                    ],
                    "start": 374,
                    "end": 406
                  },
                  "handler": null,
                  "finalizer": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "AwaitExpression",
                          "argument": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "Promise",
                              "start": 438,
                              "end": 445
                            },
                            "arguments": [
                              {
                                "type": "FunctionExpression",
                                "id": null,
                                "generator": false,
                                "async": false,
                                "params": [
                                  {
                                    "type": "Identifier",
                                    "name": "resolve",
                                    "start": 455,
                                    "end": 462
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "reject",
                                    "start": 464,
                                    "end": 470
                                  }
                                ],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "resolve",
                                          "start": 480,
                                          "end": 487
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "override",
                                            "raw": "\"override\"",
                                            "start": 488,
                                            "end": 498
                                          }
                                        ],
                                        "optional": false,
                                        "start": 480,
                                        "end": 499
                                      },
                                      "start": 480,
                                      "end": 500
                                    }
                                  ],
                                  "start": 472,
                                  "end": 506
                                },
                                "expression": false,
                                "start": 446,
                                "end": 506
                              }
                            ],
                            "start": 434,
                            "end": 507
                          },
                          "start": 428,
                          "end": 507
                        },
                        "start": 421,
                        "end": 508
                      }
                    ],
                    "start": 415,
                    "end": 512
                  },
                  "start": 370,
                  "end": 512
                }
              ],
              "start": 366,
              "end": 514
            },
            "id": null,
            "generator": false,
            "start": 355,
            "end": 514
          },
          "start": 351,
          "end": 514
        }
      ],
      "start": 347,
      "end": 515
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "object": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "f",
                  "start": 517,
                  "end": 518
                },
                "arguments": [],
                "optional": false,
                "start": 517,
                "end": 520
              },
              "property": {
                "type": "Identifier",
                "name": "then",
                "start": 521,
                "end": 525
              },
              "optional": false,
              "computed": false,
              "start": 517,
              "end": 525
            },
            "arguments": [
              {
                "type": "FunctionExpression",
                "id": null,
                "generator": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "value",
                    "start": 535,
                    "end": 540
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "assert",
                            "start": 546,
                            "end": 552
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "sameValue",
                            "start": 553,
                            "end": 562
                          },
                          "optional": false,
                          "computed": false,
                          "start": 546,
                          "end": 562
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value",
                            "start": 563,
                            "end": 568
                          },
                          {
                            "type": "Literal",
                            "value": "override",
                            "raw": "\"override\"",
                            "start": 570,
                            "end": 580
                          },
                          {
                            "type": "Literal",
                            "value": "Return in finally block",
                            "raw": "\"Return in finally block\"",
                            "start": 582,
                            "end": 607
                          }
                        ],
                        "optional": false,
                        "start": 546,
                        "end": 608
                      },
                      "start": 546,
                      "end": 609
                    }
                  ],
                  "start": 542,
                  "end": 611
                },
                "expression": false,
                "start": 526,
                "end": 611
              }
            ],
            "optional": false,
            "start": 517,
            "end": 612
          },
          "property": {
            "type": "Identifier",
            "name": "then",
            "start": 613,
            "end": 617
          },
          "optional": false,
          "computed": false,
          "start": 517,
          "end": 617
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "$DONE",
            "start": 618,
            "end": 623
          },
          {
            "type": "Identifier",
            "name": "$DONE",
            "start": 625,
            "end": 630
          }
        ],
        "optional": false,
        "start": 517,
        "end": 631
      },
      "start": 517,
      "end": 632
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 633
}