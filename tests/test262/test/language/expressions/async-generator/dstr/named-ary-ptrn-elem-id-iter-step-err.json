{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "g",
            "start": 1109,
            "end": 1110
          },
          "init": {
            "type": "ObjectExpression",
            "properties": [],
            "start": 1113,
            "end": 1115
          },
          "start": 1109,
          "end": 1115
        }
      ],
      "start": 1105,
      "end": 1116
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "g",
            "start": 1117,
            "end": 1118
          },
          "property": {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "Symbol",
              "start": 1119,
              "end": 1125
            },
            "property": {
              "type": "Identifier",
              "name": "iterator",
              "start": 1126,
              "end": 1134
            },
            "optional": false,
            "computed": false,
            "start": 1119,
            "end": 1134
          },
          "optional": false,
          "computed": true,
          "start": 1117,
          "end": 1135
        },
        "right": {
          "type": "FunctionExpression",
          "id": null,
          "generator": false,
          "async": false,
          "params": [],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "kind": "init",
                      "key": {
                        "type": "Identifier",
                        "name": "next",
                        "start": 1166,
                        "end": 1170
                      },
                      "value": {
                        "type": "FunctionExpression",
                        "id": null,
                        "generator": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ThrowStatement",
                              "argument": {
                                "type": "NewExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "Test262Error",
                                  "start": 1201,
                                  "end": 1213
                                },
                                "arguments": [],
                                "start": 1197,
                                "end": 1215
                              },
                              "start": 1191,
                              "end": 1216
                            }
                          ],
                          "start": 1183,
                          "end": 1222
                        },
                        "expression": false,
                        "start": 1172,
                        "end": 1222
                      },
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "start": 1166,
                      "end": 1222
                    }
                  ],
                  "start": 1160,
                  "end": 1226
                },
                "start": 1153,
                "end": 1227
              }
            ],
            "start": 1149,
            "end": 1229
          },
          "expression": false,
          "start": 1138,
          "end": 1229
        },
        "start": 1117,
        "end": 1229
      },
      "start": 1117,
      "end": 1230
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "f",
            "start": 1237,
            "end": 1238
          },
          "init": null,
          "start": 1237,
          "end": 1238
        }
      ],
      "start": 1233,
      "end": 1239
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "Identifier",
          "name": "f",
          "start": 1240,
          "end": 1241
        },
        "right": {
          "type": "FunctionExpression",
          "id": {
            "type": "Identifier",
            "name": "g",
            "start": 1260,
            "end": 1261
          },
          "generator": true,
          "async": true,
          "params": [
            {
              "type": "ArrayPattern",
              "elements": [
                {
                  "type": "Identifier",
                  "name": "x",
                  "start": 1263,
                  "end": 1264
                }
              ],
              "start": 1262,
              "end": 1265
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [],
            "start": 1267,
            "end": 1273
          },
          "expression": false,
          "start": 1244,
          "end": 1273
        },
        "start": 1240,
        "end": 1273
      },
      "start": 1240,
      "end": 1274
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1276,
            "end": 1282
          },
          "property": {
            "type": "Identifier",
            "name": "throws",
            "start": 1283,
            "end": 1289
          },
          "optional": false,
          "computed": false,
          "start": 1276,
          "end": 1289
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "Test262Error",
            "start": 1290,
            "end": 1302
          },
          {
            "type": "FunctionExpression",
            "id": null,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "f",
                      "start": 1319,
                      "end": 1320
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "g",
                        "start": 1321,
                        "end": 1322
                      }
                    ],
                    "optional": false,
                    "start": 1319,
                    "end": 1323
                  },
                  "start": 1319,
                  "end": 1324
                }
              ],
              "start": 1315,
              "end": 1326
            },
            "expression": false,
            "start": 1304,
            "end": 1326
          }
        ],
        "optional": false,
        "start": 1276,
        "end": 1327
      },
      "start": 1276,
      "end": 1328
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1329
}