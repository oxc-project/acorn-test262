{
  "type": "Program",
  "body": [
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "UnaryExpression",
          "operator": "+",
          "argument": {
            "type": "Literal",
            "value": "1",
            "raw": "\"1\"",
            "start": 277,
            "end": 280
          },
          "prefix": true,
          "start": 276,
          "end": 280
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 1,
          "raw": "1",
          "start": 285,
          "end": 286
        },
        "start": 276,
        "end": 286
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 302,
                "end": 314
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1: +\"1\" === 1. Actual: ",
                    "raw": "'#1: +\"1\" === 1. Actual: '",
                    "start": 315,
                    "end": 341
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Literal",
                        "value": "1",
                        "raw": "\"1\"",
                        "start": 346,
                        "end": 349
                      },
                      "prefix": true,
                      "start": 345,
                      "end": 349
                    },
                    "start": 344,
                    "end": 350
                  },
                  "start": 315,
                  "end": 350
                }
              ],
              "start": 298,
              "end": 351
            },
            "start": 292,
            "end": 352
          }
        ],
        "start": 288,
        "end": 354
      },
      "alternate": null,
      "start": 272,
      "end": 354
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "UnaryExpression",
          "operator": "+",
          "argument": {
            "type": "NewExpression",
            "callee": {
              "type": "Identifier",
              "name": "Number",
              "start": 375,
              "end": 381
            },
            "arguments": [
              {
                "type": "Literal",
                "value": "-1",
                "raw": "\"-1\"",
                "start": 382,
                "end": 386
              }
            ],
            "start": 371,
            "end": 387
          },
          "prefix": true,
          "start": 370,
          "end": 387
        },
        "operator": "!==",
        "right": {
          "type": "UnaryExpression",
          "operator": "-",
          "argument": {
            "type": "Literal",
            "value": 1,
            "raw": "1",
            "start": 393,
            "end": 394
          },
          "prefix": true,
          "start": 392,
          "end": 394
        },
        "start": 370,
        "end": 394
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 410,
                "end": 422
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#2: +new String(\"-1\") === -1. Actual: ",
                    "raw": "'#2: +new String(\"-1\") === -1. Actual: '",
                    "start": 423,
                    "end": 463
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "String",
                          "start": 472,
                          "end": 478
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "-1",
                            "raw": "\"-1\"",
                            "start": 479,
                            "end": 483
                          }
                        ],
                        "start": 468,
                        "end": 484
                      },
                      "prefix": true,
                      "start": 467,
                      "end": 484
                    },
                    "start": 466,
                    "end": 485
                  },
                  "start": 423,
                  "end": 485
                }
              ],
              "start": 406,
              "end": 486
            },
            "start": 400,
            "end": 487
          }
        ],
        "start": 396,
        "end": 489
      },
      "alternate": null,
      "start": 366,
      "end": 489
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "isNaN",
            "start": 505,
            "end": 510
          },
          "arguments": [
            {
              "type": "UnaryExpression",
              "operator": "+",
              "argument": {
                "type": "Literal",
                "value": "x",
                "raw": "\"x\"",
                "start": 512,
                "end": 515
              },
              "prefix": true,
              "start": 511,
              "end": 515
            }
          ],
          "optional": false,
          "start": 505,
          "end": 516
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 521,
          "end": 525
        },
        "start": 505,
        "end": 525
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 541,
                "end": 553
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#3: +\"x\" === Not-a-Number. Actual: ",
                    "raw": "'#3: +\"x\" === Not-a-Number. Actual: '",
                    "start": 554,
                    "end": 591
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Literal",
                        "value": "x",
                        "raw": "\"x\"",
                        "start": 596,
                        "end": 599
                      },
                      "prefix": true,
                      "start": 595,
                      "end": 599
                    },
                    "start": 594,
                    "end": 600
                  },
                  "start": 554,
                  "end": 600
                }
              ],
              "start": 537,
              "end": 601
            },
            "start": 531,
            "end": 602
          }
        ],
        "start": 527,
        "end": 604
      },
      "alternate": null,
      "start": 501,
      "end": 604
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "isNaN",
            "start": 620,
            "end": 625
          },
          "arguments": [
            {
              "type": "UnaryExpression",
              "operator": "+",
              "argument": {
                "type": "Literal",
                "value": "INFINITY",
                "raw": "\"INFINITY\"",
                "start": 627,
                "end": 637
              },
              "prefix": true,
              "start": 626,
              "end": 637
            }
          ],
          "optional": false,
          "start": 620,
          "end": 638
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 643,
          "end": 647
        },
        "start": 620,
        "end": 647
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 663,
                "end": 675
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#4: +\"INFINITY\" === Not-a-Number. Actual: ",
                    "raw": "'#4: +\"INFINITY\" === Not-a-Number. Actual: '",
                    "start": 676,
                    "end": 720
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Literal",
                        "value": "INFINITY",
                        "raw": "\"INFINITY\"",
                        "start": 725,
                        "end": 735
                      },
                      "prefix": true,
                      "start": 724,
                      "end": 735
                    },
                    "start": 723,
                    "end": 736
                  },
                  "start": 676,
                  "end": 736
                }
              ],
              "start": 659,
              "end": 737
            },
            "start": 653,
            "end": 738
          }
        ],
        "start": 649,
        "end": 740
      },
      "alternate": null,
      "start": 616,
      "end": 740
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "isNaN",
            "start": 756,
            "end": 761
          },
          "arguments": [
            {
              "type": "UnaryExpression",
              "operator": "+",
              "argument": {
                "type": "Literal",
                "value": "infinity",
                "raw": "\"infinity\"",
                "start": 763,
                "end": 773
              },
              "prefix": true,
              "start": 762,
              "end": 773
            }
          ],
          "optional": false,
          "start": 756,
          "end": 774
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 779,
          "end": 783
        },
        "start": 756,
        "end": 783
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 799,
                "end": 811
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#5: +\"infinity\" === Not-a-Number. Actual: ",
                    "raw": "'#5: +\"infinity\" === Not-a-Number. Actual: '",
                    "start": 812,
                    "end": 856
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Literal",
                        "value": "infinity",
                        "raw": "\"infinity\"",
                        "start": 861,
                        "end": 871
                      },
                      "prefix": true,
                      "start": 860,
                      "end": 871
                    },
                    "start": 859,
                    "end": 872
                  },
                  "start": 812,
                  "end": 872
                }
              ],
              "start": 795,
              "end": 873
            },
            "start": 789,
            "end": 874
          }
        ],
        "start": 785,
        "end": 876
      },
      "alternate": null,
      "start": 752,
      "end": 876
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 877
}