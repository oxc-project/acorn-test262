{
  "type": "Program",
  "start": 0,
  "end": 451,
  "body": [
    {
      "type": "ExpressionStatement",
      "start": 279,
      "end": 327,
      "expression": {
        "type": "CallExpression",
        "start": 279,
        "end": 326,
        "callee": {
          "type": "MemberExpression",
          "start": 279,
          "end": 295,
          "object": {
            "type": "Identifier",
            "start": 279,
            "end": 285,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 286,
            "end": 295,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "UnaryExpression",
            "start": 296,
            "end": 313,
            "operator": "typeof",
            "prefix": true,
            "argument": {
              "type": "ParenthesizedExpression",
              "start": 303,
              "end": 313,
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 304,
                "end": 312,
                "id": null,
                "expression": false,
                "generator": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 310,
                  "end": 312,
                  "body": []
                }
              }
            }
          },
          {
            "type": "Literal",
            "start": 315,
            "end": 325,
            "value": "function",
            "raw": "\"function\""
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 328,
      "end": 398,
      "expression": {
        "type": "CallExpression",
        "start": 328,
        "end": 397,
        "callee": {
          "type": "MemberExpression",
          "start": 328,
          "end": 344,
          "object": {
            "type": "Identifier",
            "start": 328,
            "end": 334,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 335,
            "end": 344,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 345,
            "end": 376,
            "callee": {
              "type": "MemberExpression",
              "start": 345,
              "end": 366,
              "object": {
                "type": "Identifier",
                "start": 345,
                "end": 351,
                "name": "Object"
              },
              "property": {
                "type": "Identifier",
                "start": 352,
                "end": 366,
                "name": "getPrototypeOf"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "ArrowFunctionExpression",
                "start": 367,
                "end": 375,
                "id": null,
                "expression": false,
                "generator": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 373,
                  "end": 375,
                  "body": []
                }
              }
            ],
            "optional": false
          },
          {
            "type": "MemberExpression",
            "start": 378,
            "end": 396,
            "object": {
              "type": "Identifier",
              "start": 378,
              "end": 386,
              "name": "Function"
            },
            "property": {
              "type": "Identifier",
              "start": 387,
              "end": 396,
              "name": "prototype"
            },
            "computed": false,
            "optional": false
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 399,
      "end": 450,
      "expression": {
        "type": "CallExpression",
        "start": 399,
        "end": 449,
        "callee": {
          "type": "MemberExpression",
          "start": 399,
          "end": 415,
          "object": {
            "type": "Identifier",
            "start": 399,
            "end": 405,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 406,
            "end": 415,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 416,
            "end": 441,
            "left": {
              "type": "Literal",
              "start": 416,
              "end": 427,
              "value": "prototype",
              "raw": "\"prototype\""
            },
            "operator": "in",
            "right": {
              "type": "ParenthesizedExpression",
              "start": 431,
              "end": 441,
              "expression": {
                "type": "ArrowFunctionExpression",
                "start": 432,
                "end": 440,
                "id": null,
                "expression": false,
                "generator": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 438,
                  "end": 440,
                  "body": []
                }
              }
            }
          },
          {
            "type": "Literal",
            "start": 443,
            "end": 448,
            "value": false,
            "raw": "false"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}