{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 279,
            "end": 285
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 286,
            "end": 295
          },
          "optional": false,
          "computed": false,
          "start": 279,
          "end": 295
        },
        "arguments": [
          {
            "type": "UnaryExpression",
            "operator": "typeof",
            "argument": {
              "type": "ParenthesizedExpression",
              "expression": {
                "type": "ArrowFunctionExpression",
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [],
                  "start": 310,
                  "end": 312
                },
                "id": null,
                "generator": false,
                "start": 304,
                "end": 312
              },
              "start": 303,
              "end": 313
            },
            "prefix": true,
            "start": 296,
            "end": 313
          },
          {
            "type": "Literal",
            "value": "function",
            "raw": "\"function\"",
            "start": 315,
            "end": 325
          }
        ],
        "optional": false,
        "start": 279,
        "end": 326
      },
      "start": 279,
      "end": 327
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 328,
            "end": 334
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 335,
            "end": 344
          },
          "optional": false,
          "computed": false,
          "start": 328,
          "end": 344
        },
        "arguments": [
          {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "object": {
                "type": "Identifier",
                "name": "Object",
                "start": 345,
                "end": 351
              },
              "property": {
                "type": "Identifier",
                "name": "getPrototypeOf",
                "start": 352,
                "end": 366
              },
              "optional": false,
              "computed": false,
              "start": 345,
              "end": 366
            },
            "arguments": [
              {
                "type": "ArrowFunctionExpression",
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [],
                  "start": 373,
                  "end": 375
                },
                "id": null,
                "generator": false,
                "start": 367,
                "end": 375
              }
            ],
            "optional": false,
            "start": 345,
            "end": 376
          },
          {
            "type": "MemberExpression",
            "object": {
              "type": "Identifier",
              "name": "Function",
              "start": 378,
              "end": 386
            },
            "property": {
              "type": "Identifier",
              "name": "prototype",
              "start": 387,
              "end": 396
            },
            "optional": false,
            "computed": false,
            "start": 378,
            "end": 396
          }
        ],
        "optional": false,
        "start": 328,
        "end": 397
      },
      "start": 328,
      "end": 398
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 399,
            "end": 405
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 406,
            "end": 415
          },
          "optional": false,
          "computed": false,
          "start": 399,
          "end": 415
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "left": {
              "type": "Literal",
              "value": "prototype",
              "raw": "\"prototype\"",
              "start": 416,
              "end": 427
            },
            "operator": "in",
            "right": {
              "type": "ParenthesizedExpression",
              "expression": {
                "type": "ArrowFunctionExpression",
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [],
                  "start": 438,
                  "end": 440
                },
                "id": null,
                "generator": false,
                "start": 432,
                "end": 440
              },
              "start": 431,
              "end": 441
            },
            "start": 416,
            "end": 441
          },
          {
            "type": "Literal",
            "value": false,
            "raw": "false",
            "start": 443,
            "end": 448
          }
        ],
        "optional": false,
        "start": 399,
        "end": 449
      },
      "start": 399,
      "end": 450
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 451
}