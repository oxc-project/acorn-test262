{
  "type": "Program",
  "body": [
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "LogicalExpression",
            "left": {
              "type": "UnaryExpression",
              "operator": "-",
              "argument": {
                "type": "Literal",
                "value": 1,
                "raw": "1",
                "start": 304,
                "end": 305
              },
              "prefix": true,
              "start": 303,
              "end": 305
            },
            "operator": "&&",
            "right": {
              "type": "UnaryExpression",
              "operator": "-",
              "argument": {
                "type": "Literal",
                "value": 0,
                "raw": "0",
                "start": 310,
                "end": 311
              },
              "prefix": true,
              "start": 309,
              "end": 311
            },
            "start": 303,
            "end": 311
          },
          "start": 302,
          "end": 312
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 0,
          "raw": "0",
          "start": 317,
          "end": 318
        },
        "start": 302,
        "end": 318
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 334,
                "end": 346
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "#1.1: (-1 && -0) === 0",
                  "raw": "'#1.1: (-1 && -0) === 0'",
                  "start": 347,
                  "end": 371
                }
              ],
              "start": 330,
              "end": 372
            },
            "start": 324,
            "end": 373
          }
        ],
        "start": 320,
        "end": 375
      },
      "alternate": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "IfStatement",
            "test": {
              "type": "BinaryExpression",
              "left": {
                "type": "ParenthesizedExpression",
                "expression": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "start": 390,
                    "end": 391
                  },
                  "operator": "/",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "LogicalExpression",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1",
                          "start": 396,
                          "end": 397
                        },
                        "prefix": true,
                        "start": 395,
                        "end": 397
                      },
                      "operator": "&&",
                      "right": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "start": 402,
                          "end": 403
                        },
                        "prefix": true,
                        "start": 401,
                        "end": 403
                      },
                      "start": 395,
                      "end": 403
                    },
                    "start": 394,
                    "end": 404
                  },
                  "start": 390,
                  "end": 404
                },
                "start": 389,
                "end": 405
              },
              "operator": "!==",
              "right": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "Number",
                  "start": 410,
                  "end": 416
                },
                "property": {
                  "type": "Identifier",
                  "name": "NEGATIVE_INFINITY",
                  "start": 417,
                  "end": 434
                },
                "optional": false,
                "computed": false,
                "start": 410,
                "end": 434
              },
              "start": 389,
              "end": 434
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ThrowStatement",
                  "argument": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Test262Error",
                      "start": 452,
                      "end": 464
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "#1.2: (-1 && -0) === -0",
                        "raw": "'#1.2: (-1 && -0) === -0'",
                        "start": 465,
                        "end": 490
                      }
                    ],
                    "start": 448,
                    "end": 491
                  },
                  "start": 442,
                  "end": 492
                }
              ],
              "start": 436,
              "end": 496
            },
            "alternate": null,
            "start": 385,
            "end": 496
          }
        ],
        "start": 381,
        "end": 498
      },
      "start": 298,
      "end": 498
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "LogicalExpression",
            "left": {
              "type": "UnaryExpression",
              "operator": "-",
              "argument": {
                "type": "Literal",
                "value": 1,
                "raw": "1",
                "start": 516,
                "end": 517
              },
              "prefix": true,
              "start": 515,
              "end": 517
            },
            "operator": "&&",
            "right": {
              "type": "Literal",
              "value": 0,
              "raw": "0",
              "start": 521,
              "end": 522
            },
            "start": 515,
            "end": 522
          },
          "start": 514,
          "end": 523
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 0,
          "raw": "0",
          "start": 528,
          "end": 529
        },
        "start": 514,
        "end": 529
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 545,
                "end": 557
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "#2.1: (-1 && 0) === 0",
                  "raw": "'#2.1: (-1 && 0) === 0'",
                  "start": 558,
                  "end": 581
                }
              ],
              "start": 541,
              "end": 582
            },
            "start": 535,
            "end": 583
          }
        ],
        "start": 531,
        "end": 585
      },
      "alternate": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "IfStatement",
            "test": {
              "type": "BinaryExpression",
              "left": {
                "type": "ParenthesizedExpression",
                "expression": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "start": 600,
                    "end": 601
                  },
                  "operator": "/",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "LogicalExpression",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1",
                          "start": 606,
                          "end": 607
                        },
                        "prefix": true,
                        "start": 605,
                        "end": 607
                      },
                      "operator": "&&",
                      "right": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "start": 611,
                        "end": 612
                      },
                      "start": 605,
                      "end": 612
                    },
                    "start": 604,
                    "end": 613
                  },
                  "start": 600,
                  "end": 613
                },
                "start": 599,
                "end": 614
              },
              "operator": "!==",
              "right": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "Number",
                  "start": 619,
                  "end": 625
                },
                "property": {
                  "type": "Identifier",
                  "name": "POSITIVE_INFINITY",
                  "start": 626,
                  "end": 643
                },
                "optional": false,
                "computed": false,
                "start": 619,
                "end": 643
              },
              "start": 599,
              "end": 643
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ThrowStatement",
                  "argument": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Test262Error",
                      "start": 661,
                      "end": 673
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "#2.2: (-1 && 0) === +0",
                        "raw": "'#2.2: (-1 && 0) === +0'",
                        "start": 674,
                        "end": 698
                      }
                    ],
                    "start": 657,
                    "end": 699
                  },
                  "start": 651,
                  "end": 700
                }
              ],
              "start": 645,
              "end": 704
            },
            "alternate": null,
            "start": 595,
            "end": 704
          }
        ],
        "start": 591,
        "end": 706
      },
      "start": 510,
      "end": 706
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "CallExpression",
            "callee": {
              "type": "Identifier",
              "name": "isNaN",
              "start": 723,
              "end": 728
            },
            "arguments": [
              {
                "type": "LogicalExpression",
                "left": {
                  "type": "Literal",
                  "value": 0.1,
                  "raw": "0.1",
                  "start": 729,
                  "end": 732
                },
                "operator": "&&",
                "right": {
                  "type": "Identifier",
                  "name": "NaN",
                  "start": 736,
                  "end": 739
                },
                "start": 729,
                "end": 739
              }
            ],
            "optional": false,
            "start": 723,
            "end": 740
          },
          "start": 722,
          "end": 741
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 746,
          "end": 750
        },
        "start": 722,
        "end": 750
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 766,
                "end": 778
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "#3: (0.1 && NaN) === Not-a-Number",
                  "raw": "'#3: (0.1 && NaN) === Not-a-Number'",
                  "start": 779,
                  "end": 814
                }
              ],
              "start": 762,
              "end": 815
            },
            "start": 756,
            "end": 816
          }
        ],
        "start": 752,
        "end": 818
      },
      "alternate": null,
      "start": 718,
      "end": 818
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "y",
            "start": 834,
            "end": 835
          },
          "init": {
            "type": "NewExpression",
            "callee": {
              "type": "Identifier",
              "name": "Number",
              "start": 842,
              "end": 848
            },
            "arguments": [
              {
                "type": "Literal",
                "value": 0,
                "raw": "0",
                "start": 849,
                "end": 850
              }
            ],
            "start": 838,
            "end": 851
          },
          "start": 834,
          "end": 851
        }
      ],
      "start": 830,
      "end": 852
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "LogicalExpression",
            "left": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Number",
                "start": 862,
                "end": 868
              },
              "arguments": [
                {
                  "type": "UnaryExpression",
                  "operator": "-",
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "start": 870,
                    "end": 871
                  },
                  "prefix": true,
                  "start": 869,
                  "end": 871
                }
              ],
              "start": 858,
              "end": 872
            },
            "operator": "&&",
            "right": {
              "type": "Identifier",
              "name": "y",
              "start": 876,
              "end": 877
            },
            "start": 858,
            "end": 877
          },
          "start": 857,
          "end": 878
        },
        "operator": "!==",
        "right": {
          "type": "Identifier",
          "name": "y",
          "start": 883,
          "end": 884
        },
        "start": 857,
        "end": 884
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 900,
                "end": 912
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "#4: (var y = new Number(0); (new Number(-1) && y) === y",
                  "raw": "'#4: (var y = new Number(0); (new Number(-1) && y) === y'",
                  "start": 913,
                  "end": 970
                }
              ],
              "start": 896,
              "end": 971
            },
            "start": 890,
            "end": 972
          }
        ],
        "start": 886,
        "end": 974
      },
      "alternate": null,
      "start": 853,
      "end": 974
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "y",
            "start": 990,
            "end": 991
          },
          "init": {
            "type": "NewExpression",
            "callee": {
              "type": "Identifier",
              "name": "Number",
              "start": 998,
              "end": 1004
            },
            "arguments": [
              {
                "type": "Identifier",
                "name": "NaN",
                "start": 1005,
                "end": 1008
              }
            ],
            "start": 994,
            "end": 1009
          },
          "start": 990,
          "end": 1009
        }
      ],
      "start": 986,
      "end": 1010
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "LogicalExpression",
            "left": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Number",
                "start": 1020,
                "end": 1026
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0",
                  "start": 1027,
                  "end": 1028
                }
              ],
              "start": 1016,
              "end": 1029
            },
            "operator": "&&",
            "right": {
              "type": "Identifier",
              "name": "y",
              "start": 1033,
              "end": 1034
            },
            "start": 1016,
            "end": 1034
          },
          "start": 1015,
          "end": 1035
        },
        "operator": "!==",
        "right": {
          "type": "Identifier",
          "name": "y",
          "start": 1040,
          "end": 1041
        },
        "start": 1015,
        "end": 1041
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1057,
                "end": 1069
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "#5: (var y = new Number(NaN); (new Number(0) && y) === y",
                  "raw": "'#5: (var y = new Number(NaN); (new Number(0) && y) === y'",
                  "start": 1070,
                  "end": 1128
                }
              ],
              "start": 1053,
              "end": 1129
            },
            "start": 1047,
            "end": 1130
          }
        ],
        "start": 1043,
        "end": 1132
      },
      "alternate": null,
      "start": 1011,
      "end": 1132
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "y",
            "start": 1148,
            "end": 1149
          },
          "init": {
            "type": "NewExpression",
            "callee": {
              "type": "Identifier",
              "name": "Number",
              "start": 1156,
              "end": 1162
            },
            "arguments": [
              {
                "type": "UnaryExpression",
                "operator": "-",
                "argument": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1",
                  "start": 1164,
                  "end": 1165
                },
                "prefix": true,
                "start": 1163,
                "end": 1165
              }
            ],
            "start": 1152,
            "end": 1166
          },
          "start": 1148,
          "end": 1166
        }
      ],
      "start": 1144,
      "end": 1167
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "LogicalExpression",
            "left": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Number",
                "start": 1177,
                "end": 1183
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "NaN",
                  "start": 1184,
                  "end": 1187
                }
              ],
              "start": 1173,
              "end": 1188
            },
            "operator": "&&",
            "right": {
              "type": "Identifier",
              "name": "y",
              "start": 1192,
              "end": 1193
            },
            "start": 1173,
            "end": 1193
          },
          "start": 1172,
          "end": 1194
        },
        "operator": "!==",
        "right": {
          "type": "Identifier",
          "name": "y",
          "start": 1199,
          "end": 1200
        },
        "start": 1172,
        "end": 1200
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1216,
                "end": 1228
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "#6: (var y = new Number(-1); (new Number(NaN) && y) === y",
                  "raw": "'#6: (var y = new Number(-1); (new Number(NaN) && y) === y'",
                  "start": 1229,
                  "end": 1288
                }
              ],
              "start": 1212,
              "end": 1289
            },
            "start": 1206,
            "end": 1290
          }
        ],
        "start": 1202,
        "end": 1292
      },
      "alternate": null,
      "start": 1168,
      "end": 1292
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1293
}