{
  "type": "Program",
  "start": 0,
  "end": 1015,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 352,
      "end": 358,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 356,
          "end": 357,
          "id": {
            "type": "Identifier",
            "start": 356,
            "end": 357,
            "name": "x"
          },
          "init": null
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 370,
      "end": 376,
      "expression": {
        "type": "AssignmentExpression",
        "start": 370,
        "end": 375,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 370,
          "end": 371,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 374,
          "end": 375,
          "value": 1,
          "raw": "1"
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 377,
      "end": 392,
      "expression": {
        "type": "AssignmentExpression",
        "start": 377,
        "end": 391,
        "operator": "+=",
        "left": {
          "type": "Identifier",
          "start": 377,
          "end": 378,
          "name": "x"
        },
        "right": {
          "type": "Identifier",
          "start": 382,
          "end": 391,
          "name": "undefined"
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 393,
      "end": 510,
      "test": {
        "type": "BinaryExpression",
        "start": 397,
        "end": 414,
        "left": {
          "type": "CallExpression",
          "start": 397,
          "end": 405,
          "callee": {
            "type": "Identifier",
            "start": 397,
            "end": 402,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 403,
              "end": 404,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 410,
          "end": 414,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 416,
        "end": 510,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 420,
            "end": 508,
            "argument": {
              "type": "NewExpression",
              "start": 426,
              "end": 507,
              "callee": {
                "type": "Identifier",
                "start": 430,
                "end": 442,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 443,
                  "end": 506,
                  "left": {
                    "type": "Literal",
                    "start": 443,
                    "end": 500,
                    "value": "#1: x = 1; x += undefined; x === Not-a-Number. Actual: ",
                    "raw": "'#1: x = 1; x += undefined; x === Not-a-Number. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 503,
                    "end": 506,
                    "expression": {
                      "type": "Identifier",
                      "start": 504,
                      "end": 505,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 522,
      "end": 536,
      "expression": {
        "type": "AssignmentExpression",
        "start": 522,
        "end": 535,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 522,
          "end": 523,
          "name": "x"
        },
        "right": {
          "type": "Identifier",
          "start": 526,
          "end": 535,
          "name": "undefined"
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 537,
      "end": 544,
      "expression": {
        "type": "AssignmentExpression",
        "start": 537,
        "end": 543,
        "operator": "+=",
        "left": {
          "type": "Identifier",
          "start": 537,
          "end": 538,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 542,
          "end": 543,
          "value": 1,
          "raw": "1"
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 545,
      "end": 662,
      "test": {
        "type": "BinaryExpression",
        "start": 549,
        "end": 566,
        "left": {
          "type": "CallExpression",
          "start": 549,
          "end": 557,
          "callee": {
            "type": "Identifier",
            "start": 549,
            "end": 554,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 555,
              "end": 556,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 562,
          "end": 566,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 568,
        "end": 662,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 572,
            "end": 660,
            "argument": {
              "type": "NewExpression",
              "start": 578,
              "end": 659,
              "callee": {
                "type": "Identifier",
                "start": 582,
                "end": 594,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 595,
                  "end": 658,
                  "left": {
                    "type": "Literal",
                    "start": 595,
                    "end": 652,
                    "value": "#2: x = undefined; x += 1; x === Not-a-Number. Actual: ",
                    "raw": "'#2: x = undefined; x += 1; x === Not-a-Number. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 655,
                    "end": 658,
                    "expression": {
                      "type": "Identifier",
                      "start": 656,
                      "end": 657,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 674,
      "end": 692,
      "expression": {
        "type": "AssignmentExpression",
        "start": 674,
        "end": 691,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 674,
          "end": 675,
          "name": "x"
        },
        "right": {
          "type": "NewExpression",
          "start": 678,
          "end": 691,
          "callee": {
            "type": "Identifier",
            "start": 682,
            "end": 688,
            "name": "Number"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 689,
              "end": 690,
              "value": 1,
              "raw": "1"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 693,
      "end": 708,
      "expression": {
        "type": "AssignmentExpression",
        "start": 693,
        "end": 707,
        "operator": "+=",
        "left": {
          "type": "Identifier",
          "start": 693,
          "end": 694,
          "name": "x"
        },
        "right": {
          "type": "Identifier",
          "start": 698,
          "end": 707,
          "name": "undefined"
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 709,
      "end": 838,
      "test": {
        "type": "BinaryExpression",
        "start": 713,
        "end": 730,
        "left": {
          "type": "CallExpression",
          "start": 713,
          "end": 721,
          "callee": {
            "type": "Identifier",
            "start": 713,
            "end": 718,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 719,
              "end": 720,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 726,
          "end": 730,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 732,
        "end": 838,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 736,
            "end": 836,
            "argument": {
              "type": "NewExpression",
              "start": 742,
              "end": 835,
              "callee": {
                "type": "Identifier",
                "start": 746,
                "end": 758,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 759,
                  "end": 834,
                  "left": {
                    "type": "Literal",
                    "start": 759,
                    "end": 828,
                    "value": "#3: x = new Number(1); x += undefined; x === Not-a-Number. Actual: ",
                    "raw": "'#3: x = new Number(1); x += undefined; x === Not-a-Number. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 831,
                    "end": 834,
                    "expression": {
                      "type": "Identifier",
                      "start": 832,
                      "end": 833,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 850,
      "end": 864,
      "expression": {
        "type": "AssignmentExpression",
        "start": 850,
        "end": 863,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 850,
          "end": 851,
          "name": "x"
        },
        "right": {
          "type": "Identifier",
          "start": 854,
          "end": 863,
          "name": "undefined"
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 865,
      "end": 884,
      "expression": {
        "type": "AssignmentExpression",
        "start": 865,
        "end": 883,
        "operator": "+=",
        "left": {
          "type": "Identifier",
          "start": 865,
          "end": 866,
          "name": "x"
        },
        "right": {
          "type": "NewExpression",
          "start": 870,
          "end": 883,
          "callee": {
            "type": "Identifier",
            "start": 874,
            "end": 880,
            "name": "Number"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 881,
              "end": 882,
              "value": 1,
              "raw": "1"
            }
          ]
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 885,
      "end": 1014,
      "test": {
        "type": "BinaryExpression",
        "start": 889,
        "end": 906,
        "left": {
          "type": "CallExpression",
          "start": 889,
          "end": 897,
          "callee": {
            "type": "Identifier",
            "start": 889,
            "end": 894,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 895,
              "end": 896,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 902,
          "end": 906,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 908,
        "end": 1014,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 912,
            "end": 1012,
            "argument": {
              "type": "NewExpression",
              "start": 918,
              "end": 1011,
              "callee": {
                "type": "Identifier",
                "start": 922,
                "end": 934,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 935,
                  "end": 1010,
                  "left": {
                    "type": "Literal",
                    "start": 935,
                    "end": 1004,
                    "value": "#4: x = undefined; x += new Number(1); x === Not-a-Number. Actual: ",
                    "raw": "'#4: x = undefined; x += new Number(1); x === Not-a-Number. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1007,
                    "end": 1010,
                    "expression": {
                      "type": "Identifier",
                      "start": 1008,
                      "end": 1009,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}