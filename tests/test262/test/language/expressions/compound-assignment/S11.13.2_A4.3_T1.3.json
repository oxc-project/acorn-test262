{
  "type": "Program",
  "start": 0,
  "end": 1188,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 305,
      "end": 311,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 309,
          "end": 310,
          "id": {
            "type": "Identifier",
            "start": 309,
            "end": 310,
            "name": "x"
          },
          "init": null
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 323,
      "end": 331,
      "expression": {
        "type": "AssignmentExpression",
        "start": 323,
        "end": 330,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 323,
          "end": 324,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 327,
          "end": 330,
          "value": "1",
          "raw": "\"1\""
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 332,
      "end": 341,
      "expression": {
        "type": "AssignmentExpression",
        "start": 332,
        "end": 340,
        "operator": "%=",
        "left": {
          "type": "Identifier",
          "start": 332,
          "end": 333,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 337,
          "end": 340,
          "value": "1",
          "raw": "\"1\""
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 342,
      "end": 434,
      "test": {
        "type": "BinaryExpression",
        "start": 346,
        "end": 353,
        "left": {
          "type": "Identifier",
          "start": 346,
          "end": 347,
          "name": "x"
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 352,
          "end": 353,
          "value": 0,
          "raw": "0"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 355,
        "end": 434,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 359,
            "end": 432,
            "argument": {
              "type": "NewExpression",
              "start": 365,
              "end": 431,
              "callee": {
                "type": "Identifier",
                "start": 369,
                "end": 381,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 382,
                  "end": 430,
                  "left": {
                    "type": "Literal",
                    "start": 382,
                    "end": 424,
                    "value": "#1: x = \"1\"; x %= \"1\"; x === 0. Actual: ",
                    "raw": "'#1: x = \"1\"; x %= \"1\"; x === 0. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 427,
                    "end": 430,
                    "expression": {
                      "type": "Identifier",
                      "start": 428,
                      "end": 429,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 446,
      "end": 466,
      "expression": {
        "type": "AssignmentExpression",
        "start": 446,
        "end": 465,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 446,
          "end": 447,
          "name": "x"
        },
        "right": {
          "type": "NewExpression",
          "start": 450,
          "end": 465,
          "callee": {
            "type": "Identifier",
            "start": 454,
            "end": 460,
            "name": "String"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 461,
              "end": 464,
              "value": "1",
              "raw": "\"1\""
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 467,
      "end": 476,
      "expression": {
        "type": "AssignmentExpression",
        "start": 467,
        "end": 475,
        "operator": "%=",
        "left": {
          "type": "Identifier",
          "start": 467,
          "end": 468,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 472,
          "end": 475,
          "value": "1",
          "raw": "\"1\""
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 477,
      "end": 581,
      "test": {
        "type": "BinaryExpression",
        "start": 481,
        "end": 488,
        "left": {
          "type": "Identifier",
          "start": 481,
          "end": 482,
          "name": "x"
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 487,
          "end": 488,
          "value": 0,
          "raw": "0"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 490,
        "end": 581,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 494,
            "end": 579,
            "argument": {
              "type": "NewExpression",
              "start": 500,
              "end": 578,
              "callee": {
                "type": "Identifier",
                "start": 504,
                "end": 516,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 517,
                  "end": 577,
                  "left": {
                    "type": "Literal",
                    "start": 517,
                    "end": 571,
                    "value": "#2: x = new String(\"1\"); x %= \"1\"; x === 0. Actual: ",
                    "raw": "'#2: x = new String(\"1\"); x %= \"1\"; x === 0. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 574,
                    "end": 577,
                    "expression": {
                      "type": "Identifier",
                      "start": 575,
                      "end": 576,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 593,
      "end": 601,
      "expression": {
        "type": "AssignmentExpression",
        "start": 593,
        "end": 600,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 593,
          "end": 594,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 597,
          "end": 600,
          "value": "1",
          "raw": "\"1\""
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 602,
      "end": 623,
      "expression": {
        "type": "AssignmentExpression",
        "start": 602,
        "end": 622,
        "operator": "%=",
        "left": {
          "type": "Identifier",
          "start": 602,
          "end": 603,
          "name": "x"
        },
        "right": {
          "type": "NewExpression",
          "start": 607,
          "end": 622,
          "callee": {
            "type": "Identifier",
            "start": 611,
            "end": 617,
            "name": "String"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 618,
              "end": 621,
              "value": "1",
              "raw": "\"1\""
            }
          ]
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 624,
      "end": 728,
      "test": {
        "type": "BinaryExpression",
        "start": 628,
        "end": 635,
        "left": {
          "type": "Identifier",
          "start": 628,
          "end": 629,
          "name": "x"
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 634,
          "end": 635,
          "value": 0,
          "raw": "0"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 637,
        "end": 728,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 641,
            "end": 726,
            "argument": {
              "type": "NewExpression",
              "start": 647,
              "end": 725,
              "callee": {
                "type": "Identifier",
                "start": 651,
                "end": 663,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 664,
                  "end": 724,
                  "left": {
                    "type": "Literal",
                    "start": 664,
                    "end": 718,
                    "value": "#3: x = \"1\"; x %= new String(\"1\"); x === 0. Actual: ",
                    "raw": "'#3: x = \"1\"; x %= new String(\"1\"); x === 0. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 721,
                    "end": 724,
                    "expression": {
                      "type": "Identifier",
                      "start": 722,
                      "end": 723,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 740,
      "end": 760,
      "expression": {
        "type": "AssignmentExpression",
        "start": 740,
        "end": 759,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 740,
          "end": 741,
          "name": "x"
        },
        "right": {
          "type": "NewExpression",
          "start": 744,
          "end": 759,
          "callee": {
            "type": "Identifier",
            "start": 748,
            "end": 754,
            "name": "String"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 755,
              "end": 758,
              "value": "1",
              "raw": "\"1\""
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 761,
      "end": 782,
      "expression": {
        "type": "AssignmentExpression",
        "start": 761,
        "end": 781,
        "operator": "%=",
        "left": {
          "type": "Identifier",
          "start": 761,
          "end": 762,
          "name": "x"
        },
        "right": {
          "type": "NewExpression",
          "start": 766,
          "end": 781,
          "callee": {
            "type": "Identifier",
            "start": 770,
            "end": 776,
            "name": "String"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 777,
              "end": 780,
              "value": "1",
              "raw": "\"1\""
            }
          ]
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 783,
      "end": 899,
      "test": {
        "type": "BinaryExpression",
        "start": 787,
        "end": 794,
        "left": {
          "type": "Identifier",
          "start": 787,
          "end": 788,
          "name": "x"
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 793,
          "end": 794,
          "value": 0,
          "raw": "0"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 796,
        "end": 899,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 800,
            "end": 897,
            "argument": {
              "type": "NewExpression",
              "start": 806,
              "end": 896,
              "callee": {
                "type": "Identifier",
                "start": 810,
                "end": 822,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 823,
                  "end": 895,
                  "left": {
                    "type": "Literal",
                    "start": 823,
                    "end": 889,
                    "value": "#4: x = new String(\"1\"); x %= new String(\"1\"); x === 0. Actual: ",
                    "raw": "'#4: x = new String(\"1\"); x %= new String(\"1\"); x === 0. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 892,
                    "end": 895,
                    "expression": {
                      "type": "Identifier",
                      "start": 893,
                      "end": 894,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 911,
      "end": 919,
      "expression": {
        "type": "AssignmentExpression",
        "start": 911,
        "end": 918,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 911,
          "end": 912,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 915,
          "end": 918,
          "value": "x",
          "raw": "\"x\""
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 920,
      "end": 929,
      "expression": {
        "type": "AssignmentExpression",
        "start": 920,
        "end": 928,
        "operator": "%=",
        "left": {
          "type": "Identifier",
          "start": 920,
          "end": 921,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 925,
          "end": 928,
          "value": "1",
          "raw": "\"1\""
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 930,
      "end": 1043,
      "test": {
        "type": "BinaryExpression",
        "start": 934,
        "end": 951,
        "left": {
          "type": "CallExpression",
          "start": 934,
          "end": 942,
          "callee": {
            "type": "Identifier",
            "start": 934,
            "end": 939,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 940,
              "end": 941,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 947,
          "end": 951,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 953,
        "end": 1043,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 957,
            "end": 1041,
            "argument": {
              "type": "NewExpression",
              "start": 963,
              "end": 1040,
              "callee": {
                "type": "Identifier",
                "start": 967,
                "end": 979,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 980,
                  "end": 1039,
                  "left": {
                    "type": "Literal",
                    "start": 980,
                    "end": 1033,
                    "value": "#5: x = \"x\"; x %= \"1\"; x === Not-a-Number. Actual: ",
                    "raw": "'#5: x = \"x\"; x %= \"1\"; x === Not-a-Number. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1036,
                    "end": 1039,
                    "expression": {
                      "type": "Identifier",
                      "start": 1037,
                      "end": 1038,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 1055,
      "end": 1063,
      "expression": {
        "type": "AssignmentExpression",
        "start": 1055,
        "end": 1062,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 1055,
          "end": 1056,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 1059,
          "end": 1062,
          "value": "1",
          "raw": "\"1\""
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1064,
      "end": 1073,
      "expression": {
        "type": "AssignmentExpression",
        "start": 1064,
        "end": 1072,
        "operator": "%=",
        "left": {
          "type": "Identifier",
          "start": 1064,
          "end": 1065,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 1069,
          "end": 1072,
          "value": "x",
          "raw": "\"x\""
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 1074,
      "end": 1187,
      "test": {
        "type": "BinaryExpression",
        "start": 1078,
        "end": 1095,
        "left": {
          "type": "CallExpression",
          "start": 1078,
          "end": 1086,
          "callee": {
            "type": "Identifier",
            "start": 1078,
            "end": 1083,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 1084,
              "end": 1085,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1091,
          "end": 1095,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1097,
        "end": 1187,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1101,
            "end": 1185,
            "argument": {
              "type": "NewExpression",
              "start": 1107,
              "end": 1184,
              "callee": {
                "type": "Identifier",
                "start": 1111,
                "end": 1123,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1124,
                  "end": 1183,
                  "left": {
                    "type": "Literal",
                    "start": 1124,
                    "end": 1177,
                    "value": "#6: x = \"1\"; x %= \"x\"; x === Not-a-Number. Actual: ",
                    "raw": "'#6: x = \"1\"; x %= \"x\"; x === Not-a-Number. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1180,
                    "end": 1183,
                    "expression": {
                      "type": "Identifier",
                      "start": 1181,
                      "end": 1182,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}