{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "x",
            "start": 372,
            "end": 373
          },
          "init": null,
          "start": 372,
          "end": 373
        }
      ],
      "start": 368,
      "end": 374
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 386,
          "end": 387
        },
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 390,
          "end": 394
        },
        "start": 386,
        "end": 394
      },
      "start": 386,
      "end": 395
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "*=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 396,
          "end": 397
        },
        "right": {
          "type": "Identifier",
          "name": "undefined",
          "start": 401,
          "end": 410
        },
        "start": 396,
        "end": 410
      },
      "start": 396,
      "end": 411
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "isNaN",
            "start": 416,
            "end": 421
          },
          "arguments": [
            {
              "type": "Identifier",
              "name": "x",
              "start": 422,
              "end": 423
            }
          ],
          "optional": false,
          "start": 416,
          "end": 424
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 429,
          "end": 433
        },
        "start": 416,
        "end": 433
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 449,
                "end": 461
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1: x = true; x *= undefined; x === Not-a-Number. Actual: ",
                    "raw": "'#1: x = true; x *= undefined; x === Not-a-Number. Actual: '",
                    "start": 462,
                    "end": 522
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "Identifier",
                      "name": "x",
                      "start": 526,
                      "end": 527
                    },
                    "start": 525,
                    "end": 528
                  },
                  "start": 462,
                  "end": 528
                }
              ],
              "start": 445,
              "end": 529
            },
            "start": 439,
            "end": 530
          }
        ],
        "start": 435,
        "end": 532
      },
      "alternate": null,
      "start": 412,
      "end": 532
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 544,
          "end": 545
        },
        "right": {
          "type": "Identifier",
          "name": "undefined",
          "start": 548,
          "end": 557
        },
        "start": 544,
        "end": 557
      },
      "start": 544,
      "end": 558
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "*=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 559,
          "end": 560
        },
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 564,
          "end": 568
        },
        "start": 559,
        "end": 568
      },
      "start": 559,
      "end": 569
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "isNaN",
            "start": 574,
            "end": 579
          },
          "arguments": [
            {
              "type": "Identifier",
              "name": "x",
              "start": 580,
              "end": 581
            }
          ],
          "optional": false,
          "start": 574,
          "end": 582
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 587,
          "end": 591
        },
        "start": 574,
        "end": 591
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 607,
                "end": 619
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#2: x = undefined; x *= true; x === Not-a-Number. Actual: ",
                    "raw": "'#2: x = undefined; x *= true; x === Not-a-Number. Actual: '",
                    "start": 620,
                    "end": 680
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "Identifier",
                      "name": "x",
                      "start": 684,
                      "end": 685
                    },
                    "start": 683,
                    "end": 686
                  },
                  "start": 620,
                  "end": 686
                }
              ],
              "start": 603,
              "end": 687
            },
            "start": 597,
            "end": 688
          }
        ],
        "start": 593,
        "end": 690
      },
      "alternate": null,
      "start": 570,
      "end": 690
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 702,
          "end": 703
        },
        "right": {
          "type": "NewExpression",
          "callee": {
            "type": "Identifier",
            "name": "Boolean",
            "start": 710,
            "end": 717
          },
          "arguments": [
            {
              "type": "Literal",
              "value": true,
              "raw": "true",
              "start": 718,
              "end": 722
            }
          ],
          "start": 706,
          "end": 723
        },
        "start": 702,
        "end": 723
      },
      "start": 702,
      "end": 724
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "*=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 725,
          "end": 726
        },
        "right": {
          "type": "Identifier",
          "name": "undefined",
          "start": 730,
          "end": 739
        },
        "start": 725,
        "end": 739
      },
      "start": 725,
      "end": 740
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "isNaN",
            "start": 745,
            "end": 750
          },
          "arguments": [
            {
              "type": "Identifier",
              "name": "x",
              "start": 751,
              "end": 752
            }
          ],
          "optional": false,
          "start": 745,
          "end": 753
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 758,
          "end": 762
        },
        "start": 745,
        "end": 762
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 778,
                "end": 790
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#3: x = new Boolean(true); x *= undefined; x === Not-a-Number. Actual: ",
                    "raw": "'#3: x = new Boolean(true); x *= undefined; x === Not-a-Number. Actual: '",
                    "start": 791,
                    "end": 864
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "Identifier",
                      "name": "x",
                      "start": 868,
                      "end": 869
                    },
                    "start": 867,
                    "end": 870
                  },
                  "start": 791,
                  "end": 870
                }
              ],
              "start": 774,
              "end": 871
            },
            "start": 768,
            "end": 872
          }
        ],
        "start": 764,
        "end": 874
      },
      "alternate": null,
      "start": 741,
      "end": 874
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 886,
          "end": 887
        },
        "right": {
          "type": "Identifier",
          "name": "undefined",
          "start": 890,
          "end": 899
        },
        "start": 886,
        "end": 899
      },
      "start": 886,
      "end": 900
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "*=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 901,
          "end": 902
        },
        "right": {
          "type": "NewExpression",
          "callee": {
            "type": "Identifier",
            "name": "Boolean",
            "start": 910,
            "end": 917
          },
          "arguments": [
            {
              "type": "Literal",
              "value": true,
              "raw": "true",
              "start": 918,
              "end": 922
            }
          ],
          "start": 906,
          "end": 923
        },
        "start": 901,
        "end": 923
      },
      "start": 901,
      "end": 924
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "CallExpression",
          "callee": {
            "type": "Identifier",
            "name": "isNaN",
            "start": 929,
            "end": 934
          },
          "arguments": [
            {
              "type": "Identifier",
              "name": "x",
              "start": 935,
              "end": 936
            }
          ],
          "optional": false,
          "start": 929,
          "end": 937
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 942,
          "end": 946
        },
        "start": 929,
        "end": 946
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 962,
                "end": 974
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#4: x = undefined; x *= new Boolean(true); x === Not-a-Number. Actual: ",
                    "raw": "'#4: x = undefined; x *= new Boolean(true); x === Not-a-Number. Actual: '",
                    "start": 975,
                    "end": 1048
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "Identifier",
                      "name": "x",
                      "start": 1052,
                      "end": 1053
                    },
                    "start": 1051,
                    "end": 1054
                  },
                  "start": 975,
                  "end": 1054
                }
              ],
              "start": 958,
              "end": 1055
            },
            "start": 952,
            "end": 1056
          }
        ],
        "start": 948,
        "end": 1058
      },
      "alternate": null,
      "start": 925,
      "end": 1058
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1059
}