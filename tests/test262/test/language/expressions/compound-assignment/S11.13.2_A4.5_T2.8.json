{
  "type": "Program",
  "start": 0,
  "end": 1044,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 353,
      "end": 359,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 357,
          "end": 358,
          "id": {
            "type": "Identifier",
            "start": 357,
            "end": 358,
            "name": "x"
          },
          "init": null
        }
      ]
    },
    {
      "type": "ExpressionStatement",
      "start": 371,
      "end": 380,
      "expression": {
        "type": "AssignmentExpression",
        "start": 371,
        "end": 379,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 371,
          "end": 372,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 375,
          "end": 379,
          "value": true,
          "raw": "true"
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 381,
      "end": 396,
      "expression": {
        "type": "AssignmentExpression",
        "start": 381,
        "end": 395,
        "operator": "-=",
        "left": {
          "type": "Identifier",
          "start": 381,
          "end": 382,
          "name": "x"
        },
        "right": {
          "type": "Identifier",
          "start": 386,
          "end": 395,
          "name": "undefined"
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 397,
      "end": 517,
      "test": {
        "type": "BinaryExpression",
        "start": 401,
        "end": 418,
        "left": {
          "type": "CallExpression",
          "start": 401,
          "end": 409,
          "callee": {
            "type": "Identifier",
            "start": 401,
            "end": 406,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 407,
              "end": 408,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 414,
          "end": 418,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 420,
        "end": 517,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 424,
            "end": 515,
            "argument": {
              "type": "NewExpression",
              "start": 430,
              "end": 514,
              "callee": {
                "type": "Identifier",
                "start": 434,
                "end": 446,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 447,
                  "end": 513,
                  "left": {
                    "type": "Literal",
                    "start": 447,
                    "end": 507,
                    "value": "#1: x = true; x -= undefined; x === Not-a-Number. Actual: ",
                    "raw": "'#1: x = true; x -= undefined; x === Not-a-Number. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 510,
                    "end": 513,
                    "expression": {
                      "type": "Identifier",
                      "start": 511,
                      "end": 512,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 529,
      "end": 543,
      "expression": {
        "type": "AssignmentExpression",
        "start": 529,
        "end": 542,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 529,
          "end": 530,
          "name": "x"
        },
        "right": {
          "type": "Identifier",
          "start": 533,
          "end": 542,
          "name": "undefined"
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 544,
      "end": 554,
      "expression": {
        "type": "AssignmentExpression",
        "start": 544,
        "end": 553,
        "operator": "-=",
        "left": {
          "type": "Identifier",
          "start": 544,
          "end": 545,
          "name": "x"
        },
        "right": {
          "type": "Literal",
          "start": 549,
          "end": 553,
          "value": true,
          "raw": "true"
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 555,
      "end": 675,
      "test": {
        "type": "BinaryExpression",
        "start": 559,
        "end": 576,
        "left": {
          "type": "CallExpression",
          "start": 559,
          "end": 567,
          "callee": {
            "type": "Identifier",
            "start": 559,
            "end": 564,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 565,
              "end": 566,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 572,
          "end": 576,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 578,
        "end": 675,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 582,
            "end": 673,
            "argument": {
              "type": "NewExpression",
              "start": 588,
              "end": 672,
              "callee": {
                "type": "Identifier",
                "start": 592,
                "end": 604,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 605,
                  "end": 671,
                  "left": {
                    "type": "Literal",
                    "start": 605,
                    "end": 665,
                    "value": "#2: x = undefined; x -= true; x === Not-a-Number. Actual: ",
                    "raw": "'#2: x = undefined; x -= true; x === Not-a-Number. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 668,
                    "end": 671,
                    "expression": {
                      "type": "Identifier",
                      "start": 669,
                      "end": 670,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 687,
      "end": 709,
      "expression": {
        "type": "AssignmentExpression",
        "start": 687,
        "end": 708,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 687,
          "end": 688,
          "name": "x"
        },
        "right": {
          "type": "NewExpression",
          "start": 691,
          "end": 708,
          "callee": {
            "type": "Identifier",
            "start": 695,
            "end": 702,
            "name": "Boolean"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 703,
              "end": 707,
              "value": true,
              "raw": "true"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 710,
      "end": 725,
      "expression": {
        "type": "AssignmentExpression",
        "start": 710,
        "end": 724,
        "operator": "-=",
        "left": {
          "type": "Identifier",
          "start": 710,
          "end": 711,
          "name": "x"
        },
        "right": {
          "type": "Identifier",
          "start": 715,
          "end": 724,
          "name": "undefined"
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 726,
      "end": 859,
      "test": {
        "type": "BinaryExpression",
        "start": 730,
        "end": 747,
        "left": {
          "type": "CallExpression",
          "start": 730,
          "end": 738,
          "callee": {
            "type": "Identifier",
            "start": 730,
            "end": 735,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 736,
              "end": 737,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 743,
          "end": 747,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 749,
        "end": 859,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 753,
            "end": 857,
            "argument": {
              "type": "NewExpression",
              "start": 759,
              "end": 856,
              "callee": {
                "type": "Identifier",
                "start": 763,
                "end": 775,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 776,
                  "end": 855,
                  "left": {
                    "type": "Literal",
                    "start": 776,
                    "end": 849,
                    "value": "#3: x = new Boolean(true); x -= undefined; x === Not-a-Number. Actual: ",
                    "raw": "'#3: x = new Boolean(true); x -= undefined; x === Not-a-Number. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 852,
                    "end": 855,
                    "expression": {
                      "type": "Identifier",
                      "start": 853,
                      "end": 854,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "start": 871,
      "end": 885,
      "expression": {
        "type": "AssignmentExpression",
        "start": 871,
        "end": 884,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 871,
          "end": 872,
          "name": "x"
        },
        "right": {
          "type": "Identifier",
          "start": 875,
          "end": 884,
          "name": "undefined"
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 886,
      "end": 909,
      "expression": {
        "type": "AssignmentExpression",
        "start": 886,
        "end": 908,
        "operator": "-=",
        "left": {
          "type": "Identifier",
          "start": 886,
          "end": 887,
          "name": "x"
        },
        "right": {
          "type": "NewExpression",
          "start": 891,
          "end": 908,
          "callee": {
            "type": "Identifier",
            "start": 895,
            "end": 902,
            "name": "Boolean"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 903,
              "end": 907,
              "value": true,
              "raw": "true"
            }
          ]
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 910,
      "end": 1043,
      "test": {
        "type": "BinaryExpression",
        "start": 914,
        "end": 931,
        "left": {
          "type": "CallExpression",
          "start": 914,
          "end": 922,
          "callee": {
            "type": "Identifier",
            "start": 914,
            "end": 919,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 920,
              "end": 921,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 927,
          "end": 931,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 933,
        "end": 1043,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 937,
            "end": 1041,
            "argument": {
              "type": "NewExpression",
              "start": 943,
              "end": 1040,
              "callee": {
                "type": "Identifier",
                "start": 947,
                "end": 959,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 960,
                  "end": 1039,
                  "left": {
                    "type": "Literal",
                    "start": 960,
                    "end": 1033,
                    "value": "#4: x = undefined; x -= new Boolean(true); x === Not-a-Number. Actual: ",
                    "raw": "'#4: x = undefined; x -= new Boolean(true); x === Not-a-Number. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1036,
                    "end": 1039,
                    "expression": {
                      "type": "Identifier",
                      "start": 1037,
                      "end": 1038,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}