{
  "type": "Program",
  "start": 0,
  "end": 1016,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 897,
      "end": 916,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 901,
          "end": 915,
          "id": {
            "type": "Identifier",
            "start": 901,
            "end": 911,
            "name": "iterations"
          },
          "init": {
            "type": "Literal",
            "start": 914,
            "end": 915,
            "value": 0,
            "raw": "0"
          }
        }
      ]
    },
    {
      "type": "VariableDeclaration",
      "start": 917,
      "end": 965,
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 921,
          "end": 964,
          "id": {
            "type": "Identifier",
            "start": 921,
            "end": 925,
            "name": "iter"
          },
          "init": {
            "type": "CallExpression",
            "start": 928,
            "end": 964,
            "callee": {
              "type": "FunctionExpression",
              "start": 928,
              "end": 962,
              "id": null,
              "generator": true,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "start": 940,
                "end": 962,
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 944,
                    "end": 960,
                    "expression": {
                      "type": "AssignmentExpression",
                      "start": 944,
                      "end": 959,
                      "operator": "+=",
                      "left": {
                        "type": "Identifier",
                        "start": 944,
                        "end": 954,
                        "name": "iterations"
                      },
                      "right": {
                        "type": "Literal",
                        "start": 958,
                        "end": 959,
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ]
              },
              "expression": false
            },
            "arguments": [],
            "optional": false
          }
        }
      ]
    },
    {
      "type": "VariableDeclaration",
      "start": 967,
      "end": 981,
      "kind": "let",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 971,
          "end": 980,
          "id": {
            "type": "ArrayPattern",
            "start": 971,
            "end": 973,
            "elements": []
          },
          "init": {
            "type": "Identifier",
            "start": 976,
            "end": 980,
            "name": "iter"
          }
        }
      ]
    },
    {
      "type": "ExpressionStatement",
      "start": 983,
      "end": 1015,
      "expression": {
        "type": "CallExpression",
        "start": 983,
        "end": 1014,
        "callee": {
          "type": "MemberExpression",
          "start": 983,
          "end": 999,
          "object": {
            "type": "Identifier",
            "start": 983,
            "end": 989,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 990,
            "end": 999,
            "name": "sameValue"
          },
          "optional": false,
          "computed": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1000,
            "end": 1010,
            "name": "iterations"
          },
          {
            "type": "Literal",
            "start": 1012,
            "end": 1013,
            "value": 0,
            "raw": "0"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}