{
  "type": "Program",
  "start": 0,
  "end": 820,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 361,
      "end": 373,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 365,
          "end": 372,
          "id": {
            "type": "Identifier",
            "start": 365,
            "end": 370,
            "name": "check"
          },
          "init": {
            "type": "Literal",
            "start": 371,
            "end": 372,
            "value": 0,
            "raw": "0"
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "WhileStatement",
      "start": 374,
      "end": 505,
      "test": {
        "type": "FunctionExpression",
        "start": 380,
        "end": 394,
        "id": {
          "type": "Identifier",
          "start": 389,
          "end": 390,
          "name": "f"
        },
        "expression": false,
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "start": 392,
          "end": 394,
          "body": []
        }
      },
      "body": {
        "type": "BlockStatement",
        "start": 395,
        "end": 505,
        "body": [
          {
            "type": "IfStatement",
            "start": 403,
            "end": 503,
            "test": {
              "type": "BinaryExpression",
              "start": 406,
              "end": 430,
              "left": {
                "type": "UnaryExpression",
                "start": 406,
                "end": 415,
                "operator": "typeof",
                "prefix": true,
                "argument": {
                  "type": "ParenthesizedExpression",
                  "start": 412,
                  "end": 415,
                  "expression": {
                    "type": "Identifier",
                    "start": 413,
                    "end": 414,
                    "name": "f"
                  }
                }
              },
              "operator": "===",
              "right": {
                "type": "Literal",
                "start": 420,
                "end": 430,
                "value": "function",
                "raw": "\"function\""
              }
            },
            "consequent": {
              "type": "BlockStatement",
              "start": 432,
              "end": 465,
              "body": [
                {
                  "type": "ExpressionStatement",
                  "start": 438,
                  "end": 449,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 438,
                    "end": 448,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 438,
                      "end": 443,
                      "name": "check"
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "start": 446,
                      "end": 448,
                      "operator": "-",
                      "prefix": true,
                      "argument": {
                        "type": "Literal",
                        "start": 447,
                        "end": 448,
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                },
                {
                  "type": "BreakStatement",
                  "start": 454,
                  "end": 460,
                  "label": null
                }
              ]
            },
            "alternate": {
              "type": "BlockStatement",
              "start": 471,
              "end": 503,
              "body": [
                {
                  "type": "ExpressionStatement",
                  "start": 477,
                  "end": 487,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 477,
                    "end": 486,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 477,
                      "end": 482,
                      "name": "check"
                    },
                    "right": {
                      "type": "Literal",
                      "start": 485,
                      "end": 486,
                      "value": 1,
                      "raw": "1"
                    }
                  }
                },
                {
                  "type": "BreakStatement",
                  "start": 492,
                  "end": 498,
                  "label": null
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "IfStatement",
      "start": 596,
      "end": 737,
      "test": {
        "type": "BinaryExpression",
        "start": 600,
        "end": 611,
        "left": {
          "type": "Identifier",
          "start": 600,
          "end": 605,
          "name": "check"
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 610,
          "end": 611,
          "value": 1,
          "raw": "1"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 613,
        "end": 737,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 616,
            "end": 735,
            "argument": {
              "type": "NewExpression",
              "start": 622,
              "end": 734,
              "callee": {
                "type": "Identifier",
                "start": 626,
                "end": 638,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 639,
                  "end": 733,
                  "value": "#1: FunctionExpression inside while construction expression allowed but function not declare",
                  "raw": "'#1: FunctionExpression inside while construction expression allowed but function not declare'"
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}