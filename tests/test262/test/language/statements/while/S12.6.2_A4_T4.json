{
  "type": "Program",
  "body": [
    {
      "type": "LabeledStatement",
      "label": {
        "type": "Identifier",
        "name": "do_out",
        "start": 341,
        "end": 347
      },
      "body": {
        "type": "WhileStatement",
        "test": {
          "type": "BinaryExpression",
          "left": {
            "type": "Literal",
            "value": 1,
            "raw": "1",
            "start": 356,
            "end": 357
          },
          "operator": "===",
          "right": {
            "type": "Literal",
            "value": 1,
            "raw": "1",
            "start": 360,
            "end": 361
          },
          "start": 356,
          "end": 361
        },
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "Identifier",
                "name": "__in__do__before__break",
                "start": 372,
                "end": 395
              },
              "consequent": {
                "type": "BreakStatement",
                "label": null,
                "start": 396,
                "end": 402
              },
              "alternate": null,
              "start": 369,
              "end": 402
            },
            {
              "type": "VariableDeclaration",
              "kind": "var",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "__in__do__before__break",
                    "start": 411,
                    "end": 434
                  },
                  "init": {
                    "type": "Literal",
                    "value": "can't",
                    "raw": "\"can't\"",
                    "start": 435,
                    "end": 442
                  },
                  "start": 411,
                  "end": 442
                }
              ],
              "start": 407,
              "end": 443
            },
            {
              "type": "LabeledStatement",
              "label": {
                "type": "Identifier",
                "name": "do_in",
                "start": 448,
                "end": 453
              },
              "body": {
                "type": "WhileStatement",
                "test": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1",
                  "start": 463,
                  "end": 464
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "kind": "var",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "__in__do__IN__before__break",
                            "start": 480,
                            "end": 507
                          },
                          "init": {
                            "type": "Literal",
                            "value": "get",
                            "raw": "\"get\"",
                            "start": 508,
                            "end": 513
                          },
                          "start": 480,
                          "end": 513
                        }
                      ],
                      "start": 476,
                      "end": 514
                    },
                    {
                      "type": "BreakStatement",
                      "label": null,
                      "start": 523,
                      "end": 529
                    },
                    {
                      "type": "VariableDeclaration",
                      "kind": "var",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "__in__do__IN__after__break",
                            "start": 542,
                            "end": 568
                          },
                          "init": {
                            "type": "Literal",
                            "value": "no",
                            "raw": "\"no\"",
                            "start": 569,
                            "end": 573
                          },
                          "start": 542,
                          "end": 573
                        }
                      ],
                      "start": 538,
                      "end": 574
                    }
                  ],
                  "start": 466,
                  "end": 580
                },
                "start": 456,
                "end": 580
              },
              "start": 448,
              "end": 580
            },
            {
              "type": "EmptyStatement",
              "start": 581,
              "end": 582
            },
            {
              "type": "VariableDeclaration",
              "kind": "var",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "__in__do__after__break",
                    "start": 591,
                    "end": 613
                  },
                  "init": {
                    "type": "Literal",
                    "value": "Satisfaction",
                    "raw": "\"Satisfaction\"",
                    "start": 614,
                    "end": 628
                  },
                  "start": 591,
                  "end": 628
                }
              ],
              "start": 587,
              "end": 629
            }
          ],
          "start": 363,
          "end": 631
        },
        "start": 350,
        "end": 631
      },
      "start": 341,
      "end": 631
    },
    {
      "type": "EmptyStatement",
      "start": 632,
      "end": 633
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "UnaryExpression",
        "operator": "!",
        "argument": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "LogicalExpression",
            "left": {
              "type": "LogicalExpression",
              "left": {
                "type": "LogicalExpression",
                "left": {
                  "type": "Identifier",
                  "name": "__in__do__before__break",
                  "start": 730,
                  "end": 753
                },
                "operator": "&&",
                "right": {
                  "type": "Identifier",
                  "name": "__in__do__IN__before__break",
                  "start": 755,
                  "end": 782
                },
                "start": 730,
                "end": 782
              },
              "operator": "&&",
              "right": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "Identifier",
                  "name": "__in__do__IN__after__break",
                  "start": 785,
                  "end": 811
                },
                "prefix": true,
                "start": 784,
                "end": 811
              },
              "start": 730,
              "end": 811
            },
            "operator": "&&",
            "right": {
              "type": "Identifier",
              "name": "__in__do__after__break",
              "start": 813,
              "end": 835
            },
            "start": 730,
            "end": 835
          },
          "start": 729,
          "end": 836
        },
        "prefix": true,
        "start": 728,
        "end": 836
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 851,
                "end": 863
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "#1: Break inside do-while is allowed as its described at standard",
                  "raw": "'#1: Break inside do-while is allowed as its described at standard'",
                  "start": 864,
                  "end": 931
                }
              ],
              "start": 847,
              "end": 932
            },
            "start": 841,
            "end": 933
          }
        ],
        "start": 838,
        "end": 935
      },
      "alternate": null,
      "start": 724,
      "end": 935
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1018
}