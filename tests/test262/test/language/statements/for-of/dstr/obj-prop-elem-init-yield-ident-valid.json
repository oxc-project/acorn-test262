{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "yield",
            "start": 1207,
            "end": 1212
          },
          "init": {
            "type": "Literal",
            "value": 4,
            "raw": "4",
            "start": 1215,
            "end": 1216
          },
          "start": 1207,
          "end": 1216
        }
      ],
      "start": 1203,
      "end": 1217
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "x",
            "start": 1222,
            "end": 1223
          },
          "init": null,
          "start": 1222,
          "end": 1223
        }
      ],
      "start": 1218,
      "end": 1224
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "counter",
            "start": 1230,
            "end": 1237
          },
          "init": {
            "type": "Literal",
            "value": 0,
            "raw": "0",
            "start": 1240,
            "end": 1241
          },
          "start": 1230,
          "end": 1241
        }
      ],
      "start": 1226,
      "end": 1242
    },
    {
      "type": "ForOfStatement",
      "await": false,
      "left": {
        "type": "ObjectPattern",
        "properties": [
          {
            "type": "Property",
            "kind": "init",
            "key": {
              "type": "Identifier",
              "name": "x",
              "start": 1251,
              "end": 1252
            },
            "value": {
              "type": "AssignmentPattern",
              "left": {
                "type": "Identifier",
                "name": "x",
                "start": 1254,
                "end": 1255
              },
              "right": {
                "type": "Identifier",
                "name": "yield",
                "start": 1258,
                "end": 1263
              },
              "start": 1254,
              "end": 1263
            },
            "method": false,
            "shorthand": false,
            "computed": false,
            "start": 1251,
            "end": 1263
          }
        ],
        "start": 1249,
        "end": 1265
      },
      "right": {
        "type": "ArrayExpression",
        "elements": [
          {
            "type": "ObjectExpression",
            "properties": [],
            "start": 1270,
            "end": 1272
          }
        ],
        "start": 1269,
        "end": 1273
      },
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "assert",
                  "start": 1279,
                  "end": 1285
                },
                "property": {
                  "type": "Identifier",
                  "name": "sameValue",
                  "start": 1286,
                  "end": 1295
                },
                "optional": false,
                "computed": false,
                "start": 1279,
                "end": 1295
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "x",
                  "start": 1296,
                  "end": 1297
                },
                {
                  "type": "Literal",
                  "value": 4,
                  "raw": "4",
                  "start": 1299,
                  "end": 1300
                }
              ],
              "optional": false,
              "start": 1279,
              "end": 1301
            },
            "start": 1279,
            "end": 1302
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "+=",
              "left": {
                "type": "Identifier",
                "name": "counter",
                "start": 1305,
                "end": 1312
              },
              "right": {
                "type": "Literal",
                "value": 1,
                "raw": "1",
                "start": 1316,
                "end": 1317
              },
              "start": 1305,
              "end": 1317
            },
            "start": 1305,
            "end": 1318
          }
        ],
        "start": 1275,
        "end": 1320
      },
      "start": 1244,
      "end": 1320
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1322,
            "end": 1328
          },
          "property": {
            "type": "Identifier",
            "name": "sameValue",
            "start": 1329,
            "end": 1338
          },
          "optional": false,
          "computed": false,
          "start": 1322,
          "end": 1338
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "counter",
            "start": 1339,
            "end": 1346
          },
          {
            "type": "Literal",
            "value": 1,
            "raw": "1",
            "start": 1348,
            "end": 1349
          }
        ],
        "optional": false,
        "start": 1322,
        "end": 1350
      },
      "start": 1322,
      "end": 1351
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1352
}