{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "check",
            "start": 367,
            "end": 372
          },
          "init": {
            "type": "Literal",
            "value": 0,
            "raw": "0",
            "start": 375,
            "end": 376
          },
          "start": 367,
          "end": 376
        }
      ],
      "start": 363,
      "end": 377
    },
    {
      "type": "DoWhileStatement",
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "IfStatement",
            "test": {
              "type": "BinaryExpression",
              "left": {
                "type": "UnaryExpression",
                "operator": "typeof",
                "argument": {
                  "type": "ParenthesizedExpression",
                  "expression": {
                    "type": "Identifier",
                    "name": "f",
                    "start": 399,
                    "end": 400
                  },
                  "start": 398,
                  "end": 401
                },
                "prefix": true,
                "start": 392,
                "end": 401
              },
              "operator": "===",
              "right": {
                "type": "Literal",
                "value": "function",
                "raw": "\"function\"",
                "start": 406,
                "end": 416
              },
              "start": 392,
              "end": 416
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "check",
                      "start": 423,
                      "end": 428
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "start": 432,
                        "end": 433
                      },
                      "prefix": true,
                      "start": 431,
                      "end": 433
                    },
                    "start": 423,
                    "end": 433
                  },
                  "start": 423,
                  "end": 434
                },
                {
                  "type": "BreakStatement",
                  "label": null,
                  "start": 447,
                  "end": 453
                }
              ],
              "start": 417,
              "end": 458
            },
            "alternate": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "check",
                      "start": 470,
                      "end": 475
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1",
                      "start": 478,
                      "end": 479
                    },
                    "start": 470,
                    "end": 479
                  },
                  "start": 470,
                  "end": 480
                },
                {
                  "type": "BreakStatement",
                  "label": null,
                  "start": 493,
                  "end": 499
                }
              ],
              "start": 464,
              "end": 504
            },
            "start": 389,
            "end": 504
          }
        ],
        "start": 381,
        "end": 506
      },
      "test": {
        "type": "FunctionExpression",
        "id": {
          "type": "Identifier",
          "name": "f",
          "start": 522,
          "end": 523
        },
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [],
          "start": 525,
          "end": 527
        },
        "expression": false,
        "start": 513,
        "end": 527
      },
      "start": 378,
      "end": 529
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "Identifier",
          "name": "check",
          "start": 624,
          "end": 629
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": 1,
          "raw": "1",
          "start": 634,
          "end": 635
        },
        "start": 624,
        "end": 635
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 650,
                "end": 662
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "#1: FunctionExpression within a \"do-while\" statement is allowed, but no function with the given name will appear in the global context",
                  "raw": "'#1: FunctionExpression within a \"do-while\" statement is allowed, but no function with the given name will appear in the global context'",
                  "start": 663,
                  "end": 799
                }
              ],
              "start": 646,
              "end": 800
            },
            "start": 640,
            "end": 801
          }
        ],
        "start": 637,
        "end": 803
      },
      "alternate": null,
      "start": 620,
      "end": 803
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 886
}