{
  "type": "Program",
  "start": 0,
  "end": 959,
  "body": [
    {
      "type": "TryStatement",
      "start": 262,
      "end": 418,
      "block": {
        "type": "BlockStatement",
        "start": 265,
        "end": 292,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 269,
            "end": 290,
            "argument": {
              "type": "Literal",
              "start": 275,
              "end": 289,
              "value": "exception #1",
              "raw": "\"exception #1\""
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 293,
        "end": 418,
        "param": {
          "type": "Identifier",
          "start": 299,
          "end": 300,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 301,
          "end": 418,
          "body": [
            {
              "type": "IfStatement",
              "start": 305,
              "end": 416,
              "test": {
                "type": "BinaryExpression",
                "start": 309,
                "end": 327,
                "left": {
                  "type": "Identifier",
                  "start": 309,
                  "end": 310,
                  "name": "e"
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 313,
                  "end": 327,
                  "value": "exception #1",
                  "raw": "\"exception #1\""
                }
              },
              "consequent": {
                "type": "ThrowStatement",
                "start": 329,
                "end": 416,
                "argument": {
                  "type": "NewExpression",
                  "start": 335,
                  "end": 415,
                  "callee": {
                    "type": "Identifier",
                    "start": 339,
                    "end": 351,
                    "name": "Test262Error"
                  },
                  "arguments": [
                    {
                      "type": "BinaryExpression",
                      "start": 352,
                      "end": 412,
                      "left": {
                        "type": "Literal",
                        "start": 352,
                        "end": 409,
                        "value": "#1: Exception ===\"exception #1\". Actual:  Exception ===",
                        "raw": "'#1: Exception ===\"exception #1\". Actual:  Exception ==='"
                      },
                      "operator": "+",
                      "right": {
                        "type": "Identifier",
                        "start": 411,
                        "end": 412,
                        "name": "e"
                      }
                    }
                  ]
                }
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    },
    {
      "type": "TryStatement",
      "start": 431,
      "end": 590,
      "block": {
        "type": "BlockStatement",
        "start": 434,
        "end": 464,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 438,
            "end": 462,
            "argument": {
              "type": "BinaryExpression",
              "start": 444,
              "end": 461,
              "left": {
                "type": "Literal",
                "start": 444,
                "end": 455,
                "value": "exception",
                "raw": "\"exception\""
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 456,
                "end": 461,
                "value": " #1",
                "raw": "\" #1\""
              }
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 465,
        "end": 590,
        "param": {
          "type": "Identifier",
          "start": 471,
          "end": 472,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 473,
          "end": 590,
          "body": [
            {
              "type": "IfStatement",
              "start": 477,
              "end": 588,
              "test": {
                "type": "BinaryExpression",
                "start": 481,
                "end": 499,
                "left": {
                  "type": "Identifier",
                  "start": 481,
                  "end": 482,
                  "name": "e"
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 485,
                  "end": 499,
                  "value": "exception #1",
                  "raw": "\"exception #1\""
                }
              },
              "consequent": {
                "type": "ThrowStatement",
                "start": 501,
                "end": 588,
                "argument": {
                  "type": "NewExpression",
                  "start": 507,
                  "end": 587,
                  "callee": {
                    "type": "Identifier",
                    "start": 511,
                    "end": 523,
                    "name": "Test262Error"
                  },
                  "arguments": [
                    {
                      "type": "BinaryExpression",
                      "start": 524,
                      "end": 584,
                      "left": {
                        "type": "Literal",
                        "start": 524,
                        "end": 581,
                        "value": "#2: Exception ===\"exception #1\". Actual:  Exception ===",
                        "raw": "'#2: Exception ===\"exception #1\". Actual:  Exception ==='"
                      },
                      "operator": "+",
                      "right": {
                        "type": "Identifier",
                        "start": 583,
                        "end": 584,
                        "name": "e"
                      }
                    }
                  ]
                }
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    },
    {
      "type": "VariableDeclaration",
      "start": 603,
      "end": 624,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 607,
          "end": 623,
          "id": {
            "type": "Identifier",
            "start": 607,
            "end": 608,
            "name": "b"
          },
          "init": {
            "type": "Literal",
            "start": 609,
            "end": 623,
            "value": "exception #1",
            "raw": "\"exception #1\""
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "TryStatement",
      "start": 625,
      "end": 768,
      "block": {
        "type": "BlockStatement",
        "start": 628,
        "end": 642,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 632,
            "end": 640,
            "argument": {
              "type": "Identifier",
              "start": 638,
              "end": 639,
              "name": "b"
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 643,
        "end": 768,
        "param": {
          "type": "Identifier",
          "start": 649,
          "end": 650,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 651,
          "end": 768,
          "body": [
            {
              "type": "IfStatement",
              "start": 655,
              "end": 766,
              "test": {
                "type": "BinaryExpression",
                "start": 659,
                "end": 677,
                "left": {
                  "type": "Identifier",
                  "start": 659,
                  "end": 660,
                  "name": "e"
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 663,
                  "end": 677,
                  "value": "exception #1",
                  "raw": "\"exception #1\""
                }
              },
              "consequent": {
                "type": "ThrowStatement",
                "start": 679,
                "end": 766,
                "argument": {
                  "type": "NewExpression",
                  "start": 685,
                  "end": 765,
                  "callee": {
                    "type": "Identifier",
                    "start": 689,
                    "end": 701,
                    "name": "Test262Error"
                  },
                  "arguments": [
                    {
                      "type": "BinaryExpression",
                      "start": 702,
                      "end": 762,
                      "left": {
                        "type": "Literal",
                        "start": 702,
                        "end": 759,
                        "value": "#3: Exception ===\"exception #1\". Actual:  Exception ===",
                        "raw": "'#3: Exception ===\"exception #1\". Actual:  Exception ==='"
                      },
                      "operator": "+",
                      "right": {
                        "type": "Identifier",
                        "start": 761,
                        "end": 762,
                        "name": "e"
                      }
                    }
                  ]
                }
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    },
    {
      "type": "VariableDeclaration",
      "start": 781,
      "end": 799,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 785,
          "end": 798,
          "id": {
            "type": "Identifier",
            "start": 785,
            "end": 786,
            "name": "a"
          },
          "init": {
            "type": "Literal",
            "start": 787,
            "end": 798,
            "value": "exception",
            "raw": "\"exception\""
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "start": 800,
      "end": 812,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 804,
          "end": 811,
          "id": {
            "type": "Identifier",
            "start": 804,
            "end": 805,
            "name": "b"
          },
          "init": {
            "type": "Literal",
            "start": 806,
            "end": 811,
            "value": " #1",
            "raw": "\" #1\""
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "TryStatement",
      "start": 813,
      "end": 958,
      "block": {
        "type": "BlockStatement",
        "start": 816,
        "end": 832,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 820,
            "end": 830,
            "argument": {
              "type": "BinaryExpression",
              "start": 826,
              "end": 829,
              "left": {
                "type": "Identifier",
                "start": 826,
                "end": 827,
                "name": "a"
              },
              "operator": "+",
              "right": {
                "type": "Identifier",
                "start": 828,
                "end": 829,
                "name": "b"
              }
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 833,
        "end": 958,
        "param": {
          "type": "Identifier",
          "start": 839,
          "end": 840,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 841,
          "end": 958,
          "body": [
            {
              "type": "IfStatement",
              "start": 845,
              "end": 956,
              "test": {
                "type": "BinaryExpression",
                "start": 849,
                "end": 867,
                "left": {
                  "type": "Identifier",
                  "start": 849,
                  "end": 850,
                  "name": "e"
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 853,
                  "end": 867,
                  "value": "exception #1",
                  "raw": "\"exception #1\""
                }
              },
              "consequent": {
                "type": "ThrowStatement",
                "start": 869,
                "end": 956,
                "argument": {
                  "type": "NewExpression",
                  "start": 875,
                  "end": 955,
                  "callee": {
                    "type": "Identifier",
                    "start": 879,
                    "end": 891,
                    "name": "Test262Error"
                  },
                  "arguments": [
                    {
                      "type": "BinaryExpression",
                      "start": 892,
                      "end": 952,
                      "left": {
                        "type": "Literal",
                        "start": 892,
                        "end": 949,
                        "value": "#4: Exception ===\"exception #1\". Actual:  Exception ===",
                        "raw": "'#4: Exception ===\"exception #1\". Actual:  Exception ==='"
                      },
                      "operator": "+",
                      "right": {
                        "type": "Identifier",
                        "start": 951,
                        "end": 952,
                        "name": "e"
                      }
                    }
                  ]
                }
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}