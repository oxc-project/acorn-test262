{
  "type": "Program",
  "body": [
    {
      "type": "TryStatement",
      "block": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "Identifier",
                "name": "__x",
                "start": 604,
                "end": 607
              },
              "right": {
                "type": "Identifier",
                "name": "__x",
                "start": 610,
                "end": 613
              },
              "start": 604,
              "end": 613
            },
            "start": 604,
            "end": 614
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "Identifier",
                "name": "__y",
                "start": 619,
                "end": 622
              },
              "right": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "__x",
                  "start": 625,
                  "end": 628
                },
                "consequent": {
                  "type": "Literal",
                  "value": "good fellow",
                  "raw": "\"good fellow\"",
                  "start": 631,
                  "end": 644
                },
                "alternate": {
                  "type": "Literal",
                  "value": "liar",
                  "raw": "\"liar\"",
                  "start": 647,
                  "end": 653
                },
                "start": 625,
                "end": 653
              },
              "start": 619,
              "end": 653
            },
            "start": 619,
            "end": 654
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "Identifier",
                "name": "__z",
                "start": 705,
                "end": 708
              },
              "right": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Identifier",
                    "name": "__z",
                    "start": 711,
                    "end": 714
                  },
                  "operator": "===",
                  "right": {
                    "type": "Identifier",
                    "name": "__x",
                    "start": 719,
                    "end": 722
                  },
                  "start": 711,
                  "end": 722
                },
                "consequent": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1",
                  "start": 725,
                  "end": 726
                },
                "alternate": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0",
                  "start": 729,
                  "end": 730
                },
                "start": 711,
                "end": 730
              },
              "start": 705,
              "end": 730
            },
            "start": 705,
            "end": 731
          }
        ],
        "start": 601,
        "end": 791
      },
      "handler": {
        "type": "CatchClause",
        "param": {
          "type": "Identifier",
          "name": "e",
          "start": 799,
          "end": 800
        },
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ThrowStatement",
              "argument": {
                "type": "NewExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "Test262Error",
                  "start": 815,
                  "end": 827
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": "#1: Using declarated variable before it declaration is admitted",
                    "raw": "'#1: Using declarated variable before it declaration is admitted'",
                    "start": 828,
                    "end": 893
                  }
                ],
                "start": 811,
                "end": 894
              },
              "start": 805,
              "end": 895
            }
          ],
          "start": 802,
          "end": 897
        },
        "start": 792,
        "end": 897
      },
      "finalizer": null,
      "start": 597,
      "end": 897
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "assert",
            "start": 1070,
            "end": 1076
          },
          "property": {
            "type": "Identifier",
            "name": "throws",
            "start": 1077,
            "end": 1083
          },
          "optional": false,
          "computed": false,
          "start": 1070,
          "end": 1083
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "ReferenceError",
            "start": 1084,
            "end": 1098
          },
          {
            "type": "FunctionExpression",
            "id": null,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "__something__undefined",
                      "start": 1117,
                      "end": 1139
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "__something__undefined",
                      "start": 1142,
                      "end": 1164
                    },
                    "start": 1117,
                    "end": 1164
                  },
                  "start": 1117,
                  "end": 1165
                }
              ],
              "start": 1111,
              "end": 1167
            },
            "expression": false,
            "start": 1100,
            "end": 1167
          }
        ],
        "optional": false,
        "start": 1070,
        "end": 1168
      },
      "start": 1070,
      "end": 1169
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "BinaryExpression",
            "left": {
              "type": "Identifier",
              "name": "__y",
              "start": 1347,
              "end": 1350
            },
            "operator": "!==",
            "right": {
              "type": "Literal",
              "value": "liar",
              "raw": "\"liar\"",
              "start": 1355,
              "end": 1361
            },
            "start": 1347,
            "end": 1361
          },
          "start": 1346,
          "end": 1362
        },
        "operator": "&",
        "right": {
          "type": "ParenthesizedExpression",
          "expression": {
            "type": "BinaryExpression",
            "left": {
              "type": "Identifier",
              "name": "__z",
              "start": 1364,
              "end": 1367
            },
            "operator": "!==",
            "right": {
              "type": "Literal",
              "value": 1,
              "raw": "1",
              "start": 1372,
              "end": 1373
            },
            "start": 1364,
            "end": 1373
          },
          "start": 1363,
          "end": 1374
        },
        "start": 1346,
        "end": 1374
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1389,
                "end": 1401
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "BinaryExpression",
                    "left": {
                      "type": "BinaryExpression",
                      "left": {
                        "type": "Literal",
                        "value": "#3: (__y === \"liar\") and (__z === 1). Actual:  __y ===",
                        "raw": "'#3: (__y === \"liar\") and (__z === 1). Actual:  __y ==='",
                        "start": 1402,
                        "end": 1458
                      },
                      "operator": "+",
                      "right": {
                        "type": "Identifier",
                        "name": "__y",
                        "start": 1459,
                        "end": 1462
                      },
                      "start": 1402,
                      "end": 1462
                    },
                    "operator": "+",
                    "right": {
                      "type": "Literal",
                      "value": " and __z ===",
                      "raw": "' and __z ==='",
                      "start": 1463,
                      "end": 1477
                    },
                    "start": 1402,
                    "end": 1477
                  },
                  "operator": "+",
                  "right": {
                    "type": "Identifier",
                    "name": "__z",
                    "start": 1478,
                    "end": 1481
                  },
                  "start": 1402,
                  "end": 1481
                }
              ],
              "start": 1385,
              "end": 1484
            },
            "start": 1379,
            "end": 1485
          }
        ],
        "start": 1376,
        "end": 1487
      },
      "alternate": null,
      "start": 1342,
      "end": 1487
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "__x",
            "start": 1575,
            "end": 1578
          },
          "init": null,
          "start": 1575,
          "end": 1578
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "__y",
            "start": 1580,
            "end": 1583
          },
          "init": {
            "type": "Literal",
            "value": true,
            "raw": "true",
            "start": 1586,
            "end": 1590
          },
          "start": 1580,
          "end": 1590
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "__z",
            "start": 1592,
            "end": 1595
          },
          "init": {
            "type": "ConditionalExpression",
            "test": {
              "type": "Identifier",
              "name": "__y",
              "start": 1598,
              "end": 1601
            },
            "consequent": {
              "type": "Literal",
              "value": "smeagol",
              "raw": "\"smeagol\"",
              "start": 1604,
              "end": 1613
            },
            "alternate": {
              "type": "Literal",
              "value": "golum",
              "raw": "\"golum\"",
              "start": 1616,
              "end": 1623
            },
            "start": 1598,
            "end": 1623
          },
          "start": 1592,
          "end": 1623
        }
      ],
      "start": 1571,
      "end": 1624
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "UnaryExpression",
          "operator": "!",
          "argument": {
            "type": "Identifier",
            "name": "__y",
            "start": 1720,
            "end": 1723
          },
          "prefix": true,
          "start": 1719,
          "end": 1723
        },
        "operator": "&",
        "right": {
          "type": "UnaryExpression",
          "operator": "!",
          "argument": {
            "type": "ParenthesizedExpression",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "Identifier",
                "name": "__z",
                "start": 1726,
                "end": 1729
              },
              "right": {
                "type": "Literal",
                "value": "smeagol",
                "raw": "\"smeagol\"",
                "start": 1732,
                "end": 1741
              },
              "start": 1726,
              "end": 1741
            },
            "start": 1725,
            "end": 1742
          },
          "prefix": true,
          "start": 1724,
          "end": 1742
        },
        "start": 1719,
        "end": 1742
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 1757,
                "end": 1769
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "#4: A variable with an Initialiser is assigned the value of its AssignmentExpression when the VariableStatement is executed",
                  "raw": "'#4: A variable with an Initialiser is assigned the value of its AssignmentExpression when the VariableStatement is executed'",
                  "start": 1770,
                  "end": 1895
                }
              ],
              "start": 1753,
              "end": 1896
            },
            "start": 1747,
            "end": 1897
          }
        ],
        "start": 1744,
        "end": 1899
      },
      "alternate": null,
      "start": 1715,
      "end": 1899
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 1982
}