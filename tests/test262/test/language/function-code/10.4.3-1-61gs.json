{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "o",
            "start": 286,
            "end": 287
          },
          "init": {
            "type": "ObjectExpression",
            "properties": [],
            "start": 290,
            "end": 292
          },
          "start": 286,
          "end": 292
        }
      ],
      "start": 282,
      "end": 293
    },
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "x",
            "start": 298,
            "end": 299
          },
          "init": {
            "type": "Literal",
            "value": 2,
            "raw": "2",
            "start": 302,
            "end": 303
          },
          "start": 298,
          "end": 303
        }
      ],
      "start": 294,
      "end": 304
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "Object",
            "start": 305,
            "end": 311
          },
          "property": {
            "type": "Identifier",
            "name": "defineProperty",
            "start": 312,
            "end": 326
          },
          "optional": false,
          "computed": false,
          "start": 305,
          "end": 326
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "o",
            "start": 327,
            "end": 328
          },
          {
            "type": "Literal",
            "value": "foo",
            "raw": "\"foo\"",
            "start": 330,
            "end": 335
          },
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "kind": "init",
                "key": {
                  "type": "Identifier",
                  "name": "set",
                  "start": 339,
                  "end": 342
                },
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "async": false,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "stuff",
                      "start": 353,
                      "end": 358
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "Literal",
                          "value": "use strict",
                          "raw": "\"use strict\"",
                          "start": 362,
                          "end": 374
                        },
                        "directive": "use strict",
                        "start": 362,
                        "end": 375
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "x",
                            "start": 376,
                            "end": 377
                          },
                          "right": {
                            "type": "ThisExpression",
                            "start": 378,
                            "end": 382
                          },
                          "start": 376,
                          "end": 382
                        },
                        "start": 376,
                        "end": 383
                      }
                    ],
                    "start": 360,
                    "end": 385
                  },
                  "expression": false,
                  "start": 344,
                  "end": 385
                },
                "method": false,
                "shorthand": false,
                "computed": false,
                "start": 339,
                "end": 385
              }
            ],
            "start": 337,
            "end": 387
          }
        ],
        "optional": false,
        "start": 305,
        "end": 388
      },
      "start": 305,
      "end": 389
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "o",
            "start": 390,
            "end": 391
          },
          "property": {
            "type": "Identifier",
            "name": "foo",
            "start": 392,
            "end": 395
          },
          "optional": false,
          "computed": false,
          "start": 390,
          "end": 395
        },
        "right": {
          "type": "Literal",
          "value": 3,
          "raw": "3",
          "start": 398,
          "end": 399
        },
        "start": 390,
        "end": 399
      },
      "start": 390,
      "end": 400
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 405,
          "end": 406
        },
        "operator": "!==",
        "right": {
          "type": "Identifier",
          "name": "o",
          "start": 409,
          "end": 410
        },
        "start": 405,
        "end": 410
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "Literal",
              "value": "'this' had incorrect value!",
              "raw": "\"'this' had incorrect value!\"",
              "start": 424,
              "end": 453
            },
            "start": 418,
            "end": 454
          }
        ],
        "start": 412,
        "end": 456
      },
      "alternate": null,
      "start": 401,
      "end": 456
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 457
}