{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "regexp",
            "start": 265,
            "end": 271
          },
          "init": {
            "type": "Literal",
            "value": null,
            "raw": "/(?:)/g",
            "regex": {
              "pattern": "(?:)",
              "flags": "g"
            },
            "start": 274,
            "end": 281
          },
          "start": 265,
          "end": 281
        }
      ],
      "start": 261,
      "end": 282
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "regexp",
            "start": 288,
            "end": 294
          },
          "property": {
            "type": "Identifier",
            "name": "global",
            "start": 295,
            "end": 301
          },
          "optional": false,
          "computed": false,
          "start": 288,
          "end": 301
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 306,
          "end": 310
        },
        "start": 288,
        "end": 310
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 326,
                "end": 338
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1: var regexp = /(?:)/g; regexp.global === true. Actual: ",
                    "raw": "'#1: var regexp = /(?:)/g; regexp.global === true. Actual: '",
                    "start": 339,
                    "end": 399
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "regexp",
                        "start": 403,
                        "end": 409
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "global",
                        "start": 410,
                        "end": 416
                      },
                      "optional": false,
                      "computed": false,
                      "start": 403,
                      "end": 416
                    },
                    "start": 402,
                    "end": 417
                  },
                  "start": 339,
                  "end": 417
                }
              ],
              "start": 322,
              "end": 418
            },
            "start": 316,
            "end": 419
          }
        ],
        "start": 312,
        "end": 421
      },
      "alternate": null,
      "start": 284,
      "end": 421
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "regexp",
            "start": 438,
            "end": 444
          },
          "property": {
            "type": "Identifier",
            "name": "ignoreCase",
            "start": 445,
            "end": 455
          },
          "optional": false,
          "computed": false,
          "start": 438,
          "end": 455
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": false,
          "raw": "false",
          "start": 460,
          "end": 465
        },
        "start": 438,
        "end": 465
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 481,
                "end": 493
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#2: var regexp = /(?:)/g; regexp.ignoreCase === false. Actual: ",
                    "raw": "'#2: var regexp = /(?:)/g; regexp.ignoreCase === false. Actual: '",
                    "start": 494,
                    "end": 559
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "regexp",
                        "start": 563,
                        "end": 569
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "ignoreCase",
                        "start": 570,
                        "end": 580
                      },
                      "optional": false,
                      "computed": false,
                      "start": 563,
                      "end": 580
                    },
                    "start": 562,
                    "end": 581
                  },
                  "start": 494,
                  "end": 581
                }
              ],
              "start": 477,
              "end": 582
            },
            "start": 471,
            "end": 583
          }
        ],
        "start": 467,
        "end": 585
      },
      "alternate": null,
      "start": 434,
      "end": 585
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "regexp",
            "start": 601,
            "end": 607
          },
          "property": {
            "type": "Identifier",
            "name": "multiline",
            "start": 608,
            "end": 617
          },
          "optional": false,
          "computed": false,
          "start": 601,
          "end": 617
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": false,
          "raw": "false",
          "start": 622,
          "end": 627
        },
        "start": 601,
        "end": 627
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 643,
                "end": 655
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#3: var regexp = /(?:)/g; regexp.multiline === false. Actual: ",
                    "raw": "'#3: var regexp = /(?:)/g; regexp.multiline === false. Actual: '",
                    "start": 656,
                    "end": 720
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "regexp",
                        "start": 724,
                        "end": 730
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "multiline",
                        "start": 731,
                        "end": 740
                      },
                      "optional": false,
                      "computed": false,
                      "start": 724,
                      "end": 740
                    },
                    "start": 723,
                    "end": 741
                  },
                  "start": 656,
                  "end": 741
                }
              ],
              "start": 639,
              "end": 742
            },
            "start": 633,
            "end": 743
          }
        ],
        "start": 629,
        "end": 745
      },
      "alternate": null,
      "start": 597,
      "end": 745
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 746
}