{
  "type": "Program",
  "start": 0,
  "end": 746,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 262,
      "end": 284,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 266,
          "end": 283,
          "id": {
            "type": "Identifier",
            "start": 266,
            "end": 272,
            "name": "regexp"
          },
          "init": {
            "type": "Literal",
            "start": 275,
            "end": 283,
            "value": null,
            "raw": "/(?:)/gi",
            "regex": {
              "pattern": "(?:)",
              "flags": "gi"
            }
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "IfStatement",
      "start": 286,
      "end": 423,
      "test": {
        "type": "BinaryExpression",
        "start": 290,
        "end": 312,
        "left": {
          "type": "MemberExpression",
          "start": 290,
          "end": 303,
          "object": {
            "type": "Identifier",
            "start": 290,
            "end": 296,
            "name": "regexp"
          },
          "property": {
            "type": "Identifier",
            "start": 297,
            "end": 303,
            "name": "global"
          },
          "computed": false,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 308,
          "end": 312,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 314,
        "end": 423,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 318,
            "end": 421,
            "argument": {
              "type": "NewExpression",
              "start": 324,
              "end": 420,
              "callee": {
                "type": "Identifier",
                "start": 328,
                "end": 340,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 341,
                  "end": 419,
                  "left": {
                    "type": "Literal",
                    "start": 341,
                    "end": 401,
                    "value": "#1: var regexp = /(?:)/g; regexp.global === true. Actual: ",
                    "raw": "'#1: var regexp = /(?:)/g; regexp.global === true. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 404,
                    "end": 419,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 405,
                      "end": 418,
                      "object": {
                        "type": "Identifier",
                        "start": 405,
                        "end": 411,
                        "name": "regexp"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 412,
                        "end": 418,
                        "name": "global"
                      },
                      "computed": false,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 436,
      "end": 585,
      "test": {
        "type": "BinaryExpression",
        "start": 440,
        "end": 466,
        "left": {
          "type": "MemberExpression",
          "start": 440,
          "end": 457,
          "object": {
            "type": "Identifier",
            "start": 440,
            "end": 446,
            "name": "regexp"
          },
          "property": {
            "type": "Identifier",
            "start": 447,
            "end": 457,
            "name": "ignoreCase"
          },
          "computed": false,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 462,
          "end": 466,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 468,
        "end": 585,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 472,
            "end": 583,
            "argument": {
              "type": "NewExpression",
              "start": 478,
              "end": 582,
              "callee": {
                "type": "Identifier",
                "start": 482,
                "end": 494,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 495,
                  "end": 581,
                  "left": {
                    "type": "Literal",
                    "start": 495,
                    "end": 559,
                    "value": "#2: var regexp = /(?:)/g; regexp.ignoreCase === true. Actual: ",
                    "raw": "'#2: var regexp = /(?:)/g; regexp.ignoreCase === true. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 562,
                    "end": 581,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 563,
                      "end": 580,
                      "object": {
                        "type": "Identifier",
                        "start": 563,
                        "end": 569,
                        "name": "regexp"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 570,
                        "end": 580,
                        "name": "ignoreCase"
                      },
                      "computed": false,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 597,
      "end": 745,
      "test": {
        "type": "BinaryExpression",
        "start": 601,
        "end": 627,
        "left": {
          "type": "MemberExpression",
          "start": 601,
          "end": 617,
          "object": {
            "type": "Identifier",
            "start": 601,
            "end": 607,
            "name": "regexp"
          },
          "property": {
            "type": "Identifier",
            "start": 608,
            "end": 617,
            "name": "multiline"
          },
          "computed": false,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 622,
          "end": 627,
          "value": false,
          "raw": "false"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 629,
        "end": 745,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 633,
            "end": 743,
            "argument": {
              "type": "NewExpression",
              "start": 639,
              "end": 742,
              "callee": {
                "type": "Identifier",
                "start": 643,
                "end": 655,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 656,
                  "end": 741,
                  "left": {
                    "type": "Literal",
                    "start": 656,
                    "end": 720,
                    "value": "#3: var regexp = /(?:)/g; regexp.multiline === false. Actual: ",
                    "raw": "'#3: var regexp = /(?:)/g; regexp.multiline === false. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 723,
                    "end": 741,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 724,
                      "end": 740,
                      "object": {
                        "type": "Identifier",
                        "start": 724,
                        "end": 730,
                        "name": "regexp"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 731,
                        "end": 740,
                        "name": "multiline"
                      },
                      "computed": false,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}