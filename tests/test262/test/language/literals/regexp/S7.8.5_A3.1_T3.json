{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "kind": "var",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "regexp",
            "start": 265,
            "end": 271
          },
          "init": {
            "type": "Literal",
            "value": null,
            "raw": "/(?:)/m",
            "regex": {
              "pattern": "(?:)",
              "flags": "m"
            },
            "start": 274,
            "end": 281
          },
          "start": 265,
          "end": 281
        }
      ],
      "start": 261,
      "end": 282
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "regexp",
            "start": 288,
            "end": 294
          },
          "property": {
            "type": "Identifier",
            "name": "global",
            "start": 295,
            "end": 301
          },
          "optional": false,
          "computed": false,
          "start": 288,
          "end": 301
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": false,
          "raw": "false",
          "start": 306,
          "end": 311
        },
        "start": 288,
        "end": 311
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 327,
                "end": 339
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#1: var regexp = /(?:)/g; regexp.global === false. Actual: ",
                    "raw": "'#1: var regexp = /(?:)/g; regexp.global === false. Actual: '",
                    "start": 340,
                    "end": 401
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "regexp",
                        "start": 405,
                        "end": 411
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "global",
                        "start": 412,
                        "end": 418
                      },
                      "optional": false,
                      "computed": false,
                      "start": 405,
                      "end": 418
                    },
                    "start": 404,
                    "end": 419
                  },
                  "start": 340,
                  "end": 419
                }
              ],
              "start": 323,
              "end": 420
            },
            "start": 317,
            "end": 421
          }
        ],
        "start": 313,
        "end": 423
      },
      "alternate": null,
      "start": 284,
      "end": 423
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "regexp",
            "start": 440,
            "end": 446
          },
          "property": {
            "type": "Identifier",
            "name": "ignoreCase",
            "start": 447,
            "end": 457
          },
          "optional": false,
          "computed": false,
          "start": 440,
          "end": 457
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": false,
          "raw": "false",
          "start": 462,
          "end": 467
        },
        "start": 440,
        "end": 467
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 483,
                "end": 495
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#2: var regexp = /(?:)/g; regexp.ignoreCase === false. Actual: ",
                    "raw": "'#2: var regexp = /(?:)/g; regexp.ignoreCase === false. Actual: '",
                    "start": 496,
                    "end": 561
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "regexp",
                        "start": 565,
                        "end": 571
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "ignoreCase",
                        "start": 572,
                        "end": 582
                      },
                      "optional": false,
                      "computed": false,
                      "start": 565,
                      "end": 582
                    },
                    "start": 564,
                    "end": 583
                  },
                  "start": 496,
                  "end": 583
                }
              ],
              "start": 479,
              "end": 584
            },
            "start": 473,
            "end": 585
          }
        ],
        "start": 469,
        "end": 587
      },
      "alternate": null,
      "start": 436,
      "end": 587
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "regexp",
            "start": 603,
            "end": 609
          },
          "property": {
            "type": "Identifier",
            "name": "multiline",
            "start": 610,
            "end": 619
          },
          "optional": false,
          "computed": false,
          "start": 603,
          "end": 619
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "value": true,
          "raw": "true",
          "start": 624,
          "end": 628
        },
        "start": 603,
        "end": 628
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ThrowStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Test262Error",
                "start": 644,
                "end": 656
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Literal",
                    "value": "#3: var regexp = /(?:)/g; regexp.multiline === true. Actual: ",
                    "raw": "'#3: var regexp = /(?:)/g; regexp.multiline === true. Actual: '",
                    "start": 657,
                    "end": 720
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "expression": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "regexp",
                        "start": 724,
                        "end": 730
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "multiline",
                        "start": 731,
                        "end": 740
                      },
                      "optional": false,
                      "computed": false,
                      "start": 724,
                      "end": 740
                    },
                    "start": 723,
                    "end": 741
                  },
                  "start": 657,
                  "end": 741
                }
              ],
              "start": 640,
              "end": 742
            },
            "start": 634,
            "end": 743
          }
        ],
        "start": 630,
        "end": 745
      },
      "alternate": null,
      "start": 599,
      "end": 745
    }
  ],
  "sourceType": "script",
  "hashbang": null,
  "start": 0,
  "end": 746
}