{
  "type": "Program",
  "start": 0,
  "end": 363,
  "body": [
    {
      "type": "IfStatement",
      "start": 246,
      "end": 362,
      "test": {
        "type": "BinaryExpression",
        "start": 250,
        "end": 286,
        "left": {
          "type": "CallExpression",
          "start": 250,
          "end": 277,
          "callee": {
            "type": "MemberExpression",
            "start": 250,
            "end": 269,
            "object": {
              "type": "Identifier",
              "start": 250,
              "end": 256,
              "name": "String"
            },
            "property": {
              "type": "Identifier",
              "start": 257,
              "end": 269,
              "name": "fromCharCode"
            },
            "computed": false,
            "optional": false
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 270,
              "end": 276,
              "value": 0,
              "raw": "0x0000",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 282,
          "end": 286,
          "value": "\u0000",
          "raw": "\"\\0\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 288,
        "end": 362,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 292,
            "end": 360,
            "argument": {
              "type": "NewExpression",
              "start": 298,
              "end": 359,
              "callee": {
                "type": "Identifier",
                "start": 302,
                "end": 314,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 315,
                  "end": 358,
                  "value": "#1: String.fromCharCode(0x0000) === \"\\0\"",
                  "raw": "'#1: String.fromCharCode(0x0000) === \"\\\\0\"'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}