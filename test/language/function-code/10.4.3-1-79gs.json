{
  "type": "Program",
  "start": 0,
  "end": 432,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 307,
      "end": 318,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 311,
          "end": 317,
          "id": {
            "type": "Identifier",
            "start": 311,
            "end": 312,
            "name": "o"
          },
          "init": {
            "type": "ObjectExpression",
            "start": 315,
            "end": 317,
            "properties": []
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "FunctionDeclaration",
      "start": 319,
      "end": 365,
      "id": {
        "type": "Identifier",
        "start": 328,
        "end": 329,
        "name": "f"
      },
      "expression": false,
      "generator": false,
      "async": false,
      "params": [],
      "body": {
        "type": "BlockStatement",
        "start": 332,
        "end": 365,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 334,
            "end": 347,
            "expression": {
              "type": "Literal",
              "start": 334,
              "end": 346,
              "value": "use strict",
              "raw": "\"use strict\"",
              "regex": null,
              "bigint": null
            },
            "directive": "use strict"
          },
          {
            "type": "ReturnStatement",
            "start": 348,
            "end": 364,
            "argument": {
              "type": "BinaryExpression",
              "start": 355,
              "end": 363,
              "left": {
                "type": "ThisExpression",
                "start": 355,
                "end": 359
              },
              "operator": "===",
              "right": {
                "type": "Identifier",
                "start": 362,
                "end": 363,
                "name": "o"
              }
            }
          }
        ]
      }
    },
    {
      "type": "EmptyStatement",
      "start": 365,
      "end": 366
    },
    {
      "type": "IfStatement",
      "start": 367,
      "end": 431,
      "test": {
        "type": "UnaryExpression",
        "start": 371,
        "end": 386,
        "operator": "!",
        "prefix": true,
        "argument": {
          "type": "ParenthesizedExpression",
          "start": 373,
          "end": 386,
          "expression": {
            "type": "CallExpression",
            "start": 374,
            "end": 385,
            "callee": {
              "type": "CallExpression",
              "start": 374,
              "end": 383,
              "callee": {
                "type": "MemberExpression",
                "start": 374,
                "end": 380,
                "object": {
                  "type": "Identifier",
                  "start": 374,
                  "end": 375,
                  "name": "f"
                },
                "property": {
                  "type": "Identifier",
                  "start": 376,
                  "end": 380,
                  "name": "bind"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "start": 381,
                  "end": 382,
                  "name": "o"
                }
              ],
              "optional": false
            },
            "arguments": [],
            "optional": false
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 387,
        "end": 431,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 393,
            "end": 429,
            "argument": {
              "type": "Literal",
              "start": 399,
              "end": 428,
              "value": "'this' had incorrect value!",
              "raw": "\"'this' had incorrect value!\"",
              "regex": null,
              "bigint": null
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}