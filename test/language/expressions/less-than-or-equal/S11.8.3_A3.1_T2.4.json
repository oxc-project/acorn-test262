{
  "type": "Program",
  "start": 0,
  "end": 919,
  "body": [
    {
      "type": "IfStatement",
      "start": 470,
      "end": 561,
      "test": {
        "type": "BinaryExpression",
        "start": 474,
        "end": 498,
        "left": {
          "type": "BinaryExpression",
          "start": 474,
          "end": 488,
          "left": {
            "type": "Literal",
            "start": 474,
            "end": 475,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": "<=",
          "right": {
            "type": "Identifier",
            "start": 479,
            "end": 488,
            "name": "undefined"
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 493,
          "end": 498,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 500,
        "end": 561,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 504,
            "end": 559,
            "argument": {
              "type": "NewExpression",
              "start": 510,
              "end": 558,
              "callee": {
                "type": "Identifier",
                "start": 514,
                "end": 526,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 527,
                  "end": 557,
                  "value": "#1: 1 <= undefined === false",
                  "raw": "'#1: 1 <= undefined === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 573,
      "end": 664,
      "test": {
        "type": "BinaryExpression",
        "start": 577,
        "end": 601,
        "left": {
          "type": "BinaryExpression",
          "start": 577,
          "end": 591,
          "left": {
            "type": "Identifier",
            "start": 577,
            "end": 586,
            "name": "undefined"
          },
          "operator": "<=",
          "right": {
            "type": "Literal",
            "start": 590,
            "end": 591,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 596,
          "end": 601,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 603,
        "end": 664,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 607,
            "end": 662,
            "argument": {
              "type": "NewExpression",
              "start": 613,
              "end": 661,
              "callee": {
                "type": "Identifier",
                "start": 617,
                "end": 629,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 630,
                  "end": 660,
                  "value": "#2: undefined <= 1 === false",
                  "raw": "'#2: undefined <= 1 === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 676,
      "end": 791,
      "test": {
        "type": "BinaryExpression",
        "start": 680,
        "end": 716,
        "left": {
          "type": "BinaryExpression",
          "start": 680,
          "end": 706,
          "left": {
            "type": "NewExpression",
            "start": 680,
            "end": 693,
            "callee": {
              "type": "Identifier",
              "start": 684,
              "end": 690,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 691,
                "end": 692,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "<=",
          "right": {
            "type": "Identifier",
            "start": 697,
            "end": 706,
            "name": "undefined"
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 711,
          "end": 716,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 718,
        "end": 791,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 722,
            "end": 789,
            "argument": {
              "type": "NewExpression",
              "start": 728,
              "end": 788,
              "callee": {
                "type": "Identifier",
                "start": 732,
                "end": 744,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 745,
                  "end": 787,
                  "value": "#3: new Number(1) <= undefined === false",
                  "raw": "'#3: new Number(1) <= undefined === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 803,
      "end": 918,
      "test": {
        "type": "BinaryExpression",
        "start": 807,
        "end": 843,
        "left": {
          "type": "BinaryExpression",
          "start": 807,
          "end": 833,
          "left": {
            "type": "Identifier",
            "start": 807,
            "end": 816,
            "name": "undefined"
          },
          "operator": "<=",
          "right": {
            "type": "NewExpression",
            "start": 820,
            "end": 833,
            "callee": {
              "type": "Identifier",
              "start": 824,
              "end": 830,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 831,
                "end": 832,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 838,
          "end": 843,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 845,
        "end": 918,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 849,
            "end": 916,
            "argument": {
              "type": "NewExpression",
              "start": 855,
              "end": 915,
              "callee": {
                "type": "Identifier",
                "start": 859,
                "end": 871,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 872,
                  "end": 914,
                  "value": "#4: undefined <= new Number(1) === false",
                  "raw": "'#4: undefined <= new Number(1) === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}