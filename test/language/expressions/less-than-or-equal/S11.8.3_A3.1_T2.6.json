{
  "type": "Program",
  "start": 0,
  "end": 935,
  "body": [
    {
      "type": "IfStatement",
      "start": 470,
      "end": 565,
      "test": {
        "type": "BinaryExpression",
        "start": 474,
        "end": 500,
        "left": {
          "type": "BinaryExpression",
          "start": 474,
          "end": 490,
          "left": {
            "type": "Literal",
            "start": 474,
            "end": 477,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": "<=",
          "right": {
            "type": "Identifier",
            "start": 481,
            "end": 490,
            "name": "undefined"
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 495,
          "end": 500,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 502,
        "end": 565,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 506,
            "end": 563,
            "argument": {
              "type": "NewExpression",
              "start": 512,
              "end": 562,
              "callee": {
                "type": "Identifier",
                "start": 516,
                "end": 528,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 529,
                  "end": 561,
                  "value": "#1: \"1\" <= undefined === false",
                  "raw": "'#1: \"1\" <= undefined === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 577,
      "end": 672,
      "test": {
        "type": "BinaryExpression",
        "start": 581,
        "end": 607,
        "left": {
          "type": "BinaryExpression",
          "start": 581,
          "end": 597,
          "left": {
            "type": "Identifier",
            "start": 581,
            "end": 590,
            "name": "undefined"
          },
          "operator": "<=",
          "right": {
            "type": "Literal",
            "start": 594,
            "end": 597,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 602,
          "end": 607,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 609,
        "end": 672,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 613,
            "end": 670,
            "argument": {
              "type": "NewExpression",
              "start": 619,
              "end": 669,
              "callee": {
                "type": "Identifier",
                "start": 623,
                "end": 635,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 636,
                  "end": 668,
                  "value": "#2: undefined <= \"1\" === false",
                  "raw": "'#2: undefined <= \"1\" === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 684,
      "end": 803,
      "test": {
        "type": "BinaryExpression",
        "start": 688,
        "end": 726,
        "left": {
          "type": "BinaryExpression",
          "start": 688,
          "end": 716,
          "left": {
            "type": "NewExpression",
            "start": 688,
            "end": 703,
            "callee": {
              "type": "Identifier",
              "start": 692,
              "end": 698,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 699,
                "end": 702,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "<=",
          "right": {
            "type": "Identifier",
            "start": 707,
            "end": 716,
            "name": "undefined"
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 721,
          "end": 726,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 728,
        "end": 803,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 732,
            "end": 801,
            "argument": {
              "type": "NewExpression",
              "start": 738,
              "end": 800,
              "callee": {
                "type": "Identifier",
                "start": 742,
                "end": 754,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 755,
                  "end": 799,
                  "value": "#3: new String(\"1\") <= undefined === false",
                  "raw": "'#3: new String(\"1\") <= undefined === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 815,
      "end": 934,
      "test": {
        "type": "BinaryExpression",
        "start": 819,
        "end": 857,
        "left": {
          "type": "BinaryExpression",
          "start": 819,
          "end": 847,
          "left": {
            "type": "Identifier",
            "start": 819,
            "end": 828,
            "name": "undefined"
          },
          "operator": "<=",
          "right": {
            "type": "NewExpression",
            "start": 832,
            "end": 847,
            "callee": {
              "type": "Identifier",
              "start": 836,
              "end": 842,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 843,
                "end": 846,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 852,
          "end": 857,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 859,
        "end": 934,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 863,
            "end": 932,
            "argument": {
              "type": "NewExpression",
              "start": 869,
              "end": 931,
              "callee": {
                "type": "Identifier",
                "start": 873,
                "end": 885,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 886,
                  "end": 930,
                  "value": "#4: undefined <= new String(\"1\") === false",
                  "raw": "'#4: undefined <= new String(\"1\") === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}