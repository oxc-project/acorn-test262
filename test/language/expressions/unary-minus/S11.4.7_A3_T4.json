{
  "type": "Program",
  "start": 0,
  "end": 467,
  "body": [
    {
      "type": "IfStatement",
      "start": 257,
      "end": 369,
      "test": {
        "type": "BinaryExpression",
        "start": 261,
        "end": 284,
        "left": {
          "type": "CallExpression",
          "start": 261,
          "end": 275,
          "callee": {
            "type": "Identifier",
            "start": 261,
            "end": 266,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "UnaryExpression",
              "start": 267,
              "end": 274,
              "operator": "-",
              "prefix": true,
              "argument": {
                "type": "UnaryExpression",
                "start": 268,
                "end": 274,
                "operator": "void",
                "prefix": true,
                "argument": {
                  "type": "Literal",
                  "start": 273,
                  "end": 274,
                  "value": 0,
                  "raw": "0",
                  "regex": null,
                  "bigint": null
                }
              }
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 280,
          "end": 284,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 286,
        "end": 369,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 290,
            "end": 367,
            "argument": {
              "type": "NewExpression",
              "start": 296,
              "end": 366,
              "callee": {
                "type": "Identifier",
                "start": 300,
                "end": 312,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 313,
                  "end": 365,
                  "left": {
                    "type": "Literal",
                    "start": 313,
                    "end": 353,
                    "value": "#1: +void 0 === Not-a-Number. Actual: ",
                    "raw": "'#1: +void 0 === Not-a-Number. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 356,
                    "end": 365,
                    "expression": {
                      "type": "UnaryExpression",
                      "start": 357,
                      "end": 364,
                      "operator": "+",
                      "prefix": true,
                      "argument": {
                        "type": "UnaryExpression",
                        "start": 358,
                        "end": 364,
                        "operator": "void",
                        "prefix": true,
                        "argument": {
                          "type": "Literal",
                          "start": 363,
                          "end": 364,
                          "value": 0,
                          "raw": "0",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 381,
      "end": 466,
      "test": {
        "type": "BinaryExpression",
        "start": 385,
        "end": 396,
        "left": {
          "type": "UnaryExpression",
          "start": 385,
          "end": 390,
          "operator": "-",
          "prefix": true,
          "argument": {
            "type": "Literal",
            "start": 386,
            "end": 390,
            "value": null,
            "raw": "null",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 395,
          "end": 396,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 398,
        "end": 466,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 402,
            "end": 464,
            "argument": {
              "type": "NewExpression",
              "start": 408,
              "end": 463,
              "callee": {
                "type": "Identifier",
                "start": 412,
                "end": 424,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 425,
                  "end": 462,
                  "left": {
                    "type": "Literal",
                    "start": 425,
                    "end": 452,
                    "value": "#2: +null === 0. Actual: ",
                    "raw": "'#2: +null === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 455,
                    "end": 462,
                    "expression": {
                      "type": "UnaryExpression",
                      "start": 456,
                      "end": 461,
                      "operator": "+",
                      "prefix": true,
                      "argument": {
                        "type": "Literal",
                        "start": 457,
                        "end": 461,
                        "value": null,
                        "raw": "null",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}