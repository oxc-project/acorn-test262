{
  "type": "Program",
  "start": 0,
  "end": 1545,
  "body": [
    {
      "type": "IfStatement",
      "start": 384,
      "end": 481,
      "test": {
        "type": "BinaryExpression",
        "start": 388,
        "end": 403,
        "left": {
          "type": "BinaryExpression",
          "start": 388,
          "end": 397,
          "left": {
            "type": "Literal",
            "start": 388,
            "end": 392,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          },
          "operator": "<<",
          "right": {
            "type": "Literal",
            "start": 396,
            "end": 397,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 402,
          "end": 403,
          "value": 2,
          "raw": "2",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 405,
        "end": 481,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 409,
            "end": 479,
            "argument": {
              "type": "NewExpression",
              "start": 415,
              "end": 478,
              "callee": {
                "type": "Identifier",
                "start": 419,
                "end": 431,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 432,
                  "end": 477,
                  "left": {
                    "type": "Literal",
                    "start": 432,
                    "end": 463,
                    "value": "#1: true << 1 === 2. Actual: ",
                    "raw": "'#1: true << 1 === 2. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 466,
                    "end": 477,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 467,
                      "end": 476,
                      "left": {
                        "type": "Literal",
                        "start": 467,
                        "end": 471,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "<<",
                      "right": {
                        "type": "Literal",
                        "start": 475,
                        "end": 476,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 493,
      "end": 590,
      "test": {
        "type": "BinaryExpression",
        "start": 497,
        "end": 512,
        "left": {
          "type": "BinaryExpression",
          "start": 497,
          "end": 506,
          "left": {
            "type": "Literal",
            "start": 497,
            "end": 498,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": "<<",
          "right": {
            "type": "Literal",
            "start": 502,
            "end": 506,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 511,
          "end": 512,
          "value": 2,
          "raw": "2",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 514,
        "end": 590,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 518,
            "end": 588,
            "argument": {
              "type": "NewExpression",
              "start": 524,
              "end": 587,
              "callee": {
                "type": "Identifier",
                "start": 528,
                "end": 540,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 541,
                  "end": 586,
                  "left": {
                    "type": "Literal",
                    "start": 541,
                    "end": 572,
                    "value": "#2: 1 << true === 2. Actual: ",
                    "raw": "'#2: 1 << true === 2. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 575,
                    "end": 586,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 576,
                      "end": 585,
                      "left": {
                        "type": "Literal",
                        "start": 576,
                        "end": 577,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "<<",
                      "right": {
                        "type": "Literal",
                        "start": 581,
                        "end": 585,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 602,
      "end": 738,
      "test": {
        "type": "BinaryExpression",
        "start": 606,
        "end": 634,
        "left": {
          "type": "BinaryExpression",
          "start": 606,
          "end": 628,
          "left": {
            "type": "NewExpression",
            "start": 606,
            "end": 623,
            "callee": {
              "type": "Identifier",
              "start": 610,
              "end": 617,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 618,
                "end": 622,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "<<",
          "right": {
            "type": "Literal",
            "start": 627,
            "end": 628,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 633,
          "end": 634,
          "value": 2,
          "raw": "2",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 636,
        "end": 738,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 640,
            "end": 736,
            "argument": {
              "type": "NewExpression",
              "start": 646,
              "end": 735,
              "callee": {
                "type": "Identifier",
                "start": 650,
                "end": 662,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 663,
                  "end": 734,
                  "left": {
                    "type": "Literal",
                    "start": 663,
                    "end": 707,
                    "value": "#3: new Boolean(true) << 1 === 2. Actual: ",
                    "raw": "'#3: new Boolean(true) << 1 === 2. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 710,
                    "end": 734,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 711,
                      "end": 733,
                      "left": {
                        "type": "NewExpression",
                        "start": 711,
                        "end": 728,
                        "callee": {
                          "type": "Identifier",
                          "start": 715,
                          "end": 722,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 723,
                            "end": 727,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "<<",
                      "right": {
                        "type": "Literal",
                        "start": 732,
                        "end": 733,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 750,
      "end": 886,
      "test": {
        "type": "BinaryExpression",
        "start": 754,
        "end": 782,
        "left": {
          "type": "BinaryExpression",
          "start": 754,
          "end": 776,
          "left": {
            "type": "Literal",
            "start": 754,
            "end": 755,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": "<<",
          "right": {
            "type": "NewExpression",
            "start": 759,
            "end": 776,
            "callee": {
              "type": "Identifier",
              "start": 763,
              "end": 770,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 771,
                "end": 775,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 781,
          "end": 782,
          "value": 2,
          "raw": "2",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 784,
        "end": 886,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 788,
            "end": 884,
            "argument": {
              "type": "NewExpression",
              "start": 794,
              "end": 883,
              "callee": {
                "type": "Identifier",
                "start": 798,
                "end": 810,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 811,
                  "end": 882,
                  "left": {
                    "type": "Literal",
                    "start": 811,
                    "end": 855,
                    "value": "#4: 1 << new Boolean(true) === 2. Actual: ",
                    "raw": "'#4: 1 << new Boolean(true) === 2. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 858,
                    "end": 882,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 859,
                      "end": 881,
                      "left": {
                        "type": "Literal",
                        "start": 859,
                        "end": 860,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "<<",
                      "right": {
                        "type": "NewExpression",
                        "start": 864,
                        "end": 881,
                        "callee": {
                          "type": "Identifier",
                          "start": 868,
                          "end": 875,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 876,
                            "end": 880,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 898,
      "end": 1031,
      "test": {
        "type": "BinaryExpression",
        "start": 902,
        "end": 929,
        "left": {
          "type": "BinaryExpression",
          "start": 902,
          "end": 923,
          "left": {
            "type": "Literal",
            "start": 902,
            "end": 906,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          },
          "operator": "<<",
          "right": {
            "type": "NewExpression",
            "start": 910,
            "end": 923,
            "callee": {
              "type": "Identifier",
              "start": 914,
              "end": 920,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 921,
                "end": 922,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 928,
          "end": 929,
          "value": 2,
          "raw": "2",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 931,
        "end": 1031,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 935,
            "end": 1029,
            "argument": {
              "type": "NewExpression",
              "start": 941,
              "end": 1028,
              "callee": {
                "type": "Identifier",
                "start": 945,
                "end": 957,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 958,
                  "end": 1027,
                  "left": {
                    "type": "Literal",
                    "start": 958,
                    "end": 1001,
                    "value": "#5: true << new Number(1) === 2. Actual: ",
                    "raw": "'#5: true << new Number(1) === 2. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1004,
                    "end": 1027,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1005,
                      "end": 1026,
                      "left": {
                        "type": "Literal",
                        "start": 1005,
                        "end": 1009,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "<<",
                      "right": {
                        "type": "NewExpression",
                        "start": 1013,
                        "end": 1026,
                        "callee": {
                          "type": "Identifier",
                          "start": 1017,
                          "end": 1023,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1024,
                            "end": 1025,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1043,
      "end": 1176,
      "test": {
        "type": "BinaryExpression",
        "start": 1047,
        "end": 1074,
        "left": {
          "type": "BinaryExpression",
          "start": 1047,
          "end": 1068,
          "left": {
            "type": "NewExpression",
            "start": 1047,
            "end": 1060,
            "callee": {
              "type": "Identifier",
              "start": 1051,
              "end": 1057,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1058,
                "end": 1059,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "<<",
          "right": {
            "type": "Literal",
            "start": 1064,
            "end": 1068,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1073,
          "end": 1074,
          "value": 2,
          "raw": "2",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1076,
        "end": 1176,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1080,
            "end": 1174,
            "argument": {
              "type": "NewExpression",
              "start": 1086,
              "end": 1173,
              "callee": {
                "type": "Identifier",
                "start": 1090,
                "end": 1102,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1103,
                  "end": 1172,
                  "left": {
                    "type": "Literal",
                    "start": 1103,
                    "end": 1146,
                    "value": "#6: new Number(1) << true === 2. Actual: ",
                    "raw": "'#6: new Number(1) << true === 2. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1149,
                    "end": 1172,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1150,
                      "end": 1171,
                      "left": {
                        "type": "NewExpression",
                        "start": 1150,
                        "end": 1163,
                        "callee": {
                          "type": "Identifier",
                          "start": 1154,
                          "end": 1160,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1161,
                            "end": 1162,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "<<",
                      "right": {
                        "type": "Literal",
                        "start": 1167,
                        "end": 1171,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1188,
      "end": 1360,
      "test": {
        "type": "BinaryExpression",
        "start": 1192,
        "end": 1232,
        "left": {
          "type": "BinaryExpression",
          "start": 1192,
          "end": 1226,
          "left": {
            "type": "NewExpression",
            "start": 1192,
            "end": 1209,
            "callee": {
              "type": "Identifier",
              "start": 1196,
              "end": 1203,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1204,
                "end": 1208,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "<<",
          "right": {
            "type": "NewExpression",
            "start": 1213,
            "end": 1226,
            "callee": {
              "type": "Identifier",
              "start": 1217,
              "end": 1223,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1224,
                "end": 1225,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1231,
          "end": 1232,
          "value": 2,
          "raw": "2",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1234,
        "end": 1360,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1238,
            "end": 1358,
            "argument": {
              "type": "NewExpression",
              "start": 1244,
              "end": 1357,
              "callee": {
                "type": "Identifier",
                "start": 1248,
                "end": 1260,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1261,
                  "end": 1356,
                  "left": {
                    "type": "Literal",
                    "start": 1261,
                    "end": 1317,
                    "value": "#7: new Boolean(true) << new Number(1) === 2. Actual: ",
                    "raw": "'#7: new Boolean(true) << new Number(1) === 2. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1320,
                    "end": 1356,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1321,
                      "end": 1355,
                      "left": {
                        "type": "NewExpression",
                        "start": 1321,
                        "end": 1338,
                        "callee": {
                          "type": "Identifier",
                          "start": 1325,
                          "end": 1332,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1333,
                            "end": 1337,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "<<",
                      "right": {
                        "type": "NewExpression",
                        "start": 1342,
                        "end": 1355,
                        "callee": {
                          "type": "Identifier",
                          "start": 1346,
                          "end": 1352,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1353,
                            "end": 1354,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1372,
      "end": 1544,
      "test": {
        "type": "BinaryExpression",
        "start": 1376,
        "end": 1416,
        "left": {
          "type": "BinaryExpression",
          "start": 1376,
          "end": 1410,
          "left": {
            "type": "NewExpression",
            "start": 1376,
            "end": 1389,
            "callee": {
              "type": "Identifier",
              "start": 1380,
              "end": 1386,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1387,
                "end": 1388,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "<<",
          "right": {
            "type": "NewExpression",
            "start": 1393,
            "end": 1410,
            "callee": {
              "type": "Identifier",
              "start": 1397,
              "end": 1404,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1405,
                "end": 1409,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1415,
          "end": 1416,
          "value": 2,
          "raw": "2",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1418,
        "end": 1544,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1422,
            "end": 1542,
            "argument": {
              "type": "NewExpression",
              "start": 1428,
              "end": 1541,
              "callee": {
                "type": "Identifier",
                "start": 1432,
                "end": 1444,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1445,
                  "end": 1540,
                  "left": {
                    "type": "Literal",
                    "start": 1445,
                    "end": 1501,
                    "value": "#8: new Number(1) << new Boolean(true) === 2. Actual: ",
                    "raw": "'#8: new Number(1) << new Boolean(true) === 2. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1504,
                    "end": 1540,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1505,
                      "end": 1539,
                      "left": {
                        "type": "NewExpression",
                        "start": 1505,
                        "end": 1518,
                        "callee": {
                          "type": "Identifier",
                          "start": 1509,
                          "end": 1515,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1516,
                            "end": 1517,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "<<",
                      "right": {
                        "type": "NewExpression",
                        "start": 1522,
                        "end": 1539,
                        "callee": {
                          "type": "Identifier",
                          "start": 1526,
                          "end": 1533,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1534,
                            "end": 1538,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}