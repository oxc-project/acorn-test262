{
  "type": "Program",
  "start": 0,
  "end": 855,
  "body": [
    {
      "type": "IfStatement",
      "start": 358,
      "end": 455,
      "test": {
        "type": "BinaryExpression",
        "start": 362,
        "end": 377,
        "left": {
          "type": "BinaryExpression",
          "start": 362,
          "end": 371,
          "left": {
            "type": "Literal",
            "start": 362,
            "end": 363,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": "<<",
          "right": {
            "type": "Literal",
            "start": 367,
            "end": 371,
            "value": null,
            "raw": "null",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 376,
          "end": 377,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 379,
        "end": 455,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 383,
            "end": 453,
            "argument": {
              "type": "NewExpression",
              "start": 389,
              "end": 452,
              "callee": {
                "type": "Identifier",
                "start": 393,
                "end": 405,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 406,
                  "end": 451,
                  "left": {
                    "type": "Literal",
                    "start": 406,
                    "end": 437,
                    "value": "#1: 1 << null === 1. Actual: ",
                    "raw": "'#1: 1 << null === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 440,
                    "end": 451,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 441,
                      "end": 450,
                      "left": {
                        "type": "Literal",
                        "start": 441,
                        "end": 442,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "<<",
                      "right": {
                        "type": "Literal",
                        "start": 446,
                        "end": 450,
                        "value": null,
                        "raw": "null",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 467,
      "end": 564,
      "test": {
        "type": "BinaryExpression",
        "start": 471,
        "end": 486,
        "left": {
          "type": "BinaryExpression",
          "start": 471,
          "end": 480,
          "left": {
            "type": "Literal",
            "start": 471,
            "end": 475,
            "value": null,
            "raw": "null",
            "regex": null,
            "bigint": null
          },
          "operator": "<<",
          "right": {
            "type": "Literal",
            "start": 479,
            "end": 480,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 485,
          "end": 486,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 488,
        "end": 564,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 492,
            "end": 562,
            "argument": {
              "type": "NewExpression",
              "start": 498,
              "end": 561,
              "callee": {
                "type": "Identifier",
                "start": 502,
                "end": 514,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 515,
                  "end": 560,
                  "left": {
                    "type": "Literal",
                    "start": 515,
                    "end": 546,
                    "value": "#2: null << 1 === 0. Actual: ",
                    "raw": "'#2: null << 1 === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 549,
                    "end": 560,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 550,
                      "end": 559,
                      "left": {
                        "type": "Literal",
                        "start": 550,
                        "end": 554,
                        "value": null,
                        "raw": "null",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "<<",
                      "right": {
                        "type": "Literal",
                        "start": 558,
                        "end": 559,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 576,
      "end": 709,
      "test": {
        "type": "BinaryExpression",
        "start": 580,
        "end": 607,
        "left": {
          "type": "BinaryExpression",
          "start": 580,
          "end": 601,
          "left": {
            "type": "NewExpression",
            "start": 580,
            "end": 593,
            "callee": {
              "type": "Identifier",
              "start": 584,
              "end": 590,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 591,
                "end": 592,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "<<",
          "right": {
            "type": "Literal",
            "start": 597,
            "end": 601,
            "value": null,
            "raw": "null",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 606,
          "end": 607,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 609,
        "end": 709,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 613,
            "end": 707,
            "argument": {
              "type": "NewExpression",
              "start": 619,
              "end": 706,
              "callee": {
                "type": "Identifier",
                "start": 623,
                "end": 635,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 636,
                  "end": 705,
                  "left": {
                    "type": "Literal",
                    "start": 636,
                    "end": 679,
                    "value": "#3: new Number(1) << null === 1. Actual: ",
                    "raw": "'#3: new Number(1) << null === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 682,
                    "end": 705,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 683,
                      "end": 704,
                      "left": {
                        "type": "NewExpression",
                        "start": 683,
                        "end": 696,
                        "callee": {
                          "type": "Identifier",
                          "start": 687,
                          "end": 693,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 694,
                            "end": 695,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "<<",
                      "right": {
                        "type": "Literal",
                        "start": 700,
                        "end": 704,
                        "value": null,
                        "raw": "null",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 721,
      "end": 854,
      "test": {
        "type": "BinaryExpression",
        "start": 725,
        "end": 752,
        "left": {
          "type": "BinaryExpression",
          "start": 725,
          "end": 746,
          "left": {
            "type": "Literal",
            "start": 725,
            "end": 729,
            "value": null,
            "raw": "null",
            "regex": null,
            "bigint": null
          },
          "operator": "<<",
          "right": {
            "type": "NewExpression",
            "start": 733,
            "end": 746,
            "callee": {
              "type": "Identifier",
              "start": 737,
              "end": 743,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 744,
                "end": 745,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 751,
          "end": 752,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 754,
        "end": 854,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 758,
            "end": 852,
            "argument": {
              "type": "NewExpression",
              "start": 764,
              "end": 851,
              "callee": {
                "type": "Identifier",
                "start": 768,
                "end": 780,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 781,
                  "end": 850,
                  "left": {
                    "type": "Literal",
                    "start": 781,
                    "end": 824,
                    "value": "#4: null << new Number(1) === 0. Actual: ",
                    "raw": "'#4: null << new Number(1) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 827,
                    "end": 850,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 828,
                      "end": 849,
                      "left": {
                        "type": "Literal",
                        "start": 828,
                        "end": 832,
                        "value": null,
                        "raw": "null",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "<<",
                      "right": {
                        "type": "NewExpression",
                        "start": 836,
                        "end": 849,
                        "callee": {
                          "type": "Identifier",
                          "start": 840,
                          "end": 846,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 847,
                            "end": 848,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}