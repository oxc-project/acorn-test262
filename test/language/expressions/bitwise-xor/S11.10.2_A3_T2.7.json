{
  "type": "Program",
  "start": 0,
  "end": 890,
  "body": [
    {
      "type": "IfStatement",
      "start": 357,
      "end": 463,
      "test": {
        "type": "BinaryExpression",
        "start": 361,
        "end": 379,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 361,
          "end": 373,
          "expression": {
            "type": "BinaryExpression",
            "start": 362,
            "end": 372,
            "left": {
              "type": "Literal",
              "start": 362,
              "end": 365,
              "value": "1",
              "raw": "\"1\"",
              "regex": null,
              "bigint": null
            },
            "operator": "^",
            "right": {
              "type": "Literal",
              "start": 368,
              "end": 372,
              "value": null,
              "raw": "null",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 378,
          "end": 379,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 381,
        "end": 463,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 385,
            "end": 461,
            "argument": {
              "type": "NewExpression",
              "start": 391,
              "end": 460,
              "callee": {
                "type": "Identifier",
                "start": 395,
                "end": 407,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 408,
                  "end": 459,
                  "left": {
                    "type": "Literal",
                    "start": 408,
                    "end": 442,
                    "value": "#1: (\"1\" ^ null) === 1. Actual: ",
                    "raw": "'#1: (\"1\" ^ null) === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 445,
                    "end": 459,
                    "expression": {
                      "type": "ParenthesizedExpression",
                      "start": 446,
                      "end": 458,
                      "expression": {
                        "type": "BinaryExpression",
                        "start": 447,
                        "end": 457,
                        "left": {
                          "type": "Literal",
                          "start": 447,
                          "end": 450,
                          "value": "1",
                          "raw": "\"1\"",
                          "regex": null,
                          "bigint": null
                        },
                        "operator": "^",
                        "right": {
                          "type": "Literal",
                          "start": 453,
                          "end": 457,
                          "value": null,
                          "raw": "null",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 475,
      "end": 581,
      "test": {
        "type": "BinaryExpression",
        "start": 479,
        "end": 497,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 479,
          "end": 491,
          "expression": {
            "type": "BinaryExpression",
            "start": 480,
            "end": 490,
            "left": {
              "type": "Literal",
              "start": 480,
              "end": 484,
              "value": null,
              "raw": "null",
              "regex": null,
              "bigint": null
            },
            "operator": "^",
            "right": {
              "type": "Literal",
              "start": 487,
              "end": 490,
              "value": "1",
              "raw": "\"1\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 496,
          "end": 497,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 499,
        "end": 581,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 503,
            "end": 579,
            "argument": {
              "type": "NewExpression",
              "start": 509,
              "end": 578,
              "callee": {
                "type": "Identifier",
                "start": 513,
                "end": 525,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 526,
                  "end": 577,
                  "left": {
                    "type": "Literal",
                    "start": 526,
                    "end": 560,
                    "value": "#2: (null ^ \"1\") === 1. Actual: ",
                    "raw": "'#2: (null ^ \"1\") === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 563,
                    "end": 577,
                    "expression": {
                      "type": "ParenthesizedExpression",
                      "start": 564,
                      "end": 576,
                      "expression": {
                        "type": "BinaryExpression",
                        "start": 565,
                        "end": 575,
                        "left": {
                          "type": "Literal",
                          "start": 565,
                          "end": 569,
                          "value": null,
                          "raw": "null",
                          "regex": null,
                          "bigint": null
                        },
                        "operator": "^",
                        "right": {
                          "type": "Literal",
                          "start": 572,
                          "end": 575,
                          "value": "1",
                          "raw": "\"1\"",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 593,
      "end": 735,
      "test": {
        "type": "BinaryExpression",
        "start": 597,
        "end": 627,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 597,
          "end": 621,
          "expression": {
            "type": "BinaryExpression",
            "start": 598,
            "end": 620,
            "left": {
              "type": "NewExpression",
              "start": 598,
              "end": 613,
              "callee": {
                "type": "Identifier",
                "start": 602,
                "end": 608,
                "name": "String"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 609,
                  "end": 612,
                  "value": "1",
                  "raw": "\"1\"",
                  "regex": null,
                  "bigint": null
                }
              ]
            },
            "operator": "^",
            "right": {
              "type": "Literal",
              "start": 616,
              "end": 620,
              "value": null,
              "raw": "null",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 626,
          "end": 627,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 629,
        "end": 735,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 633,
            "end": 733,
            "argument": {
              "type": "NewExpression",
              "start": 639,
              "end": 732,
              "callee": {
                "type": "Identifier",
                "start": 643,
                "end": 655,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 656,
                  "end": 731,
                  "left": {
                    "type": "Literal",
                    "start": 656,
                    "end": 702,
                    "value": "#3: (new String(\"1\") ^ null) === 1. Actual: ",
                    "raw": "'#3: (new String(\"1\") ^ null) === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 705,
                    "end": 731,
                    "expression": {
                      "type": "ParenthesizedExpression",
                      "start": 706,
                      "end": 730,
                      "expression": {
                        "type": "BinaryExpression",
                        "start": 707,
                        "end": 729,
                        "left": {
                          "type": "NewExpression",
                          "start": 707,
                          "end": 722,
                          "callee": {
                            "type": "Identifier",
                            "start": 711,
                            "end": 717,
                            "name": "String"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 718,
                              "end": 721,
                              "value": "1",
                              "raw": "\"1\"",
                              "regex": null,
                              "bigint": null
                            }
                          ]
                        },
                        "operator": "^",
                        "right": {
                          "type": "Literal",
                          "start": 725,
                          "end": 729,
                          "value": null,
                          "raw": "null",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 747,
      "end": 889,
      "test": {
        "type": "BinaryExpression",
        "start": 751,
        "end": 781,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 751,
          "end": 775,
          "expression": {
            "type": "BinaryExpression",
            "start": 752,
            "end": 774,
            "left": {
              "type": "Literal",
              "start": 752,
              "end": 756,
              "value": null,
              "raw": "null",
              "regex": null,
              "bigint": null
            },
            "operator": "^",
            "right": {
              "type": "NewExpression",
              "start": 759,
              "end": 774,
              "callee": {
                "type": "Identifier",
                "start": 763,
                "end": 769,
                "name": "String"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 770,
                  "end": 773,
                  "value": "1",
                  "raw": "\"1\"",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 780,
          "end": 781,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 783,
        "end": 889,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 787,
            "end": 887,
            "argument": {
              "type": "NewExpression",
              "start": 793,
              "end": 886,
              "callee": {
                "type": "Identifier",
                "start": 797,
                "end": 809,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 810,
                  "end": 885,
                  "left": {
                    "type": "Literal",
                    "start": 810,
                    "end": 856,
                    "value": "#4: (null ^ new String(\"1\")) === 1. Actual: ",
                    "raw": "'#4: (null ^ new String(\"1\")) === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 859,
                    "end": 885,
                    "expression": {
                      "type": "ParenthesizedExpression",
                      "start": 860,
                      "end": 884,
                      "expression": {
                        "type": "BinaryExpression",
                        "start": 861,
                        "end": 883,
                        "left": {
                          "type": "Literal",
                          "start": 861,
                          "end": 865,
                          "value": null,
                          "raw": "null",
                          "regex": null,
                          "bigint": null
                        },
                        "operator": "^",
                        "right": {
                          "type": "NewExpression",
                          "start": 868,
                          "end": 883,
                          "callee": {
                            "type": "Identifier",
                            "start": 872,
                            "end": 878,
                            "name": "String"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 879,
                              "end": 882,
                              "value": "1",
                              "raw": "\"1\"",
                              "regex": null,
                              "bigint": null
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}