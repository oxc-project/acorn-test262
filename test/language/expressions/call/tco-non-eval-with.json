{
  "type": "Program",
  "start": 0,
  "end": 1131,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 878,
      "end": 896,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 882,
          "end": 895,
          "id": {
            "type": "Identifier",
            "start": 882,
            "end": 891,
            "name": "callCount"
          },
          "init": {
            "type": "Literal",
            "start": 894,
            "end": 895,
            "value": 0,
            "raw": "0",
            "regex": null,
            "bigint": null
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "start": 898,
      "end": 916,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 902,
          "end": 903,
          "id": {
            "type": "Identifier",
            "start": 902,
            "end": 903,
            "name": "f"
          },
          "init": null
        },
        {
          "type": "VariableDeclarator",
          "start": 905,
          "end": 915,
          "id": {
            "type": "Identifier",
            "start": 905,
            "end": 910,
            "name": "scope"
          },
          "init": {
            "type": "ObjectExpression",
            "start": 913,
            "end": 915,
            "properties": []
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "WithStatement",
      "start": 917,
      "end": 1060,
      "object": {
        "type": "Identifier",
        "start": 923,
        "end": 928,
        "name": "scope"
      },
      "body": {
        "type": "BlockStatement",
        "start": 930,
        "end": 1060,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 934,
            "end": 1058,
            "expression": {
              "type": "AssignmentExpression",
              "start": 934,
              "end": 1058,
              "operator": "=",
              "left": {
                "type": "Identifier",
                "start": 934,
                "end": 935,
                "name": "f"
              },
              "right": {
                "type": "FunctionExpression",
                "start": 938,
                "end": 1058,
                "id": null,
                "expression": false,
                "generator": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 948,
                    "end": 949,
                    "name": "n"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 951,
                  "end": 1058,
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 957,
                      "end": 970,
                      "expression": {
                        "type": "Literal",
                        "start": 957,
                        "end": 969,
                        "value": "use strict",
                        "raw": "\"use strict\"",
                        "regex": null,
                        "bigint": null
                      },
                      "directive": "use strict"
                    },
                    {
                      "type": "IfStatement",
                      "start": 975,
                      "end": 1030,
                      "test": {
                        "type": "BinaryExpression",
                        "start": 979,
                        "end": 986,
                        "left": {
                          "type": "Identifier",
                          "start": 979,
                          "end": 980,
                          "name": "n"
                        },
                        "operator": "===",
                        "right": {
                          "type": "Literal",
                          "start": 985,
                          "end": 986,
                          "value": 0,
                          "raw": "0",
                          "regex": null,
                          "bigint": null
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "start": 988,
                        "end": 1030,
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "start": 996,
                            "end": 1010,
                            "expression": {
                              "type": "AssignmentExpression",
                              "start": 996,
                              "end": 1010,
                              "operator": "+=",
                              "left": {
                                "type": "Identifier",
                                "start": 996,
                                "end": 1005,
                                "name": "callCount"
                              },
                              "right": {
                                "type": "Literal",
                                "start": 1009,
                                "end": 1010,
                                "value": 1,
                                "raw": "1",
                                "regex": null,
                                "bigint": null
                              }
                            }
                          },
                          {
                            "type": "ReturnStatement",
                            "start": 1017,
                            "end": 1024,
                            "argument": null
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ReturnStatement",
                      "start": 1035,
                      "end": 1054,
                      "argument": {
                        "type": "CallExpression",
                        "start": 1042,
                        "end": 1053,
                        "callee": {
                          "type": "Identifier",
                          "start": 1042,
                          "end": 1046,
                          "name": "eval"
                        },
                        "arguments": [
                          {
                            "type": "BinaryExpression",
                            "start": 1047,
                            "end": 1052,
                            "left": {
                              "type": "Identifier",
                              "start": 1047,
                              "end": 1048,
                              "name": "n"
                            },
                            "operator": "-",
                            "right": {
                              "type": "Literal",
                              "start": 1051,
                              "end": 1052,
                              "value": 1,
                              "raw": "1",
                              "regex": null,
                              "bigint": null
                            }
                          }
                        ],
                        "optional": false
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1061,
      "end": 1076,
      "expression": {
        "type": "AssignmentExpression",
        "start": 1061,
        "end": 1075,
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "start": 1061,
          "end": 1071,
          "object": {
            "type": "Identifier",
            "start": 1061,
            "end": 1066,
            "name": "scope"
          },
          "property": {
            "type": "Identifier",
            "start": 1067,
            "end": 1071,
            "name": "eval"
          },
          "computed": false,
          "optional": false
        },
        "right": {
          "type": "Identifier",
          "start": 1074,
          "end": 1075,
          "name": "f"
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1078,
      "end": 1097,
      "expression": {
        "type": "CallExpression",
        "start": 1078,
        "end": 1096,
        "callee": {
          "type": "Identifier",
          "start": 1078,
          "end": 1079,
          "name": "f"
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1080,
            "end": 1095,
            "name": "$MAX_ITERATIONS"
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1099,
      "end": 1130,
      "expression": {
        "type": "CallExpression",
        "start": 1099,
        "end": 1129,
        "callee": {
          "type": "MemberExpression",
          "start": 1099,
          "end": 1115,
          "object": {
            "type": "Identifier",
            "start": 1099,
            "end": 1105,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1106,
            "end": 1115,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1116,
            "end": 1125,
            "name": "callCount"
          },
          {
            "type": "Literal",
            "start": 1127,
            "end": 1128,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}