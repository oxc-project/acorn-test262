{
  "type": "Program",
  "start": 0,
  "end": 896,
  "body": [
    {
      "type": "TryStatement",
      "start": 318,
      "end": 589,
      "block": {
        "type": "BlockStatement",
        "start": 322,
        "end": 442,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 326,
            "end": 342,
            "expression": {
              "type": "CallExpression",
              "start": 326,
              "end": 341,
              "callee": {
                "type": "NewExpression",
                "start": 326,
                "end": 339,
                "callee": {
                  "type": "Identifier",
                  "start": 330,
                  "end": 336,
                  "name": "Number"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "start": 337,
                    "end": 338,
                    "value": 1,
                    "raw": "1",
                    "regex": null,
                    "bigint": null
                  }
                ]
              },
              "arguments": [],
              "optional": false
            }
          },
          {
            "type": "ThrowStatement",
            "start": 345,
            "end": 439,
            "argument": {
              "type": "NewExpression",
              "start": 351,
              "end": 438,
              "callee": {
                "type": "Identifier",
                "start": 355,
                "end": 367,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 368,
                  "end": 437,
                  "left": {
                    "type": "Literal",
                    "start": 368,
                    "end": 417,
                    "value": "#1.1: new Number(1)() throw TypeError. Actual: ",
                    "raw": "'#1.1: new Number(1)() throw TypeError. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 420,
                    "end": 437,
                    "expression": {
                      "type": "CallExpression",
                      "start": 421,
                      "end": 436,
                      "callee": {
                        "type": "NewExpression",
                        "start": 421,
                        "end": 434,
                        "callee": {
                          "type": "Identifier",
                          "start": 425,
                          "end": 431,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 432,
                            "end": 433,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "arguments": [],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 443,
        "end": 589,
        "param": {
          "type": "Identifier",
          "start": 450,
          "end": 451,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 453,
          "end": 589,
          "body": [
            {
              "type": "IfStatement",
              "start": 457,
              "end": 587,
              "test": {
                "type": "BinaryExpression",
                "start": 461,
                "end": 494,
                "left": {
                  "type": "ParenthesizedExpression",
                  "start": 461,
                  "end": 485,
                  "expression": {
                    "type": "BinaryExpression",
                    "start": 462,
                    "end": 484,
                    "left": {
                      "type": "Identifier",
                      "start": 462,
                      "end": 463,
                      "name": "e"
                    },
                    "operator": "instanceof",
                    "right": {
                      "type": "Identifier",
                      "start": 475,
                      "end": 484,
                      "name": "TypeError"
                    }
                  }
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 490,
                  "end": 494,
                  "value": true,
                  "raw": "true",
                  "regex": null,
                  "bigint": null
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "start": 496,
                "end": 587,
                "body": [
                  {
                    "type": "ThrowStatement",
                    "start": 502,
                    "end": 582,
                    "argument": {
                      "type": "NewExpression",
                      "start": 508,
                      "end": 581,
                      "callee": {
                        "type": "Identifier",
                        "start": 512,
                        "end": 524,
                        "name": "Test262Error"
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "start": 525,
                          "end": 580,
                          "left": {
                            "type": "Literal",
                            "start": 525,
                            "end": 574,
                            "value": "#1.2: new Number(1)() throw TypeError. Actual: ",
                            "raw": "'#1.2: new Number(1)() throw TypeError. Actual: '",
                            "regex": null,
                            "bigint": null
                          },
                          "operator": "+",
                          "right": {
                            "type": "ParenthesizedExpression",
                            "start": 577,
                            "end": 580,
                            "expression": {
                              "type": "Identifier",
                              "start": 578,
                              "end": 579,
                              "name": "e"
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    },
    {
      "type": "TryStatement",
      "start": 601,
      "end": 895,
      "block": {
        "type": "BlockStatement",
        "start": 605,
        "end": 737,
        "body": [
          {
            "type": "VariableDeclaration",
            "start": 609,
            "end": 631,
            "declarations": [
              {
                "type": "VariableDeclarator",
                "start": 613,
                "end": 630,
                "id": {
                  "type": "Identifier",
                  "start": 613,
                  "end": 614,
                  "name": "x"
                },
                "init": {
                  "type": "NewExpression",
                  "start": 617,
                  "end": 630,
                  "callee": {
                    "type": "Identifier",
                    "start": 621,
                    "end": 627,
                    "name": "Number"
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "start": 628,
                      "end": 629,
                      "value": 1,
                      "raw": "1",
                      "regex": null,
                      "bigint": null
                    }
                  ]
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "ExpressionStatement",
            "start": 634,
            "end": 638,
            "expression": {
              "type": "CallExpression",
              "start": 634,
              "end": 637,
              "callee": {
                "type": "Identifier",
                "start": 634,
                "end": 635,
                "name": "x"
              },
              "arguments": [],
              "optional": false
            }
          },
          {
            "type": "ThrowStatement",
            "start": 641,
            "end": 734,
            "argument": {
              "type": "NewExpression",
              "start": 647,
              "end": 733,
              "callee": {
                "type": "Identifier",
                "start": 651,
                "end": 663,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 664,
                  "end": 732,
                  "left": {
                    "type": "Literal",
                    "start": 664,
                    "end": 724,
                    "value": "#2.1: var x = new Number(1); x() throw TypeError. Actual: ",
                    "raw": "'#2.1: var x = new Number(1); x() throw TypeError. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 727,
                    "end": 732,
                    "expression": {
                      "type": "CallExpression",
                      "start": 728,
                      "end": 731,
                      "callee": {
                        "type": "Identifier",
                        "start": 728,
                        "end": 729,
                        "name": "x"
                      },
                      "arguments": [],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 738,
        "end": 895,
        "param": {
          "type": "Identifier",
          "start": 745,
          "end": 746,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 748,
          "end": 895,
          "body": [
            {
              "type": "IfStatement",
              "start": 752,
              "end": 893,
              "test": {
                "type": "BinaryExpression",
                "start": 756,
                "end": 789,
                "left": {
                  "type": "ParenthesizedExpression",
                  "start": 756,
                  "end": 780,
                  "expression": {
                    "type": "BinaryExpression",
                    "start": 757,
                    "end": 779,
                    "left": {
                      "type": "Identifier",
                      "start": 757,
                      "end": 758,
                      "name": "e"
                    },
                    "operator": "instanceof",
                    "right": {
                      "type": "Identifier",
                      "start": 770,
                      "end": 779,
                      "name": "TypeError"
                    }
                  }
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 785,
                  "end": 789,
                  "value": true,
                  "raw": "true",
                  "regex": null,
                  "bigint": null
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "start": 791,
                "end": 893,
                "body": [
                  {
                    "type": "ThrowStatement",
                    "start": 797,
                    "end": 888,
                    "argument": {
                      "type": "NewExpression",
                      "start": 803,
                      "end": 887,
                      "callee": {
                        "type": "Identifier",
                        "start": 807,
                        "end": 819,
                        "name": "Test262Error"
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "start": 820,
                          "end": 886,
                          "left": {
                            "type": "Literal",
                            "start": 820,
                            "end": 880,
                            "value": "#2.2: var x = new Number(1); x() throw TypeError. Actual: ",
                            "raw": "'#2.2: var x = new Number(1); x() throw TypeError. Actual: '",
                            "regex": null,
                            "bigint": null
                          },
                          "operator": "+",
                          "right": {
                            "type": "ParenthesizedExpression",
                            "start": 883,
                            "end": 886,
                            "expression": {
                              "type": "Identifier",
                              "start": 884,
                              "end": 885,
                              "name": "e"
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}