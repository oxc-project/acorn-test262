{
  "type": "Program",
  "start": 0,
  "end": 1567,
  "body": [
    {
      "type": "IfStatement",
      "start": 382,
      "end": 482,
      "test": {
        "type": "BinaryExpression",
        "start": 386,
        "end": 402,
        "left": {
          "type": "BinaryExpression",
          "start": 386,
          "end": 396,
          "left": {
            "type": "Literal",
            "start": 386,
            "end": 390,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          },
          "operator": "/",
          "right": {
            "type": "Literal",
            "start": 393,
            "end": 396,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 401,
          "end": 402,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 404,
        "end": 482,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 408,
            "end": 480,
            "argument": {
              "type": "NewExpression",
              "start": 414,
              "end": 479,
              "callee": {
                "type": "Identifier",
                "start": 418,
                "end": 430,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 431,
                  "end": 478,
                  "left": {
                    "type": "Literal",
                    "start": 431,
                    "end": 463,
                    "value": "#1: true / \"1\" === 1. Actual: ",
                    "raw": "'#1: true / \"1\" === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 466,
                    "end": 478,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 467,
                      "end": 477,
                      "left": {
                        "type": "Literal",
                        "start": 467,
                        "end": 471,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "/",
                      "right": {
                        "type": "Literal",
                        "start": 474,
                        "end": 477,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 494,
      "end": 594,
      "test": {
        "type": "BinaryExpression",
        "start": 498,
        "end": 514,
        "left": {
          "type": "BinaryExpression",
          "start": 498,
          "end": 508,
          "left": {
            "type": "Literal",
            "start": 498,
            "end": 501,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": "/",
          "right": {
            "type": "Literal",
            "start": 504,
            "end": 508,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 513,
          "end": 514,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 516,
        "end": 594,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 520,
            "end": 592,
            "argument": {
              "type": "NewExpression",
              "start": 526,
              "end": 591,
              "callee": {
                "type": "Identifier",
                "start": 530,
                "end": 542,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 543,
                  "end": 590,
                  "left": {
                    "type": "Literal",
                    "start": 543,
                    "end": 575,
                    "value": "#2: \"1\" / true === 1. Actual: ",
                    "raw": "'#2: \"1\" / true === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 578,
                    "end": 590,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 579,
                      "end": 589,
                      "left": {
                        "type": "Literal",
                        "start": 579,
                        "end": 582,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "/",
                      "right": {
                        "type": "Literal",
                        "start": 585,
                        "end": 589,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 606,
      "end": 745,
      "test": {
        "type": "BinaryExpression",
        "start": 610,
        "end": 639,
        "left": {
          "type": "BinaryExpression",
          "start": 610,
          "end": 633,
          "left": {
            "type": "NewExpression",
            "start": 610,
            "end": 627,
            "callee": {
              "type": "Identifier",
              "start": 614,
              "end": 621,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 622,
                "end": 626,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "/",
          "right": {
            "type": "Literal",
            "start": 630,
            "end": 633,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 638,
          "end": 639,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 641,
        "end": 745,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 645,
            "end": 743,
            "argument": {
              "type": "NewExpression",
              "start": 651,
              "end": 742,
              "callee": {
                "type": "Identifier",
                "start": 655,
                "end": 667,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 668,
                  "end": 741,
                  "left": {
                    "type": "Literal",
                    "start": 668,
                    "end": 713,
                    "value": "#3: new Boolean(true) / \"1\" === 1. Actual: ",
                    "raw": "'#3: new Boolean(true) / \"1\" === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 716,
                    "end": 741,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 717,
                      "end": 740,
                      "left": {
                        "type": "NewExpression",
                        "start": 717,
                        "end": 734,
                        "callee": {
                          "type": "Identifier",
                          "start": 721,
                          "end": 728,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 729,
                            "end": 733,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "/",
                      "right": {
                        "type": "Literal",
                        "start": 737,
                        "end": 740,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 757,
      "end": 896,
      "test": {
        "type": "BinaryExpression",
        "start": 761,
        "end": 790,
        "left": {
          "type": "BinaryExpression",
          "start": 761,
          "end": 784,
          "left": {
            "type": "Literal",
            "start": 761,
            "end": 764,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": "/",
          "right": {
            "type": "NewExpression",
            "start": 767,
            "end": 784,
            "callee": {
              "type": "Identifier",
              "start": 771,
              "end": 778,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 779,
                "end": 783,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 789,
          "end": 790,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 792,
        "end": 896,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 796,
            "end": 894,
            "argument": {
              "type": "NewExpression",
              "start": 802,
              "end": 893,
              "callee": {
                "type": "Identifier",
                "start": 806,
                "end": 818,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 819,
                  "end": 892,
                  "left": {
                    "type": "Literal",
                    "start": 819,
                    "end": 864,
                    "value": "#4: \"1\" / new Boolean(true) === 1. Actual: ",
                    "raw": "'#4: \"1\" / new Boolean(true) === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 867,
                    "end": 892,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 868,
                      "end": 891,
                      "left": {
                        "type": "Literal",
                        "start": 868,
                        "end": 871,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "/",
                      "right": {
                        "type": "NewExpression",
                        "start": 874,
                        "end": 891,
                        "callee": {
                          "type": "Identifier",
                          "start": 878,
                          "end": 885,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 886,
                            "end": 890,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 908,
      "end": 1044,
      "test": {
        "type": "BinaryExpression",
        "start": 912,
        "end": 940,
        "left": {
          "type": "BinaryExpression",
          "start": 912,
          "end": 934,
          "left": {
            "type": "Literal",
            "start": 912,
            "end": 916,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          },
          "operator": "/",
          "right": {
            "type": "NewExpression",
            "start": 919,
            "end": 934,
            "callee": {
              "type": "Identifier",
              "start": 923,
              "end": 929,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 930,
                "end": 933,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 939,
          "end": 940,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 942,
        "end": 1044,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 946,
            "end": 1042,
            "argument": {
              "type": "NewExpression",
              "start": 952,
              "end": 1041,
              "callee": {
                "type": "Identifier",
                "start": 956,
                "end": 968,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 969,
                  "end": 1040,
                  "left": {
                    "type": "Literal",
                    "start": 969,
                    "end": 1013,
                    "value": "#5: true / new String(\"1\") === 1. Actual: ",
                    "raw": "'#5: true / new String(\"1\") === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1016,
                    "end": 1040,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1017,
                      "end": 1039,
                      "left": {
                        "type": "Literal",
                        "start": 1017,
                        "end": 1021,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "/",
                      "right": {
                        "type": "NewExpression",
                        "start": 1024,
                        "end": 1039,
                        "callee": {
                          "type": "Identifier",
                          "start": 1028,
                          "end": 1034,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1035,
                            "end": 1038,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1056,
      "end": 1192,
      "test": {
        "type": "BinaryExpression",
        "start": 1060,
        "end": 1088,
        "left": {
          "type": "BinaryExpression",
          "start": 1060,
          "end": 1082,
          "left": {
            "type": "NewExpression",
            "start": 1060,
            "end": 1075,
            "callee": {
              "type": "Identifier",
              "start": 1064,
              "end": 1070,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1071,
                "end": 1074,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "/",
          "right": {
            "type": "Literal",
            "start": 1078,
            "end": 1082,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1087,
          "end": 1088,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1090,
        "end": 1192,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1094,
            "end": 1190,
            "argument": {
              "type": "NewExpression",
              "start": 1100,
              "end": 1189,
              "callee": {
                "type": "Identifier",
                "start": 1104,
                "end": 1116,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1117,
                  "end": 1188,
                  "left": {
                    "type": "Literal",
                    "start": 1117,
                    "end": 1161,
                    "value": "#6: new String(\"1\") / true === 1. Actual: ",
                    "raw": "'#6: new String(\"1\") / true === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1164,
                    "end": 1188,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1165,
                      "end": 1187,
                      "left": {
                        "type": "NewExpression",
                        "start": 1165,
                        "end": 1180,
                        "callee": {
                          "type": "Identifier",
                          "start": 1169,
                          "end": 1175,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1176,
                            "end": 1179,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "/",
                      "right": {
                        "type": "Literal",
                        "start": 1183,
                        "end": 1187,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1204,
      "end": 1379,
      "test": {
        "type": "BinaryExpression",
        "start": 1208,
        "end": 1249,
        "left": {
          "type": "BinaryExpression",
          "start": 1208,
          "end": 1243,
          "left": {
            "type": "NewExpression",
            "start": 1208,
            "end": 1225,
            "callee": {
              "type": "Identifier",
              "start": 1212,
              "end": 1219,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1220,
                "end": 1224,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "/",
          "right": {
            "type": "NewExpression",
            "start": 1228,
            "end": 1243,
            "callee": {
              "type": "Identifier",
              "start": 1232,
              "end": 1238,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1239,
                "end": 1242,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1248,
          "end": 1249,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1251,
        "end": 1379,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1255,
            "end": 1377,
            "argument": {
              "type": "NewExpression",
              "start": 1261,
              "end": 1376,
              "callee": {
                "type": "Identifier",
                "start": 1265,
                "end": 1277,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1278,
                  "end": 1375,
                  "left": {
                    "type": "Literal",
                    "start": 1278,
                    "end": 1335,
                    "value": "#7: new Boolean(true) / new String(\"1\") === 1. Actual: ",
                    "raw": "'#7: new Boolean(true) / new String(\"1\") === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1338,
                    "end": 1375,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1339,
                      "end": 1374,
                      "left": {
                        "type": "NewExpression",
                        "start": 1339,
                        "end": 1356,
                        "callee": {
                          "type": "Identifier",
                          "start": 1343,
                          "end": 1350,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1351,
                            "end": 1355,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "/",
                      "right": {
                        "type": "NewExpression",
                        "start": 1359,
                        "end": 1374,
                        "callee": {
                          "type": "Identifier",
                          "start": 1363,
                          "end": 1369,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1370,
                            "end": 1373,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1391,
      "end": 1566,
      "test": {
        "type": "BinaryExpression",
        "start": 1395,
        "end": 1436,
        "left": {
          "type": "BinaryExpression",
          "start": 1395,
          "end": 1430,
          "left": {
            "type": "NewExpression",
            "start": 1395,
            "end": 1410,
            "callee": {
              "type": "Identifier",
              "start": 1399,
              "end": 1405,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1406,
                "end": 1409,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "/",
          "right": {
            "type": "NewExpression",
            "start": 1413,
            "end": 1430,
            "callee": {
              "type": "Identifier",
              "start": 1417,
              "end": 1424,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1425,
                "end": 1429,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1435,
          "end": 1436,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1438,
        "end": 1566,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1442,
            "end": 1564,
            "argument": {
              "type": "NewExpression",
              "start": 1448,
              "end": 1563,
              "callee": {
                "type": "Identifier",
                "start": 1452,
                "end": 1464,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1465,
                  "end": 1562,
                  "left": {
                    "type": "Literal",
                    "start": 1465,
                    "end": 1522,
                    "value": "#8: new String(\"1\") / new Boolean(true) === 1. Actual: ",
                    "raw": "'#8: new String(\"1\") / new Boolean(true) === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1525,
                    "end": 1562,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1526,
                      "end": 1561,
                      "left": {
                        "type": "NewExpression",
                        "start": 1526,
                        "end": 1541,
                        "callee": {
                          "type": "Identifier",
                          "start": 1530,
                          "end": 1536,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1537,
                            "end": 1540,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "/",
                      "right": {
                        "type": "NewExpression",
                        "start": 1544,
                        "end": 1561,
                        "callee": {
                          "type": "Identifier",
                          "start": 1548,
                          "end": 1555,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1556,
                            "end": 1560,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}