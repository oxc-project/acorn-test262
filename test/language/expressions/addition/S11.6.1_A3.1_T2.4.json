{
  "type": "Program",
  "start": 0,
  "end": 1146,
  "body": [
    {
      "type": "IfStatement",
      "start": 475,
      "end": 614,
      "test": {
        "type": "BinaryExpression",
        "start": 479,
        "end": 511,
        "left": {
          "type": "CallExpression",
          "start": 479,
          "end": 502,
          "callee": {
            "type": "Identifier",
            "start": 479,
            "end": 484,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "BinaryExpression",
              "start": 485,
              "end": 501,
              "left": {
                "type": "Literal",
                "start": 485,
                "end": 489,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              },
              "operator": "+",
              "right": {
                "type": "Identifier",
                "start": 492,
                "end": 501,
                "name": "undefined"
              }
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 507,
          "end": 511,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 513,
        "end": 614,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 517,
            "end": 612,
            "argument": {
              "type": "NewExpression",
              "start": 523,
              "end": 611,
              "callee": {
                "type": "Identifier",
                "start": 527,
                "end": 539,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 540,
                  "end": 610,
                  "left": {
                    "type": "Literal",
                    "start": 540,
                    "end": 589,
                    "value": "#1: true + undefined === Not-a-Number. Actual: ",
                    "raw": "'#1: true + undefined === Not-a-Number. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 592,
                    "end": 610,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 593,
                      "end": 609,
                      "left": {
                        "type": "Literal",
                        "start": 593,
                        "end": 597,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "+",
                      "right": {
                        "type": "Identifier",
                        "start": 600,
                        "end": 609,
                        "name": "undefined"
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 626,
      "end": 765,
      "test": {
        "type": "BinaryExpression",
        "start": 630,
        "end": 662,
        "left": {
          "type": "CallExpression",
          "start": 630,
          "end": 653,
          "callee": {
            "type": "Identifier",
            "start": 630,
            "end": 635,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "BinaryExpression",
              "start": 636,
              "end": 652,
              "left": {
                "type": "Identifier",
                "start": 636,
                "end": 645,
                "name": "undefined"
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 648,
                "end": 652,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 658,
          "end": 662,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 664,
        "end": 765,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 668,
            "end": 763,
            "argument": {
              "type": "NewExpression",
              "start": 674,
              "end": 762,
              "callee": {
                "type": "Identifier",
                "start": 678,
                "end": 690,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 691,
                  "end": 761,
                  "left": {
                    "type": "Literal",
                    "start": 691,
                    "end": 740,
                    "value": "#2: undefined + true === Not-a-Number. Actual: ",
                    "raw": "'#2: undefined + true === Not-a-Number. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 743,
                    "end": 761,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 744,
                      "end": 760,
                      "left": {
                        "type": "Identifier",
                        "start": 744,
                        "end": 753,
                        "name": "undefined"
                      },
                      "operator": "+",
                      "right": {
                        "type": "Literal",
                        "start": 756,
                        "end": 760,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 777,
      "end": 955,
      "test": {
        "type": "BinaryExpression",
        "start": 781,
        "end": 826,
        "left": {
          "type": "CallExpression",
          "start": 781,
          "end": 817,
          "callee": {
            "type": "Identifier",
            "start": 781,
            "end": 786,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "BinaryExpression",
              "start": 787,
              "end": 816,
              "left": {
                "type": "NewExpression",
                "start": 787,
                "end": 804,
                "callee": {
                  "type": "Identifier",
                  "start": 791,
                  "end": 798,
                  "name": "Boolean"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "start": 799,
                    "end": 803,
                    "value": true,
                    "raw": "true",
                    "regex": null,
                    "bigint": null
                  }
                ]
              },
              "operator": "+",
              "right": {
                "type": "Identifier",
                "start": 807,
                "end": 816,
                "name": "undefined"
              }
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 822,
          "end": 826,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 828,
        "end": 955,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 832,
            "end": 953,
            "argument": {
              "type": "NewExpression",
              "start": 838,
              "end": 952,
              "callee": {
                "type": "Identifier",
                "start": 842,
                "end": 854,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 855,
                  "end": 951,
                  "left": {
                    "type": "Literal",
                    "start": 855,
                    "end": 917,
                    "value": "#3: new Boolean(true) + undefined === Not-a-Number. Actual: ",
                    "raw": "'#3: new Boolean(true) + undefined === Not-a-Number. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 920,
                    "end": 951,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 921,
                      "end": 950,
                      "left": {
                        "type": "NewExpression",
                        "start": 921,
                        "end": 938,
                        "callee": {
                          "type": "Identifier",
                          "start": 925,
                          "end": 932,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 933,
                            "end": 937,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "+",
                      "right": {
                        "type": "Identifier",
                        "start": 941,
                        "end": 950,
                        "name": "undefined"
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 967,
      "end": 1145,
      "test": {
        "type": "BinaryExpression",
        "start": 971,
        "end": 1016,
        "left": {
          "type": "CallExpression",
          "start": 971,
          "end": 1007,
          "callee": {
            "type": "Identifier",
            "start": 971,
            "end": 976,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "BinaryExpression",
              "start": 977,
              "end": 1006,
              "left": {
                "type": "Identifier",
                "start": 977,
                "end": 986,
                "name": "undefined"
              },
              "operator": "+",
              "right": {
                "type": "NewExpression",
                "start": 989,
                "end": 1006,
                "callee": {
                  "type": "Identifier",
                  "start": 993,
                  "end": 1000,
                  "name": "Boolean"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "start": 1001,
                    "end": 1005,
                    "value": true,
                    "raw": "true",
                    "regex": null,
                    "bigint": null
                  }
                ]
              }
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1012,
          "end": 1016,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1018,
        "end": 1145,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1022,
            "end": 1143,
            "argument": {
              "type": "NewExpression",
              "start": 1028,
              "end": 1142,
              "callee": {
                "type": "Identifier",
                "start": 1032,
                "end": 1044,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1045,
                  "end": 1141,
                  "left": {
                    "type": "Literal",
                    "start": 1045,
                    "end": 1107,
                    "value": "#4: undefined + new Boolean(true) === Not-a-Number. Actual: ",
                    "raw": "'#4: undefined + new Boolean(true) === Not-a-Number. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1110,
                    "end": 1141,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1111,
                      "end": 1140,
                      "left": {
                        "type": "Identifier",
                        "start": 1111,
                        "end": 1120,
                        "name": "undefined"
                      },
                      "operator": "+",
                      "right": {
                        "type": "NewExpression",
                        "start": 1123,
                        "end": 1140,
                        "callee": {
                          "type": "Identifier",
                          "start": 1127,
                          "end": 1134,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1135,
                            "end": 1139,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}