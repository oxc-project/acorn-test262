{
  "type": "Program",
  "start": 0,
  "end": 755,
  "body": [
    {
      "type": "TryStatement",
      "start": 336,
      "end": 536,
      "block": {
        "type": "BlockStatement",
        "start": 340,
        "end": 414,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 344,
            "end": 353,
            "expression": {
              "type": "NewExpression",
              "start": 344,
              "end": 352,
              "callee": {
                "type": "ThisExpression",
                "start": 348,
                "end": 352
              },
              "arguments": []
            }
          },
          {
            "type": "ThrowStatement",
            "start": 356,
            "end": 411,
            "argument": {
              "type": "NewExpression",
              "start": 362,
              "end": 410,
              "callee": {
                "type": "Identifier",
                "start": 366,
                "end": 378,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 379,
                  "end": 409,
                  "value": "#1: new this throw TypeError",
                  "raw": "'#1: new this throw TypeError'"
                }
              ]
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 415,
        "end": 536,
        "param": {
          "type": "Identifier",
          "start": 422,
          "end": 423,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 425,
          "end": 536,
          "body": [
            {
              "type": "IfStatement",
              "start": 429,
              "end": 534,
              "test": {
                "type": "BinaryExpression",
                "start": 433,
                "end": 466,
                "left": {
                  "type": "ParenthesizedExpression",
                  "start": 433,
                  "end": 457,
                  "expression": {
                    "type": "BinaryExpression",
                    "start": 434,
                    "end": 456,
                    "left": {
                      "type": "Identifier",
                      "start": 434,
                      "end": 435,
                      "name": "e"
                    },
                    "operator": "instanceof",
                    "right": {
                      "type": "Identifier",
                      "start": 447,
                      "end": 456,
                      "name": "TypeError"
                    }
                  }
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 462,
                  "end": 466,
                  "value": true,
                  "raw": "true"
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "start": 468,
                "end": 534,
                "body": [
                  {
                    "type": "ThrowStatement",
                    "start": 474,
                    "end": 529,
                    "argument": {
                      "type": "NewExpression",
                      "start": 480,
                      "end": 528,
                      "callee": {
                        "type": "Identifier",
                        "start": 484,
                        "end": 496,
                        "name": "Test262Error"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 497,
                          "end": 527,
                          "value": "#1: new this throw TypeError",
                          "raw": "'#1: new this throw TypeError'"
                        }
                      ]
                    }
                  }
                ]
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    },
    {
      "type": "TryStatement",
      "start": 548,
      "end": 754,
      "block": {
        "type": "BlockStatement",
        "start": 552,
        "end": 630,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 556,
            "end": 567,
            "expression": {
              "type": "NewExpression",
              "start": 556,
              "end": 566,
              "callee": {
                "type": "ThisExpression",
                "start": 560,
                "end": 564
              },
              "arguments": []
            }
          },
          {
            "type": "ThrowStatement",
            "start": 570,
            "end": 627,
            "argument": {
              "type": "NewExpression",
              "start": 576,
              "end": 626,
              "callee": {
                "type": "Identifier",
                "start": 580,
                "end": 592,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 593,
                  "end": 625,
                  "value": "#2: new this() throw TypeError",
                  "raw": "'#2: new this() throw TypeError'"
                }
              ]
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 631,
        "end": 754,
        "param": {
          "type": "Identifier",
          "start": 638,
          "end": 639,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 641,
          "end": 754,
          "body": [
            {
              "type": "IfStatement",
              "start": 645,
              "end": 752,
              "test": {
                "type": "BinaryExpression",
                "start": 649,
                "end": 682,
                "left": {
                  "type": "ParenthesizedExpression",
                  "start": 649,
                  "end": 673,
                  "expression": {
                    "type": "BinaryExpression",
                    "start": 650,
                    "end": 672,
                    "left": {
                      "type": "Identifier",
                      "start": 650,
                      "end": 651,
                      "name": "e"
                    },
                    "operator": "instanceof",
                    "right": {
                      "type": "Identifier",
                      "start": 663,
                      "end": 672,
                      "name": "TypeError"
                    }
                  }
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 678,
                  "end": 682,
                  "value": true,
                  "raw": "true"
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "start": 684,
                "end": 752,
                "body": [
                  {
                    "type": "ThrowStatement",
                    "start": 690,
                    "end": 747,
                    "argument": {
                      "type": "NewExpression",
                      "start": 696,
                      "end": 746,
                      "callee": {
                        "type": "Identifier",
                        "start": 700,
                        "end": 712,
                        "name": "Test262Error"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 713,
                          "end": 745,
                          "value": "#2: new this() throw TypeError",
                          "raw": "'#2: new this() throw TypeError'"
                        }
                      ]
                    }
                  }
                ]
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}