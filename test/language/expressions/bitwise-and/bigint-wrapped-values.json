{
  "type": "Program",
  "start": 0,
  "end": 1399,
  "body": [
    {
      "type": "ExpressionStatement",
      "start": 331,
      "end": 410,
      "expression": {
        "type": "CallExpression",
        "start": 331,
        "end": 409,
        "callee": {
          "type": "MemberExpression",
          "start": 331,
          "end": 347,
          "object": {
            "type": "Identifier",
            "start": 331,
            "end": 337,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 338,
            "end": 347,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 348,
            "end": 363,
            "left": {
              "type": "CallExpression",
              "start": 348,
              "end": 358,
              "callee": {
                "type": "Identifier",
                "start": 348,
                "end": 354,
                "name": "Object"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 355,
                  "end": 357,
                  "value": null,
                  "raw": "2n",
                  "regex": null,
                  "bigint": "2"
                }
              ],
              "optional": false
            },
            "operator": "&",
            "right": {
              "type": "Literal",
              "start": 361,
              "end": 363,
              "value": null,
              "raw": "3n",
              "regex": null,
              "bigint": "3"
            }
          },
          {
            "type": "Literal",
            "start": 365,
            "end": 367,
            "value": null,
            "raw": "2n",
            "regex": null,
            "bigint": "2"
          },
          {
            "type": "Literal",
            "start": 369,
            "end": 408,
            "value": "The result of (Object(2n) & 3n) is 2n",
            "raw": "'The result of (Object(2n) & 3n) is 2n'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 411,
      "end": 490,
      "expression": {
        "type": "CallExpression",
        "start": 411,
        "end": 489,
        "callee": {
          "type": "MemberExpression",
          "start": 411,
          "end": 427,
          "object": {
            "type": "Identifier",
            "start": 411,
            "end": 417,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 418,
            "end": 427,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 428,
            "end": 443,
            "left": {
              "type": "Literal",
              "start": 428,
              "end": 430,
              "value": null,
              "raw": "3n",
              "regex": null,
              "bigint": "3"
            },
            "operator": "&",
            "right": {
              "type": "CallExpression",
              "start": 433,
              "end": 443,
              "callee": {
                "type": "Identifier",
                "start": 433,
                "end": 439,
                "name": "Object"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 440,
                  "end": 442,
                  "value": null,
                  "raw": "2n",
                  "regex": null,
                  "bigint": "2"
                }
              ],
              "optional": false
            }
          },
          {
            "type": "Literal",
            "start": 445,
            "end": 447,
            "value": null,
            "raw": "2n",
            "regex": null,
            "bigint": "2"
          },
          {
            "type": "Literal",
            "start": 449,
            "end": 488,
            "value": "The result of (3n & Object(2n)) is 2n",
            "raw": "'The result of (3n & Object(2n)) is 2n'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 492,
      "end": 659,
      "expression": {
        "type": "CallExpression",
        "start": 492,
        "end": 658,
        "callee": {
          "type": "MemberExpression",
          "start": 492,
          "end": 508,
          "object": {
            "type": "Identifier",
            "start": 492,
            "end": 498,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 499,
            "end": 508,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 509,
            "end": 573,
            "left": {
              "type": "ObjectExpression",
              "start": 509,
              "end": 568,
              "properties": [
                {
                  "type": "Property",
                  "start": 513,
                  "end": 566,
                  "method": false,
                  "shorthand": false,
                  "computed": true,
                  "key": {
                    "type": "MemberExpression",
                    "start": 514,
                    "end": 532,
                    "object": {
                      "type": "Identifier",
                      "start": 514,
                      "end": 520,
                      "name": "Symbol"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 521,
                      "end": 532,
                      "name": "toPrimitive"
                    },
                    "computed": false,
                    "optional": false
                  },
                  "value": {
                    "type": "FunctionExpression",
                    "start": 535,
                    "end": 566,
                    "id": null,
                    "expression": false,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 546,
                      "end": 566,
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "start": 552,
                          "end": 562,
                          "argument": {
                            "type": "Literal",
                            "start": 559,
                            "end": 561,
                            "value": null,
                            "raw": "2n",
                            "regex": null,
                            "bigint": "2"
                          }
                        }
                      ]
                    }
                  },
                  "kind": "init"
                }
              ]
            },
            "operator": "&",
            "right": {
              "type": "Literal",
              "start": 571,
              "end": 573,
              "value": null,
              "raw": "3n",
              "regex": null,
              "bigint": "3"
            }
          },
          {
            "type": "Literal",
            "start": 575,
            "end": 577,
            "value": null,
            "raw": "2n",
            "regex": null,
            "bigint": "2"
          },
          {
            "type": "Literal",
            "start": 579,
            "end": 657,
            "value": "The result of (({[Symbol.toPrimitive]: function() {return 2n;}}) & 3n) is 2n",
            "raw": "'The result of (({[Symbol.toPrimitive]: function() {return 2n;}}) & 3n) is 2n'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 661,
      "end": 826,
      "expression": {
        "type": "CallExpression",
        "start": 661,
        "end": 825,
        "callee": {
          "type": "MemberExpression",
          "start": 661,
          "end": 677,
          "object": {
            "type": "Identifier",
            "start": 661,
            "end": 667,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 668,
            "end": 677,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 678,
            "end": 742,
            "left": {
              "type": "Literal",
              "start": 678,
              "end": 680,
              "value": null,
              "raw": "3n",
              "regex": null,
              "bigint": "3"
            },
            "operator": "&",
            "right": {
              "type": "ObjectExpression",
              "start": 683,
              "end": 742,
              "properties": [
                {
                  "type": "Property",
                  "start": 687,
                  "end": 740,
                  "method": false,
                  "shorthand": false,
                  "computed": true,
                  "key": {
                    "type": "MemberExpression",
                    "start": 688,
                    "end": 706,
                    "object": {
                      "type": "Identifier",
                      "start": 688,
                      "end": 694,
                      "name": "Symbol"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 695,
                      "end": 706,
                      "name": "toPrimitive"
                    },
                    "computed": false,
                    "optional": false
                  },
                  "value": {
                    "type": "FunctionExpression",
                    "start": 709,
                    "end": 740,
                    "id": null,
                    "expression": false,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 720,
                      "end": 740,
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "start": 726,
                          "end": 736,
                          "argument": {
                            "type": "Literal",
                            "start": 733,
                            "end": 735,
                            "value": null,
                            "raw": "2n",
                            "regex": null,
                            "bigint": "2"
                          }
                        }
                      ]
                    }
                  },
                  "kind": "init"
                }
              ]
            }
          },
          {
            "type": "Literal",
            "start": 744,
            "end": 746,
            "value": null,
            "raw": "2n",
            "regex": null,
            "bigint": "2"
          },
          {
            "type": "Literal",
            "start": 748,
            "end": 824,
            "value": "The result of (3n & {[Symbol.toPrimitive]: function() {return 2n;}}) is 2n",
            "raw": "'The result of (3n & {[Symbol.toPrimitive]: function() {return 2n;}}) is 2n'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 828,
      "end": 969,
      "expression": {
        "type": "CallExpression",
        "start": 828,
        "end": 968,
        "callee": {
          "type": "MemberExpression",
          "start": 828,
          "end": 844,
          "object": {
            "type": "Identifier",
            "start": 828,
            "end": 834,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 835,
            "end": 844,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 845,
            "end": 896,
            "left": {
              "type": "ObjectExpression",
              "start": 845,
              "end": 891,
              "properties": [
                {
                  "type": "Property",
                  "start": 849,
                  "end": 889,
                  "method": false,
                  "shorthand": false,
                  "computed": false,
                  "key": {
                    "type": "Identifier",
                    "start": 849,
                    "end": 856,
                    "name": "valueOf"
                  },
                  "value": {
                    "type": "FunctionExpression",
                    "start": 858,
                    "end": 889,
                    "id": null,
                    "expression": false,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 869,
                      "end": 889,
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "start": 875,
                          "end": 885,
                          "argument": {
                            "type": "Literal",
                            "start": 882,
                            "end": 884,
                            "value": null,
                            "raw": "2n",
                            "regex": null,
                            "bigint": "2"
                          }
                        }
                      ]
                    }
                  },
                  "kind": "init"
                }
              ]
            },
            "operator": "&",
            "right": {
              "type": "Literal",
              "start": 894,
              "end": 896,
              "value": null,
              "raw": "3n",
              "regex": null,
              "bigint": "3"
            }
          },
          {
            "type": "Literal",
            "start": 898,
            "end": 900,
            "value": null,
            "raw": "2n",
            "regex": null,
            "bigint": "2"
          },
          {
            "type": "Literal",
            "start": 902,
            "end": 967,
            "value": "The result of (({valueOf: function() {return 2n;}}) & 3n) is 2n",
            "raw": "'The result of (({valueOf: function() {return 2n;}}) & 3n) is 2n'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 971,
      "end": 1110,
      "expression": {
        "type": "CallExpression",
        "start": 971,
        "end": 1109,
        "callee": {
          "type": "MemberExpression",
          "start": 971,
          "end": 987,
          "object": {
            "type": "Identifier",
            "start": 971,
            "end": 977,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 978,
            "end": 987,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 988,
            "end": 1039,
            "left": {
              "type": "Literal",
              "start": 988,
              "end": 990,
              "value": null,
              "raw": "3n",
              "regex": null,
              "bigint": "3"
            },
            "operator": "&",
            "right": {
              "type": "ObjectExpression",
              "start": 993,
              "end": 1039,
              "properties": [
                {
                  "type": "Property",
                  "start": 997,
                  "end": 1037,
                  "method": false,
                  "shorthand": false,
                  "computed": false,
                  "key": {
                    "type": "Identifier",
                    "start": 997,
                    "end": 1004,
                    "name": "valueOf"
                  },
                  "value": {
                    "type": "FunctionExpression",
                    "start": 1006,
                    "end": 1037,
                    "id": null,
                    "expression": false,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 1017,
                      "end": 1037,
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "start": 1023,
                          "end": 1033,
                          "argument": {
                            "type": "Literal",
                            "start": 1030,
                            "end": 1032,
                            "value": null,
                            "raw": "2n",
                            "regex": null,
                            "bigint": "2"
                          }
                        }
                      ]
                    }
                  },
                  "kind": "init"
                }
              ]
            }
          },
          {
            "type": "Literal",
            "start": 1041,
            "end": 1043,
            "value": null,
            "raw": "2n",
            "regex": null,
            "bigint": "2"
          },
          {
            "type": "Literal",
            "start": 1045,
            "end": 1108,
            "value": "The result of (3n & {valueOf: function() {return 2n;}}) is 2n",
            "raw": "'The result of (3n & {valueOf: function() {return 2n;}}) is 2n'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1112,
      "end": 1255,
      "expression": {
        "type": "CallExpression",
        "start": 1112,
        "end": 1254,
        "callee": {
          "type": "MemberExpression",
          "start": 1112,
          "end": 1128,
          "object": {
            "type": "Identifier",
            "start": 1112,
            "end": 1118,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1119,
            "end": 1128,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 1129,
            "end": 1181,
            "left": {
              "type": "ObjectExpression",
              "start": 1129,
              "end": 1176,
              "properties": [
                {
                  "type": "Property",
                  "start": 1133,
                  "end": 1174,
                  "method": false,
                  "shorthand": false,
                  "computed": false,
                  "key": {
                    "type": "Identifier",
                    "start": 1133,
                    "end": 1141,
                    "name": "toString"
                  },
                  "value": {
                    "type": "FunctionExpression",
                    "start": 1143,
                    "end": 1174,
                    "id": null,
                    "expression": false,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 1154,
                      "end": 1174,
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "start": 1160,
                          "end": 1170,
                          "argument": {
                            "type": "Literal",
                            "start": 1167,
                            "end": 1169,
                            "value": null,
                            "raw": "2n",
                            "regex": null,
                            "bigint": "2"
                          }
                        }
                      ]
                    }
                  },
                  "kind": "init"
                }
              ]
            },
            "operator": "&",
            "right": {
              "type": "Literal",
              "start": 1179,
              "end": 1181,
              "value": null,
              "raw": "3n",
              "regex": null,
              "bigint": "3"
            }
          },
          {
            "type": "Literal",
            "start": 1183,
            "end": 1185,
            "value": null,
            "raw": "2n",
            "regex": null,
            "bigint": "2"
          },
          {
            "type": "Literal",
            "start": 1187,
            "end": 1253,
            "value": "The result of (({toString: function() {return 2n;}}) & 3n) is 2n",
            "raw": "'The result of (({toString: function() {return 2n;}}) & 3n) is 2n'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1257,
      "end": 1398,
      "expression": {
        "type": "CallExpression",
        "start": 1257,
        "end": 1397,
        "callee": {
          "type": "MemberExpression",
          "start": 1257,
          "end": 1273,
          "object": {
            "type": "Identifier",
            "start": 1257,
            "end": 1263,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1264,
            "end": 1273,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 1274,
            "end": 1326,
            "left": {
              "type": "Literal",
              "start": 1274,
              "end": 1276,
              "value": null,
              "raw": "3n",
              "regex": null,
              "bigint": "3"
            },
            "operator": "&",
            "right": {
              "type": "ObjectExpression",
              "start": 1279,
              "end": 1326,
              "properties": [
                {
                  "type": "Property",
                  "start": 1283,
                  "end": 1324,
                  "method": false,
                  "shorthand": false,
                  "computed": false,
                  "key": {
                    "type": "Identifier",
                    "start": 1283,
                    "end": 1291,
                    "name": "toString"
                  },
                  "value": {
                    "type": "FunctionExpression",
                    "start": 1293,
                    "end": 1324,
                    "id": null,
                    "expression": false,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 1304,
                      "end": 1324,
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "start": 1310,
                          "end": 1320,
                          "argument": {
                            "type": "Literal",
                            "start": 1317,
                            "end": 1319,
                            "value": null,
                            "raw": "2n",
                            "regex": null,
                            "bigint": "2"
                          }
                        }
                      ]
                    }
                  },
                  "kind": "init"
                }
              ]
            }
          },
          {
            "type": "Literal",
            "start": 1328,
            "end": 1330,
            "value": null,
            "raw": "2n",
            "regex": null,
            "bigint": "2"
          },
          {
            "type": "Literal",
            "start": 1332,
            "end": 1396,
            "value": "The result of (3n & {toString: function() {return 2n;}}) is 2n",
            "raw": "'The result of (3n & {toString: function() {return 2n;}}) is 2n'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}