{
  "type": "Program",
  "start": 0,
  "end": 1732,
  "body": [
    {
      "type": "IfStatement",
      "start": 381,
      "end": 472,
      "test": {
        "type": "BinaryExpression",
        "start": 385,
        "end": 398,
        "left": {
          "type": "BinaryExpression",
          "start": 385,
          "end": 392,
          "left": {
            "type": "Literal",
            "start": 385,
            "end": 388,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": "*",
          "right": {
            "type": "Literal",
            "start": 391,
            "end": 392,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 397,
          "end": 398,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 400,
        "end": 472,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 404,
            "end": 470,
            "argument": {
              "type": "NewExpression",
              "start": 410,
              "end": 469,
              "callee": {
                "type": "Identifier",
                "start": 414,
                "end": 426,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 427,
                  "end": 468,
                  "left": {
                    "type": "Literal",
                    "start": 427,
                    "end": 456,
                    "value": "#1: \"1\" * 1 === 1. Actual: ",
                    "raw": "'#1: \"1\" * 1 === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 459,
                    "end": 468,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 460,
                      "end": 467,
                      "left": {
                        "type": "Literal",
                        "start": 460,
                        "end": 463,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "*",
                      "right": {
                        "type": "Literal",
                        "start": 466,
                        "end": 467,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 484,
      "end": 575,
      "test": {
        "type": "BinaryExpression",
        "start": 488,
        "end": 501,
        "left": {
          "type": "BinaryExpression",
          "start": 488,
          "end": 495,
          "left": {
            "type": "Literal",
            "start": 488,
            "end": 489,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": "*",
          "right": {
            "type": "Literal",
            "start": 492,
            "end": 495,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 500,
          "end": 501,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 503,
        "end": 575,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 507,
            "end": 573,
            "argument": {
              "type": "NewExpression",
              "start": 513,
              "end": 572,
              "callee": {
                "type": "Identifier",
                "start": 517,
                "end": 529,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 530,
                  "end": 571,
                  "left": {
                    "type": "Literal",
                    "start": 530,
                    "end": 559,
                    "value": "#2: 1 * \"1\" === 1. Actual: ",
                    "raw": "'#2: 1 * \"1\" === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 562,
                    "end": 571,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 563,
                      "end": 570,
                      "left": {
                        "type": "Literal",
                        "start": 563,
                        "end": 564,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "*",
                      "right": {
                        "type": "Literal",
                        "start": 567,
                        "end": 570,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 587,
      "end": 714,
      "test": {
        "type": "BinaryExpression",
        "start": 591,
        "end": 616,
        "left": {
          "type": "BinaryExpression",
          "start": 591,
          "end": 610,
          "left": {
            "type": "NewExpression",
            "start": 591,
            "end": 606,
            "callee": {
              "type": "Identifier",
              "start": 595,
              "end": 601,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 602,
                "end": 605,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "*",
          "right": {
            "type": "Literal",
            "start": 609,
            "end": 610,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 615,
          "end": 616,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 618,
        "end": 714,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 622,
            "end": 712,
            "argument": {
              "type": "NewExpression",
              "start": 628,
              "end": 711,
              "callee": {
                "type": "Identifier",
                "start": 632,
                "end": 644,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 645,
                  "end": 710,
                  "left": {
                    "type": "Literal",
                    "start": 645,
                    "end": 686,
                    "value": "#3: new String(\"1\") * 1 === 1. Actual: ",
                    "raw": "'#3: new String(\"1\") * 1 === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 689,
                    "end": 710,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 690,
                      "end": 709,
                      "left": {
                        "type": "NewExpression",
                        "start": 690,
                        "end": 705,
                        "callee": {
                          "type": "Identifier",
                          "start": 694,
                          "end": 700,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 701,
                            "end": 704,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "*",
                      "right": {
                        "type": "Literal",
                        "start": 708,
                        "end": 709,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 726,
      "end": 853,
      "test": {
        "type": "BinaryExpression",
        "start": 730,
        "end": 755,
        "left": {
          "type": "BinaryExpression",
          "start": 730,
          "end": 749,
          "left": {
            "type": "Literal",
            "start": 730,
            "end": 731,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": "*",
          "right": {
            "type": "NewExpression",
            "start": 734,
            "end": 749,
            "callee": {
              "type": "Identifier",
              "start": 738,
              "end": 744,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 745,
                "end": 748,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 754,
          "end": 755,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 757,
        "end": 853,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 761,
            "end": 851,
            "argument": {
              "type": "NewExpression",
              "start": 767,
              "end": 850,
              "callee": {
                "type": "Identifier",
                "start": 771,
                "end": 783,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 784,
                  "end": 849,
                  "left": {
                    "type": "Literal",
                    "start": 784,
                    "end": 825,
                    "value": "#4: 1 * new String(\"1\") === 1. Actual: ",
                    "raw": "'#4: 1 * new String(\"1\") === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 828,
                    "end": 849,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 829,
                      "end": 848,
                      "left": {
                        "type": "Literal",
                        "start": 829,
                        "end": 830,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "*",
                      "right": {
                        "type": "NewExpression",
                        "start": 833,
                        "end": 848,
                        "callee": {
                          "type": "Identifier",
                          "start": 837,
                          "end": 843,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 844,
                            "end": 847,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 865,
      "end": 992,
      "test": {
        "type": "BinaryExpression",
        "start": 869,
        "end": 894,
        "left": {
          "type": "BinaryExpression",
          "start": 869,
          "end": 888,
          "left": {
            "type": "Literal",
            "start": 869,
            "end": 872,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": "*",
          "right": {
            "type": "NewExpression",
            "start": 875,
            "end": 888,
            "callee": {
              "type": "Identifier",
              "start": 879,
              "end": 885,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 886,
                "end": 887,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 893,
          "end": 894,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 896,
        "end": 992,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 900,
            "end": 990,
            "argument": {
              "type": "NewExpression",
              "start": 906,
              "end": 989,
              "callee": {
                "type": "Identifier",
                "start": 910,
                "end": 922,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 923,
                  "end": 988,
                  "left": {
                    "type": "Literal",
                    "start": 923,
                    "end": 964,
                    "value": "#5: \"1\" * new Number(1) === 1. Actual: ",
                    "raw": "'#5: \"1\" * new Number(1) === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 967,
                    "end": 988,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 968,
                      "end": 987,
                      "left": {
                        "type": "Literal",
                        "start": 968,
                        "end": 971,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "*",
                      "right": {
                        "type": "NewExpression",
                        "start": 974,
                        "end": 987,
                        "callee": {
                          "type": "Identifier",
                          "start": 978,
                          "end": 984,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 985,
                            "end": 986,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1004,
      "end": 1131,
      "test": {
        "type": "BinaryExpression",
        "start": 1008,
        "end": 1033,
        "left": {
          "type": "BinaryExpression",
          "start": 1008,
          "end": 1027,
          "left": {
            "type": "NewExpression",
            "start": 1008,
            "end": 1021,
            "callee": {
              "type": "Identifier",
              "start": 1012,
              "end": 1018,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1019,
                "end": 1020,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "*",
          "right": {
            "type": "Literal",
            "start": 1024,
            "end": 1027,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1032,
          "end": 1033,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1035,
        "end": 1131,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1039,
            "end": 1129,
            "argument": {
              "type": "NewExpression",
              "start": 1045,
              "end": 1128,
              "callee": {
                "type": "Identifier",
                "start": 1049,
                "end": 1061,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1062,
                  "end": 1127,
                  "left": {
                    "type": "Literal",
                    "start": 1062,
                    "end": 1103,
                    "value": "#6: new Number(1) * \"1\" === 1. Actual: ",
                    "raw": "'#6: new Number(1) * \"1\" === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1106,
                    "end": 1127,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1107,
                      "end": 1126,
                      "left": {
                        "type": "NewExpression",
                        "start": 1107,
                        "end": 1120,
                        "callee": {
                          "type": "Identifier",
                          "start": 1111,
                          "end": 1117,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1118,
                            "end": 1119,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "*",
                      "right": {
                        "type": "Literal",
                        "start": 1123,
                        "end": 1126,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1143,
      "end": 1306,
      "test": {
        "type": "BinaryExpression",
        "start": 1147,
        "end": 1184,
        "left": {
          "type": "BinaryExpression",
          "start": 1147,
          "end": 1178,
          "left": {
            "type": "NewExpression",
            "start": 1147,
            "end": 1162,
            "callee": {
              "type": "Identifier",
              "start": 1151,
              "end": 1157,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1158,
                "end": 1161,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "*",
          "right": {
            "type": "NewExpression",
            "start": 1165,
            "end": 1178,
            "callee": {
              "type": "Identifier",
              "start": 1169,
              "end": 1175,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1176,
                "end": 1177,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1183,
          "end": 1184,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1186,
        "end": 1306,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1190,
            "end": 1304,
            "argument": {
              "type": "NewExpression",
              "start": 1196,
              "end": 1303,
              "callee": {
                "type": "Identifier",
                "start": 1200,
                "end": 1212,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1213,
                  "end": 1302,
                  "left": {
                    "type": "Literal",
                    "start": 1213,
                    "end": 1266,
                    "value": "#7: new String(\"1\") * new Number(1) === 1. Actual: ",
                    "raw": "'#7: new String(\"1\") * new Number(1) === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1269,
                    "end": 1302,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1270,
                      "end": 1301,
                      "left": {
                        "type": "NewExpression",
                        "start": 1270,
                        "end": 1285,
                        "callee": {
                          "type": "Identifier",
                          "start": 1274,
                          "end": 1280,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1281,
                            "end": 1284,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "*",
                      "right": {
                        "type": "NewExpression",
                        "start": 1288,
                        "end": 1301,
                        "callee": {
                          "type": "Identifier",
                          "start": 1292,
                          "end": 1298,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1299,
                            "end": 1300,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1318,
      "end": 1481,
      "test": {
        "type": "BinaryExpression",
        "start": 1322,
        "end": 1359,
        "left": {
          "type": "BinaryExpression",
          "start": 1322,
          "end": 1353,
          "left": {
            "type": "NewExpression",
            "start": 1322,
            "end": 1335,
            "callee": {
              "type": "Identifier",
              "start": 1326,
              "end": 1332,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1333,
                "end": 1334,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": "*",
          "right": {
            "type": "NewExpression",
            "start": 1338,
            "end": 1353,
            "callee": {
              "type": "Identifier",
              "start": 1342,
              "end": 1348,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1349,
                "end": 1352,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1358,
          "end": 1359,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1361,
        "end": 1481,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1365,
            "end": 1479,
            "argument": {
              "type": "NewExpression",
              "start": 1371,
              "end": 1478,
              "callee": {
                "type": "Identifier",
                "start": 1375,
                "end": 1387,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1388,
                  "end": 1477,
                  "left": {
                    "type": "Literal",
                    "start": 1388,
                    "end": 1441,
                    "value": "#8: new Number(1) * new String(\"1\") === 1. Actual: ",
                    "raw": "'#8: new Number(1) * new String(\"1\") === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1444,
                    "end": 1477,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1445,
                      "end": 1476,
                      "left": {
                        "type": "NewExpression",
                        "start": 1445,
                        "end": 1458,
                        "callee": {
                          "type": "Identifier",
                          "start": 1449,
                          "end": 1455,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1456,
                            "end": 1457,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": "*",
                      "right": {
                        "type": "NewExpression",
                        "start": 1461,
                        "end": 1476,
                        "callee": {
                          "type": "Identifier",
                          "start": 1465,
                          "end": 1471,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1472,
                            "end": 1475,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1493,
      "end": 1605,
      "test": {
        "type": "BinaryExpression",
        "start": 1497,
        "end": 1520,
        "left": {
          "type": "CallExpression",
          "start": 1497,
          "end": 1511,
          "callee": {
            "type": "Identifier",
            "start": 1497,
            "end": 1502,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "BinaryExpression",
              "start": 1503,
              "end": 1510,
              "left": {
                "type": "Literal",
                "start": 1503,
                "end": 1506,
                "value": "x",
                "raw": "\"x\"",
                "regex": null,
                "bigint": null
              },
              "operator": "*",
              "right": {
                "type": "Literal",
                "start": 1509,
                "end": 1510,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1516,
          "end": 1520,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1522,
        "end": 1605,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1526,
            "end": 1603,
            "argument": {
              "type": "NewExpression",
              "start": 1532,
              "end": 1602,
              "callee": {
                "type": "Identifier",
                "start": 1536,
                "end": 1548,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1549,
                  "end": 1601,
                  "left": {
                    "type": "Literal",
                    "start": 1549,
                    "end": 1589,
                    "value": "#9: \"x\" * 1 === Not-a-Number. Actual: ",
                    "raw": "'#9: \"x\" * 1 === Not-a-Number. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1592,
                    "end": 1601,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1593,
                      "end": 1600,
                      "left": {
                        "type": "Literal",
                        "start": 1593,
                        "end": 1596,
                        "value": "x",
                        "raw": "\"x\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "*",
                      "right": {
                        "type": "Literal",
                        "start": 1599,
                        "end": 1600,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1618,
      "end": 1731,
      "test": {
        "type": "BinaryExpression",
        "start": 1622,
        "end": 1645,
        "left": {
          "type": "CallExpression",
          "start": 1622,
          "end": 1636,
          "callee": {
            "type": "Identifier",
            "start": 1622,
            "end": 1627,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "BinaryExpression",
              "start": 1628,
              "end": 1635,
              "left": {
                "type": "Literal",
                "start": 1628,
                "end": 1629,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              },
              "operator": "*",
              "right": {
                "type": "Literal",
                "start": 1632,
                "end": 1635,
                "value": "x",
                "raw": "\"x\"",
                "regex": null,
                "bigint": null
              }
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1641,
          "end": 1645,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1647,
        "end": 1731,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1651,
            "end": 1729,
            "argument": {
              "type": "NewExpression",
              "start": 1657,
              "end": 1728,
              "callee": {
                "type": "Identifier",
                "start": 1661,
                "end": 1673,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1674,
                  "end": 1727,
                  "left": {
                    "type": "Literal",
                    "start": 1674,
                    "end": 1715,
                    "value": "#10: 1 * \"x\" === Not-a-Number. Actual: ",
                    "raw": "'#10: 1 * \"x\" === Not-a-Number. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1718,
                    "end": 1727,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1719,
                      "end": 1726,
                      "left": {
                        "type": "Literal",
                        "start": 1719,
                        "end": 1720,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "*",
                      "right": {
                        "type": "Literal",
                        "start": 1723,
                        "end": 1726,
                        "value": "x",
                        "raw": "\"x\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}