{
  "type": "Program",
  "start": 0,
  "end": 511,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 265,
      "end": 271,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 269,
          "end": 270,
          "id": {
            "type": "Identifier",
            "start": 269,
            "end": 270,
            "name": "x"
          },
          "init": null
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 273,
      "end": 277,
      "expression": {
        "type": "UpdateExpression",
        "start": 273,
        "end": 276,
        "operator": "--",
        "prefix": true,
        "argument": {
          "type": "Identifier",
          "start": 275,
          "end": 276,
          "name": "x"
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 278,
      "end": 384,
      "test": {
        "type": "BinaryExpression",
        "start": 282,
        "end": 299,
        "left": {
          "type": "CallExpression",
          "start": 282,
          "end": 290,
          "callee": {
            "type": "Identifier",
            "start": 282,
            "end": 287,
            "name": "isNaN"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 288,
              "end": 289,
              "name": "x"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 295,
          "end": 299,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 301,
        "end": 384,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 305,
            "end": 382,
            "argument": {
              "type": "NewExpression",
              "start": 311,
              "end": 381,
              "callee": {
                "type": "Identifier",
                "start": 315,
                "end": 327,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 328,
                  "end": 380,
                  "left": {
                    "type": "Literal",
                    "start": 328,
                    "end": 374,
                    "value": "#1: var x; --x; x === Not-a-Number. Actual: ",
                    "raw": "'#1: var x; --x; x === Not-a-Number. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 377,
                    "end": 380,
                    "expression": {
                      "type": "Identifier",
                      "start": 378,
                      "end": 379,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "VariableDeclaration",
      "start": 396,
      "end": 409,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 400,
          "end": 408,
          "id": {
            "type": "Identifier",
            "start": 400,
            "end": 401,
            "name": "x"
          },
          "init": {
            "type": "Literal",
            "start": 404,
            "end": 408,
            "value": null,
            "raw": "null",
            "regex": null,
            "bigint": null
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 411,
      "end": 415,
      "expression": {
        "type": "UpdateExpression",
        "start": 411,
        "end": 414,
        "operator": "--",
        "prefix": true,
        "argument": {
          "type": "Identifier",
          "start": 413,
          "end": 414,
          "name": "x"
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 416,
      "end": 510,
      "test": {
        "type": "BinaryExpression",
        "start": 420,
        "end": 428,
        "left": {
          "type": "Identifier",
          "start": 420,
          "end": 421,
          "name": "x"
        },
        "operator": "!==",
        "right": {
          "type": "UnaryExpression",
          "start": 426,
          "end": 428,
          "operator": "-",
          "prefix": true,
          "argument": {
            "type": "Literal",
            "start": 427,
            "end": 428,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 430,
        "end": 510,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 434,
            "end": 508,
            "argument": {
              "type": "NewExpression",
              "start": 440,
              "end": 507,
              "callee": {
                "type": "Identifier",
                "start": 444,
                "end": 456,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 457,
                  "end": 506,
                  "left": {
                    "type": "Literal",
                    "start": 457,
                    "end": 500,
                    "value": "#2: var x = null; --x; x === -1. Actual: ",
                    "raw": "'#2: var x = null; --x; x === -1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 503,
                    "end": 506,
                    "expression": {
                      "type": "Identifier",
                      "start": 504,
                      "end": 505,
                      "name": "x"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}