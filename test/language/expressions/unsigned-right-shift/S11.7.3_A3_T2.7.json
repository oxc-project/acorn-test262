{
  "type": "Program",
  "start": 0,
  "end": 893,
  "body": [
    {
      "type": "IfStatement",
      "start": 360,
      "end": 466,
      "test": {
        "type": "BinaryExpression",
        "start": 364,
        "end": 382,
        "left": {
          "type": "BinaryExpression",
          "start": 364,
          "end": 376,
          "left": {
            "type": "Literal",
            "start": 364,
            "end": 367,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 372,
            "end": 376,
            "value": null,
            "raw": "null",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 381,
          "end": 382,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 384,
        "end": 466,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 388,
            "end": 464,
            "argument": {
              "type": "NewExpression",
              "start": 394,
              "end": 463,
              "callee": {
                "type": "Identifier",
                "start": 398,
                "end": 410,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 411,
                  "end": 462,
                  "left": {
                    "type": "Literal",
                    "start": 411,
                    "end": 445,
                    "value": "#1: \"1\" >>> null === 1. Actual: ",
                    "raw": "'#1: \"1\" >>> null === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 448,
                    "end": 462,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 449,
                      "end": 461,
                      "left": {
                        "type": "Literal",
                        "start": 449,
                        "end": 452,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 457,
                        "end": 461,
                        "value": null,
                        "raw": "null",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 478,
      "end": 584,
      "test": {
        "type": "BinaryExpression",
        "start": 482,
        "end": 500,
        "left": {
          "type": "BinaryExpression",
          "start": 482,
          "end": 494,
          "left": {
            "type": "Literal",
            "start": 482,
            "end": 486,
            "value": null,
            "raw": "null",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 491,
            "end": 494,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 499,
          "end": 500,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 502,
        "end": 584,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 506,
            "end": 582,
            "argument": {
              "type": "NewExpression",
              "start": 512,
              "end": 581,
              "callee": {
                "type": "Identifier",
                "start": 516,
                "end": 528,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 529,
                  "end": 580,
                  "left": {
                    "type": "Literal",
                    "start": 529,
                    "end": 563,
                    "value": "#2: null >>> \"1\" === 0. Actual: ",
                    "raw": "'#2: null >>> \"1\" === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 566,
                    "end": 580,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 567,
                      "end": 579,
                      "left": {
                        "type": "Literal",
                        "start": 567,
                        "end": 571,
                        "value": null,
                        "raw": "null",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 576,
                        "end": 579,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 596,
      "end": 738,
      "test": {
        "type": "BinaryExpression",
        "start": 600,
        "end": 630,
        "left": {
          "type": "BinaryExpression",
          "start": 600,
          "end": 624,
          "left": {
            "type": "NewExpression",
            "start": 600,
            "end": 615,
            "callee": {
              "type": "Identifier",
              "start": 604,
              "end": 610,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 611,
                "end": 614,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 620,
            "end": 624,
            "value": null,
            "raw": "null",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 629,
          "end": 630,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 632,
        "end": 738,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 636,
            "end": 736,
            "argument": {
              "type": "NewExpression",
              "start": 642,
              "end": 735,
              "callee": {
                "type": "Identifier",
                "start": 646,
                "end": 658,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 659,
                  "end": 734,
                  "left": {
                    "type": "Literal",
                    "start": 659,
                    "end": 705,
                    "value": "#3: new String(\"1\") >>> null === 1. Actual: ",
                    "raw": "'#3: new String(\"1\") >>> null === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 708,
                    "end": 734,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 709,
                      "end": 733,
                      "left": {
                        "type": "NewExpression",
                        "start": 709,
                        "end": 724,
                        "callee": {
                          "type": "Identifier",
                          "start": 713,
                          "end": 719,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 720,
                            "end": 723,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 729,
                        "end": 733,
                        "value": null,
                        "raw": "null",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 750,
      "end": 892,
      "test": {
        "type": "BinaryExpression",
        "start": 754,
        "end": 784,
        "left": {
          "type": "BinaryExpression",
          "start": 754,
          "end": 778,
          "left": {
            "type": "Literal",
            "start": 754,
            "end": 758,
            "value": null,
            "raw": "null",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "NewExpression",
            "start": 763,
            "end": 778,
            "callee": {
              "type": "Identifier",
              "start": 767,
              "end": 773,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 774,
                "end": 777,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 783,
          "end": 784,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 786,
        "end": 892,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 790,
            "end": 890,
            "argument": {
              "type": "NewExpression",
              "start": 796,
              "end": 889,
              "callee": {
                "type": "Identifier",
                "start": 800,
                "end": 812,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 813,
                  "end": 888,
                  "left": {
                    "type": "Literal",
                    "start": 813,
                    "end": 859,
                    "value": "#4: null >>> new String(\"1\") === 0. Actual: ",
                    "raw": "'#4: null >>> new String(\"1\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 862,
                    "end": 888,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 863,
                      "end": 887,
                      "left": {
                        "type": "Literal",
                        "start": 863,
                        "end": 867,
                        "value": null,
                        "raw": "null",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "NewExpression",
                        "start": 872,
                        "end": 887,
                        "callee": {
                          "type": "Identifier",
                          "start": 876,
                          "end": 882,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 883,
                            "end": 886,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}