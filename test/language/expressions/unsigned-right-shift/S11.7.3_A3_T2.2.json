{
  "type": "Program",
  "start": 0,
  "end": 1754,
  "body": [
    {
      "type": "IfStatement",
      "start": 385,
      "end": 482,
      "test": {
        "type": "BinaryExpression",
        "start": 389,
        "end": 404,
        "left": {
          "type": "BinaryExpression",
          "start": 389,
          "end": 398,
          "left": {
            "type": "Literal",
            "start": 389,
            "end": 392,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 397,
            "end": 398,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 403,
          "end": 404,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 406,
        "end": 482,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 410,
            "end": 480,
            "argument": {
              "type": "NewExpression",
              "start": 416,
              "end": 479,
              "callee": {
                "type": "Identifier",
                "start": 420,
                "end": 432,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 433,
                  "end": 478,
                  "left": {
                    "type": "Literal",
                    "start": 433,
                    "end": 464,
                    "value": "#1: \"1\" >>> 1 === 0. Actual: ",
                    "raw": "'#1: \"1\" >>> 1 === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 467,
                    "end": 478,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 468,
                      "end": 477,
                      "left": {
                        "type": "Literal",
                        "start": 468,
                        "end": 471,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 476,
                        "end": 477,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 494,
      "end": 591,
      "test": {
        "type": "BinaryExpression",
        "start": 498,
        "end": 513,
        "left": {
          "type": "BinaryExpression",
          "start": 498,
          "end": 507,
          "left": {
            "type": "Literal",
            "start": 498,
            "end": 499,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 504,
            "end": 507,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 512,
          "end": 513,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 515,
        "end": 591,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 519,
            "end": 589,
            "argument": {
              "type": "NewExpression",
              "start": 525,
              "end": 588,
              "callee": {
                "type": "Identifier",
                "start": 529,
                "end": 541,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 542,
                  "end": 587,
                  "left": {
                    "type": "Literal",
                    "start": 542,
                    "end": 573,
                    "value": "#2: 1 >>> \"1\" === 0. Actual: ",
                    "raw": "'#2: 1 >>> \"1\" === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 576,
                    "end": 587,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 577,
                      "end": 586,
                      "left": {
                        "type": "Literal",
                        "start": 577,
                        "end": 578,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 583,
                        "end": 586,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 603,
      "end": 736,
      "test": {
        "type": "BinaryExpression",
        "start": 607,
        "end": 634,
        "left": {
          "type": "BinaryExpression",
          "start": 607,
          "end": 628,
          "left": {
            "type": "NewExpression",
            "start": 607,
            "end": 622,
            "callee": {
              "type": "Identifier",
              "start": 611,
              "end": 617,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 618,
                "end": 621,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 627,
            "end": 628,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 633,
          "end": 634,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 636,
        "end": 736,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 640,
            "end": 734,
            "argument": {
              "type": "NewExpression",
              "start": 646,
              "end": 733,
              "callee": {
                "type": "Identifier",
                "start": 650,
                "end": 662,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 663,
                  "end": 732,
                  "left": {
                    "type": "Literal",
                    "start": 663,
                    "end": 706,
                    "value": "#3: new String(\"1\") >>> 1 === 0. Actual: ",
                    "raw": "'#3: new String(\"1\") >>> 1 === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 709,
                    "end": 732,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 710,
                      "end": 731,
                      "left": {
                        "type": "NewExpression",
                        "start": 710,
                        "end": 725,
                        "callee": {
                          "type": "Identifier",
                          "start": 714,
                          "end": 720,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 721,
                            "end": 724,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 730,
                        "end": 731,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 748,
      "end": 881,
      "test": {
        "type": "BinaryExpression",
        "start": 752,
        "end": 779,
        "left": {
          "type": "BinaryExpression",
          "start": 752,
          "end": 773,
          "left": {
            "type": "Literal",
            "start": 752,
            "end": 753,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "NewExpression",
            "start": 758,
            "end": 773,
            "callee": {
              "type": "Identifier",
              "start": 762,
              "end": 768,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 769,
                "end": 772,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 778,
          "end": 779,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 781,
        "end": 881,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 785,
            "end": 879,
            "argument": {
              "type": "NewExpression",
              "start": 791,
              "end": 878,
              "callee": {
                "type": "Identifier",
                "start": 795,
                "end": 807,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 808,
                  "end": 877,
                  "left": {
                    "type": "Literal",
                    "start": 808,
                    "end": 851,
                    "value": "#4: 1 >>> new String(\"1\") === 0. Actual: ",
                    "raw": "'#4: 1 >>> new String(\"1\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 854,
                    "end": 877,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 855,
                      "end": 876,
                      "left": {
                        "type": "Literal",
                        "start": 855,
                        "end": 856,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "NewExpression",
                        "start": 861,
                        "end": 876,
                        "callee": {
                          "type": "Identifier",
                          "start": 865,
                          "end": 871,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 872,
                            "end": 875,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 893,
      "end": 1026,
      "test": {
        "type": "BinaryExpression",
        "start": 897,
        "end": 924,
        "left": {
          "type": "BinaryExpression",
          "start": 897,
          "end": 918,
          "left": {
            "type": "Literal",
            "start": 897,
            "end": 900,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "NewExpression",
            "start": 905,
            "end": 918,
            "callee": {
              "type": "Identifier",
              "start": 909,
              "end": 915,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 916,
                "end": 917,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 923,
          "end": 924,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 926,
        "end": 1026,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 930,
            "end": 1024,
            "argument": {
              "type": "NewExpression",
              "start": 936,
              "end": 1023,
              "callee": {
                "type": "Identifier",
                "start": 940,
                "end": 952,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 953,
                  "end": 1022,
                  "left": {
                    "type": "Literal",
                    "start": 953,
                    "end": 996,
                    "value": "#5: \"1\" >>> new Number(1) === 0. Actual: ",
                    "raw": "'#5: \"1\" >>> new Number(1) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 999,
                    "end": 1022,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1000,
                      "end": 1021,
                      "left": {
                        "type": "Literal",
                        "start": 1000,
                        "end": 1003,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1008,
                        "end": 1021,
                        "callee": {
                          "type": "Identifier",
                          "start": 1012,
                          "end": 1018,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1019,
                            "end": 1020,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1038,
      "end": 1171,
      "test": {
        "type": "BinaryExpression",
        "start": 1042,
        "end": 1069,
        "left": {
          "type": "BinaryExpression",
          "start": 1042,
          "end": 1063,
          "left": {
            "type": "NewExpression",
            "start": 1042,
            "end": 1055,
            "callee": {
              "type": "Identifier",
              "start": 1046,
              "end": 1052,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1053,
                "end": 1054,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 1060,
            "end": 1063,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1068,
          "end": 1069,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1071,
        "end": 1171,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1075,
            "end": 1169,
            "argument": {
              "type": "NewExpression",
              "start": 1081,
              "end": 1168,
              "callee": {
                "type": "Identifier",
                "start": 1085,
                "end": 1097,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1098,
                  "end": 1167,
                  "left": {
                    "type": "Literal",
                    "start": 1098,
                    "end": 1141,
                    "value": "#6: new Number(1) >>> \"1\" === 0. Actual: ",
                    "raw": "'#6: new Number(1) >>> \"1\" === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1144,
                    "end": 1167,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1145,
                      "end": 1166,
                      "left": {
                        "type": "NewExpression",
                        "start": 1145,
                        "end": 1158,
                        "callee": {
                          "type": "Identifier",
                          "start": 1149,
                          "end": 1155,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1156,
                            "end": 1157,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 1163,
                        "end": 1166,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1183,
      "end": 1352,
      "test": {
        "type": "BinaryExpression",
        "start": 1187,
        "end": 1226,
        "left": {
          "type": "BinaryExpression",
          "start": 1187,
          "end": 1220,
          "left": {
            "type": "NewExpression",
            "start": 1187,
            "end": 1202,
            "callee": {
              "type": "Identifier",
              "start": 1191,
              "end": 1197,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1198,
                "end": 1201,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>>",
          "right": {
            "type": "NewExpression",
            "start": 1207,
            "end": 1220,
            "callee": {
              "type": "Identifier",
              "start": 1211,
              "end": 1217,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1218,
                "end": 1219,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1225,
          "end": 1226,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1228,
        "end": 1352,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1232,
            "end": 1350,
            "argument": {
              "type": "NewExpression",
              "start": 1238,
              "end": 1349,
              "callee": {
                "type": "Identifier",
                "start": 1242,
                "end": 1254,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1255,
                  "end": 1348,
                  "left": {
                    "type": "Literal",
                    "start": 1255,
                    "end": 1310,
                    "value": "#7: new String(\"1\") >>> new Number(1) === 0. Actual: ",
                    "raw": "'#7: new String(\"1\") >>> new Number(1) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1313,
                    "end": 1348,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1314,
                      "end": 1347,
                      "left": {
                        "type": "NewExpression",
                        "start": 1314,
                        "end": 1329,
                        "callee": {
                          "type": "Identifier",
                          "start": 1318,
                          "end": 1324,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1325,
                            "end": 1328,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1334,
                        "end": 1347,
                        "callee": {
                          "type": "Identifier",
                          "start": 1338,
                          "end": 1344,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1345,
                            "end": 1346,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1364,
      "end": 1533,
      "test": {
        "type": "BinaryExpression",
        "start": 1368,
        "end": 1407,
        "left": {
          "type": "BinaryExpression",
          "start": 1368,
          "end": 1401,
          "left": {
            "type": "NewExpression",
            "start": 1368,
            "end": 1381,
            "callee": {
              "type": "Identifier",
              "start": 1372,
              "end": 1378,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1379,
                "end": 1380,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>>",
          "right": {
            "type": "NewExpression",
            "start": 1386,
            "end": 1401,
            "callee": {
              "type": "Identifier",
              "start": 1390,
              "end": 1396,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1397,
                "end": 1400,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1406,
          "end": 1407,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1409,
        "end": 1533,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1413,
            "end": 1531,
            "argument": {
              "type": "NewExpression",
              "start": 1419,
              "end": 1530,
              "callee": {
                "type": "Identifier",
                "start": 1423,
                "end": 1435,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1436,
                  "end": 1529,
                  "left": {
                    "type": "Literal",
                    "start": 1436,
                    "end": 1491,
                    "value": "#8: new Number(1) >>> new String(\"1\") === 0. Actual: ",
                    "raw": "'#8: new Number(1) >>> new String(\"1\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1494,
                    "end": 1529,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1495,
                      "end": 1528,
                      "left": {
                        "type": "NewExpression",
                        "start": 1495,
                        "end": 1508,
                        "callee": {
                          "type": "Identifier",
                          "start": 1499,
                          "end": 1505,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1506,
                            "end": 1507,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1513,
                        "end": 1528,
                        "callee": {
                          "type": "Identifier",
                          "start": 1517,
                          "end": 1523,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1524,
                            "end": 1527,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1545,
      "end": 1642,
      "test": {
        "type": "BinaryExpression",
        "start": 1549,
        "end": 1564,
        "left": {
          "type": "BinaryExpression",
          "start": 1549,
          "end": 1558,
          "left": {
            "type": "Literal",
            "start": 1549,
            "end": 1552,
            "value": "x",
            "raw": "\"x\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 1557,
            "end": 1558,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1563,
          "end": 1564,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1566,
        "end": 1642,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1570,
            "end": 1640,
            "argument": {
              "type": "NewExpression",
              "start": 1576,
              "end": 1639,
              "callee": {
                "type": "Identifier",
                "start": 1580,
                "end": 1592,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1593,
                  "end": 1638,
                  "left": {
                    "type": "Literal",
                    "start": 1593,
                    "end": 1624,
                    "value": "#9: \"x\" >>> 1 === 0. Actual: ",
                    "raw": "'#9: \"x\" >>> 1 === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1627,
                    "end": 1638,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1628,
                      "end": 1637,
                      "left": {
                        "type": "Literal",
                        "start": 1628,
                        "end": 1631,
                        "value": "x",
                        "raw": "\"x\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 1636,
                        "end": 1637,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1655,
      "end": 1753,
      "test": {
        "type": "BinaryExpression",
        "start": 1659,
        "end": 1674,
        "left": {
          "type": "BinaryExpression",
          "start": 1659,
          "end": 1668,
          "left": {
            "type": "Literal",
            "start": 1659,
            "end": 1660,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 1665,
            "end": 1668,
            "value": "x",
            "raw": "\"x\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1673,
          "end": 1674,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1676,
        "end": 1753,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1680,
            "end": 1751,
            "argument": {
              "type": "NewExpression",
              "start": 1686,
              "end": 1750,
              "callee": {
                "type": "Identifier",
                "start": 1690,
                "end": 1702,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1703,
                  "end": 1749,
                  "left": {
                    "type": "Literal",
                    "start": 1703,
                    "end": 1735,
                    "value": "#10: 1 >>> \"x\" === 1. Actual: ",
                    "raw": "'#10: 1 >>> \"x\" === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1738,
                    "end": 1749,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1739,
                      "end": 1748,
                      "left": {
                        "type": "Literal",
                        "start": 1739,
                        "end": 1740,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 1745,
                        "end": 1748,
                        "value": "x",
                        "raw": "\"x\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}