{
  "type": "Program",
  "start": 0,
  "end": 1619,
  "body": [
    {
      "type": "IfStatement",
      "start": 386,
      "end": 492,
      "test": {
        "type": "BinaryExpression",
        "start": 390,
        "end": 408,
        "left": {
          "type": "BinaryExpression",
          "start": 390,
          "end": 402,
          "left": {
            "type": "Literal",
            "start": 390,
            "end": 394,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 399,
            "end": 402,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 407,
          "end": 408,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 410,
        "end": 492,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 414,
            "end": 490,
            "argument": {
              "type": "NewExpression",
              "start": 420,
              "end": 489,
              "callee": {
                "type": "Identifier",
                "start": 424,
                "end": 436,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 437,
                  "end": 488,
                  "left": {
                    "type": "Literal",
                    "start": 437,
                    "end": 471,
                    "value": "#1: true >>> \"1\" === 0. Actual: ",
                    "raw": "'#1: true >>> \"1\" === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 474,
                    "end": 488,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 475,
                      "end": 487,
                      "left": {
                        "type": "Literal",
                        "start": 475,
                        "end": 479,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 484,
                        "end": 487,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 504,
      "end": 610,
      "test": {
        "type": "BinaryExpression",
        "start": 508,
        "end": 526,
        "left": {
          "type": "BinaryExpression",
          "start": 508,
          "end": 520,
          "left": {
            "type": "Literal",
            "start": 508,
            "end": 511,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 516,
            "end": 520,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 525,
          "end": 526,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 528,
        "end": 610,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 532,
            "end": 608,
            "argument": {
              "type": "NewExpression",
              "start": 538,
              "end": 607,
              "callee": {
                "type": "Identifier",
                "start": 542,
                "end": 554,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 555,
                  "end": 606,
                  "left": {
                    "type": "Literal",
                    "start": 555,
                    "end": 589,
                    "value": "#2: \"1\" >>> true === 0. Actual: ",
                    "raw": "'#2: \"1\" >>> true === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 592,
                    "end": 606,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 593,
                      "end": 605,
                      "left": {
                        "type": "Literal",
                        "start": 593,
                        "end": 596,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 601,
                        "end": 605,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 622,
      "end": 767,
      "test": {
        "type": "BinaryExpression",
        "start": 626,
        "end": 657,
        "left": {
          "type": "BinaryExpression",
          "start": 626,
          "end": 651,
          "left": {
            "type": "NewExpression",
            "start": 626,
            "end": 643,
            "callee": {
              "type": "Identifier",
              "start": 630,
              "end": 637,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 638,
                "end": 642,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 648,
            "end": 651,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 656,
          "end": 657,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 659,
        "end": 767,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 663,
            "end": 765,
            "argument": {
              "type": "NewExpression",
              "start": 669,
              "end": 764,
              "callee": {
                "type": "Identifier",
                "start": 673,
                "end": 685,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 686,
                  "end": 763,
                  "left": {
                    "type": "Literal",
                    "start": 686,
                    "end": 733,
                    "value": "#3: new Boolean(true) >>> \"1\" === 0. Actual: ",
                    "raw": "'#3: new Boolean(true) >>> \"1\" === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 736,
                    "end": 763,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 737,
                      "end": 762,
                      "left": {
                        "type": "NewExpression",
                        "start": 737,
                        "end": 754,
                        "callee": {
                          "type": "Identifier",
                          "start": 741,
                          "end": 748,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 749,
                            "end": 753,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 759,
                        "end": 762,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 779,
      "end": 924,
      "test": {
        "type": "BinaryExpression",
        "start": 783,
        "end": 814,
        "left": {
          "type": "BinaryExpression",
          "start": 783,
          "end": 808,
          "left": {
            "type": "Literal",
            "start": 783,
            "end": 786,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "NewExpression",
            "start": 791,
            "end": 808,
            "callee": {
              "type": "Identifier",
              "start": 795,
              "end": 802,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 803,
                "end": 807,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 813,
          "end": 814,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 816,
        "end": 924,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 820,
            "end": 922,
            "argument": {
              "type": "NewExpression",
              "start": 826,
              "end": 921,
              "callee": {
                "type": "Identifier",
                "start": 830,
                "end": 842,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 843,
                  "end": 920,
                  "left": {
                    "type": "Literal",
                    "start": 843,
                    "end": 890,
                    "value": "#4: \"1\" >>> new Boolean(true) === 0. Actual: ",
                    "raw": "'#4: \"1\" >>> new Boolean(true) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 893,
                    "end": 920,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 894,
                      "end": 919,
                      "left": {
                        "type": "Literal",
                        "start": 894,
                        "end": 897,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "NewExpression",
                        "start": 902,
                        "end": 919,
                        "callee": {
                          "type": "Identifier",
                          "start": 906,
                          "end": 913,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 914,
                            "end": 918,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 936,
      "end": 1078,
      "test": {
        "type": "BinaryExpression",
        "start": 940,
        "end": 970,
        "left": {
          "type": "BinaryExpression",
          "start": 940,
          "end": 964,
          "left": {
            "type": "Literal",
            "start": 940,
            "end": 944,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          },
          "operator": ">>>",
          "right": {
            "type": "NewExpression",
            "start": 949,
            "end": 964,
            "callee": {
              "type": "Identifier",
              "start": 953,
              "end": 959,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 960,
                "end": 963,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 969,
          "end": 970,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 972,
        "end": 1078,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 976,
            "end": 1076,
            "argument": {
              "type": "NewExpression",
              "start": 982,
              "end": 1075,
              "callee": {
                "type": "Identifier",
                "start": 986,
                "end": 998,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 999,
                  "end": 1074,
                  "left": {
                    "type": "Literal",
                    "start": 999,
                    "end": 1045,
                    "value": "#5: true >>> new String(\"1\") === 0. Actual: ",
                    "raw": "'#5: true >>> new String(\"1\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1048,
                    "end": 1074,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1049,
                      "end": 1073,
                      "left": {
                        "type": "Literal",
                        "start": 1049,
                        "end": 1053,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1058,
                        "end": 1073,
                        "callee": {
                          "type": "Identifier",
                          "start": 1062,
                          "end": 1068,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1069,
                            "end": 1072,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1090,
      "end": 1232,
      "test": {
        "type": "BinaryExpression",
        "start": 1094,
        "end": 1124,
        "left": {
          "type": "BinaryExpression",
          "start": 1094,
          "end": 1118,
          "left": {
            "type": "NewExpression",
            "start": 1094,
            "end": 1109,
            "callee": {
              "type": "Identifier",
              "start": 1098,
              "end": 1104,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1105,
                "end": 1108,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>>",
          "right": {
            "type": "Literal",
            "start": 1114,
            "end": 1118,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1123,
          "end": 1124,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1126,
        "end": 1232,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1130,
            "end": 1230,
            "argument": {
              "type": "NewExpression",
              "start": 1136,
              "end": 1229,
              "callee": {
                "type": "Identifier",
                "start": 1140,
                "end": 1152,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1153,
                  "end": 1228,
                  "left": {
                    "type": "Literal",
                    "start": 1153,
                    "end": 1199,
                    "value": "#6: new String(\"1\") >>> true === 0. Actual: ",
                    "raw": "'#6: new String(\"1\") >>> true === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1202,
                    "end": 1228,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1203,
                      "end": 1227,
                      "left": {
                        "type": "NewExpression",
                        "start": 1203,
                        "end": 1218,
                        "callee": {
                          "type": "Identifier",
                          "start": 1207,
                          "end": 1213,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1214,
                            "end": 1217,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "Literal",
                        "start": 1223,
                        "end": 1227,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1244,
      "end": 1425,
      "test": {
        "type": "BinaryExpression",
        "start": 1248,
        "end": 1291,
        "left": {
          "type": "BinaryExpression",
          "start": 1248,
          "end": 1285,
          "left": {
            "type": "NewExpression",
            "start": 1248,
            "end": 1265,
            "callee": {
              "type": "Identifier",
              "start": 1252,
              "end": 1259,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1260,
                "end": 1264,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>>",
          "right": {
            "type": "NewExpression",
            "start": 1270,
            "end": 1285,
            "callee": {
              "type": "Identifier",
              "start": 1274,
              "end": 1280,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1281,
                "end": 1284,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1290,
          "end": 1291,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1293,
        "end": 1425,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1297,
            "end": 1423,
            "argument": {
              "type": "NewExpression",
              "start": 1303,
              "end": 1422,
              "callee": {
                "type": "Identifier",
                "start": 1307,
                "end": 1319,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1320,
                  "end": 1421,
                  "left": {
                    "type": "Literal",
                    "start": 1320,
                    "end": 1379,
                    "value": "#7: new Boolean(true) >>> new String(\"1\") === 0. Actual: ",
                    "raw": "'#7: new Boolean(true) >>> new String(\"1\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1382,
                    "end": 1421,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1383,
                      "end": 1420,
                      "left": {
                        "type": "NewExpression",
                        "start": 1383,
                        "end": 1400,
                        "callee": {
                          "type": "Identifier",
                          "start": 1387,
                          "end": 1394,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1395,
                            "end": 1399,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1405,
                        "end": 1420,
                        "callee": {
                          "type": "Identifier",
                          "start": 1409,
                          "end": 1415,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1416,
                            "end": 1419,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1437,
      "end": 1618,
      "test": {
        "type": "BinaryExpression",
        "start": 1441,
        "end": 1484,
        "left": {
          "type": "BinaryExpression",
          "start": 1441,
          "end": 1478,
          "left": {
            "type": "NewExpression",
            "start": 1441,
            "end": 1456,
            "callee": {
              "type": "Identifier",
              "start": 1445,
              "end": 1451,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1452,
                "end": 1455,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>>",
          "right": {
            "type": "NewExpression",
            "start": 1461,
            "end": 1478,
            "callee": {
              "type": "Identifier",
              "start": 1465,
              "end": 1472,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1473,
                "end": 1477,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1483,
          "end": 1484,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1486,
        "end": 1618,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1490,
            "end": 1616,
            "argument": {
              "type": "NewExpression",
              "start": 1496,
              "end": 1615,
              "callee": {
                "type": "Identifier",
                "start": 1500,
                "end": 1512,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1513,
                  "end": 1614,
                  "left": {
                    "type": "Literal",
                    "start": 1513,
                    "end": 1572,
                    "value": "#8: new String(\"1\") >>> new Boolean(true) === 0. Actual: ",
                    "raw": "'#8: new String(\"1\") >>> new Boolean(true) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1575,
                    "end": 1614,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1576,
                      "end": 1613,
                      "left": {
                        "type": "NewExpression",
                        "start": 1576,
                        "end": 1591,
                        "callee": {
                          "type": "Identifier",
                          "start": 1580,
                          "end": 1586,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1587,
                            "end": 1590,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1596,
                        "end": 1613,
                        "callee": {
                          "type": "Identifier",
                          "start": 1600,
                          "end": 1607,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1608,
                            "end": 1612,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}