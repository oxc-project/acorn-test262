{
  "type": "Program",
  "start": 0,
  "end": 945,
  "body": [
    {
      "type": "IfStatement",
      "start": 328,
      "end": 434,
      "test": {
        "type": "BinaryExpression",
        "start": 332,
        "end": 350,
        "left": {
          "type": "BinaryExpression",
          "start": 332,
          "end": 344,
          "left": {
            "type": "Literal",
            "start": 332,
            "end": 336,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 340,
            "end": 344,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 349,
          "end": 350,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 352,
        "end": 434,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 356,
            "end": 432,
            "argument": {
              "type": "NewExpression",
              "start": 362,
              "end": 431,
              "callee": {
                "type": "Identifier",
                "start": 366,
                "end": 378,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 379,
                  "end": 430,
                  "left": {
                    "type": "Literal",
                    "start": 379,
                    "end": 413,
                    "value": "#1: true >> true === 0. Actual: ",
                    "raw": "'#1: true >> true === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 416,
                    "end": 430,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 417,
                      "end": 429,
                      "left": {
                        "type": "Literal",
                        "start": 417,
                        "end": 421,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 425,
                        "end": 429,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 446,
      "end": 591,
      "test": {
        "type": "BinaryExpression",
        "start": 450,
        "end": 481,
        "left": {
          "type": "BinaryExpression",
          "start": 450,
          "end": 475,
          "left": {
            "type": "NewExpression",
            "start": 450,
            "end": 467,
            "callee": {
              "type": "Identifier",
              "start": 454,
              "end": 461,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 462,
                "end": 466,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 471,
            "end": 475,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 480,
          "end": 481,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 483,
        "end": 591,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 487,
            "end": 589,
            "argument": {
              "type": "NewExpression",
              "start": 493,
              "end": 588,
              "callee": {
                "type": "Identifier",
                "start": 497,
                "end": 509,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 510,
                  "end": 587,
                  "left": {
                    "type": "Literal",
                    "start": 510,
                    "end": 557,
                    "value": "#2: new Boolean(true) >> true === 0. Actual: ",
                    "raw": "'#2: new Boolean(true) >> true === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 560,
                    "end": 587,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 561,
                      "end": 586,
                      "left": {
                        "type": "NewExpression",
                        "start": 561,
                        "end": 578,
                        "callee": {
                          "type": "Identifier",
                          "start": 565,
                          "end": 572,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 573,
                            "end": 577,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 582,
                        "end": 586,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 603,
      "end": 748,
      "test": {
        "type": "BinaryExpression",
        "start": 607,
        "end": 638,
        "left": {
          "type": "BinaryExpression",
          "start": 607,
          "end": 632,
          "left": {
            "type": "Literal",
            "start": 607,
            "end": 611,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "NewExpression",
            "start": 615,
            "end": 632,
            "callee": {
              "type": "Identifier",
              "start": 619,
              "end": 626,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 627,
                "end": 631,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 637,
          "end": 638,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 640,
        "end": 748,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 644,
            "end": 746,
            "argument": {
              "type": "NewExpression",
              "start": 650,
              "end": 745,
              "callee": {
                "type": "Identifier",
                "start": 654,
                "end": 666,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 667,
                  "end": 744,
                  "left": {
                    "type": "Literal",
                    "start": 667,
                    "end": 714,
                    "value": "#3: true >> new Boolean(true) === 0. Actual: ",
                    "raw": "'#3: true >> new Boolean(true) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 717,
                    "end": 744,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 718,
                      "end": 743,
                      "left": {
                        "type": "Literal",
                        "start": 718,
                        "end": 722,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "NewExpression",
                        "start": 726,
                        "end": 743,
                        "callee": {
                          "type": "Identifier",
                          "start": 730,
                          "end": 737,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 738,
                            "end": 742,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 760,
      "end": 944,
      "test": {
        "type": "BinaryExpression",
        "start": 764,
        "end": 808,
        "left": {
          "type": "BinaryExpression",
          "start": 764,
          "end": 802,
          "left": {
            "type": "NewExpression",
            "start": 764,
            "end": 781,
            "callee": {
              "type": "Identifier",
              "start": 768,
              "end": 775,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 776,
                "end": 780,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>",
          "right": {
            "type": "NewExpression",
            "start": 785,
            "end": 802,
            "callee": {
              "type": "Identifier",
              "start": 789,
              "end": 796,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 797,
                "end": 801,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 807,
          "end": 808,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 810,
        "end": 944,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 814,
            "end": 942,
            "argument": {
              "type": "NewExpression",
              "start": 820,
              "end": 941,
              "callee": {
                "type": "Identifier",
                "start": 824,
                "end": 836,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 837,
                  "end": 940,
                  "left": {
                    "type": "Literal",
                    "start": 837,
                    "end": 897,
                    "value": "#4: new Boolean(true) >> new Boolean(true) === 0. Actual: ",
                    "raw": "'#4: new Boolean(true) >> new Boolean(true) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 900,
                    "end": 940,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 901,
                      "end": 939,
                      "left": {
                        "type": "NewExpression",
                        "start": 901,
                        "end": 918,
                        "callee": {
                          "type": "Identifier",
                          "start": 905,
                          "end": 912,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 913,
                            "end": 917,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>",
                      "right": {
                        "type": "NewExpression",
                        "start": 922,
                        "end": 939,
                        "callee": {
                          "type": "Identifier",
                          "start": 926,
                          "end": 933,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 934,
                            "end": 938,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}