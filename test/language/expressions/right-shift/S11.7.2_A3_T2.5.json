{
  "type": "Program",
  "start": 0,
  "end": 1593,
  "body": [
    {
      "type": "IfStatement",
      "start": 384,
      "end": 487,
      "test": {
        "type": "BinaryExpression",
        "start": 388,
        "end": 405,
        "left": {
          "type": "BinaryExpression",
          "start": 388,
          "end": 399,
          "left": {
            "type": "Literal",
            "start": 388,
            "end": 392,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 396,
            "end": 399,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 404,
          "end": 405,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 407,
        "end": 487,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 411,
            "end": 485,
            "argument": {
              "type": "NewExpression",
              "start": 417,
              "end": 484,
              "callee": {
                "type": "Identifier",
                "start": 421,
                "end": 433,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 434,
                  "end": 483,
                  "left": {
                    "type": "Literal",
                    "start": 434,
                    "end": 467,
                    "value": "#1: true >> \"1\" === 0. Actual: ",
                    "raw": "'#1: true >> \"1\" === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 470,
                    "end": 483,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 471,
                      "end": 482,
                      "left": {
                        "type": "Literal",
                        "start": 471,
                        "end": 475,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 479,
                        "end": 482,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 499,
      "end": 602,
      "test": {
        "type": "BinaryExpression",
        "start": 503,
        "end": 520,
        "left": {
          "type": "BinaryExpression",
          "start": 503,
          "end": 514,
          "left": {
            "type": "Literal",
            "start": 503,
            "end": 506,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 510,
            "end": 514,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 519,
          "end": 520,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 522,
        "end": 602,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 526,
            "end": 600,
            "argument": {
              "type": "NewExpression",
              "start": 532,
              "end": 599,
              "callee": {
                "type": "Identifier",
                "start": 536,
                "end": 548,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 549,
                  "end": 598,
                  "left": {
                    "type": "Literal",
                    "start": 549,
                    "end": 582,
                    "value": "#2: \"1\" >> true === 0. Actual: ",
                    "raw": "'#2: \"1\" >> true === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 585,
                    "end": 598,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 586,
                      "end": 597,
                      "left": {
                        "type": "Literal",
                        "start": 586,
                        "end": 589,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 593,
                        "end": 597,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 614,
      "end": 756,
      "test": {
        "type": "BinaryExpression",
        "start": 618,
        "end": 648,
        "left": {
          "type": "BinaryExpression",
          "start": 618,
          "end": 642,
          "left": {
            "type": "NewExpression",
            "start": 618,
            "end": 635,
            "callee": {
              "type": "Identifier",
              "start": 622,
              "end": 629,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 630,
                "end": 634,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 639,
            "end": 642,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 647,
          "end": 648,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 650,
        "end": 756,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 654,
            "end": 754,
            "argument": {
              "type": "NewExpression",
              "start": 660,
              "end": 753,
              "callee": {
                "type": "Identifier",
                "start": 664,
                "end": 676,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 677,
                  "end": 752,
                  "left": {
                    "type": "Literal",
                    "start": 677,
                    "end": 723,
                    "value": "#3: new Boolean(true) >> \"1\" === 0. Actual: ",
                    "raw": "'#3: new Boolean(true) >> \"1\" === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 726,
                    "end": 752,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 727,
                      "end": 751,
                      "left": {
                        "type": "NewExpression",
                        "start": 727,
                        "end": 744,
                        "callee": {
                          "type": "Identifier",
                          "start": 731,
                          "end": 738,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 739,
                            "end": 743,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 748,
                        "end": 751,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 768,
      "end": 910,
      "test": {
        "type": "BinaryExpression",
        "start": 772,
        "end": 802,
        "left": {
          "type": "BinaryExpression",
          "start": 772,
          "end": 796,
          "left": {
            "type": "Literal",
            "start": 772,
            "end": 775,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "NewExpression",
            "start": 779,
            "end": 796,
            "callee": {
              "type": "Identifier",
              "start": 783,
              "end": 790,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 791,
                "end": 795,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 801,
          "end": 802,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 804,
        "end": 910,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 808,
            "end": 908,
            "argument": {
              "type": "NewExpression",
              "start": 814,
              "end": 907,
              "callee": {
                "type": "Identifier",
                "start": 818,
                "end": 830,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 831,
                  "end": 906,
                  "left": {
                    "type": "Literal",
                    "start": 831,
                    "end": 877,
                    "value": "#4: \"1\" >> new Boolean(true) === 0. Actual: ",
                    "raw": "'#4: \"1\" >> new Boolean(true) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 880,
                    "end": 906,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 881,
                      "end": 905,
                      "left": {
                        "type": "Literal",
                        "start": 881,
                        "end": 884,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "NewExpression",
                        "start": 888,
                        "end": 905,
                        "callee": {
                          "type": "Identifier",
                          "start": 892,
                          "end": 899,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 900,
                            "end": 904,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 922,
      "end": 1061,
      "test": {
        "type": "BinaryExpression",
        "start": 926,
        "end": 955,
        "left": {
          "type": "BinaryExpression",
          "start": 926,
          "end": 949,
          "left": {
            "type": "Literal",
            "start": 926,
            "end": 930,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "NewExpression",
            "start": 934,
            "end": 949,
            "callee": {
              "type": "Identifier",
              "start": 938,
              "end": 944,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 945,
                "end": 948,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 954,
          "end": 955,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 957,
        "end": 1061,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 961,
            "end": 1059,
            "argument": {
              "type": "NewExpression",
              "start": 967,
              "end": 1058,
              "callee": {
                "type": "Identifier",
                "start": 971,
                "end": 983,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 984,
                  "end": 1057,
                  "left": {
                    "type": "Literal",
                    "start": 984,
                    "end": 1029,
                    "value": "#5: true >> new String(\"1\") === 0. Actual: ",
                    "raw": "'#5: true >> new String(\"1\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1032,
                    "end": 1057,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1033,
                      "end": 1056,
                      "left": {
                        "type": "Literal",
                        "start": 1033,
                        "end": 1037,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1041,
                        "end": 1056,
                        "callee": {
                          "type": "Identifier",
                          "start": 1045,
                          "end": 1051,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1052,
                            "end": 1055,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1073,
      "end": 1212,
      "test": {
        "type": "BinaryExpression",
        "start": 1077,
        "end": 1106,
        "left": {
          "type": "BinaryExpression",
          "start": 1077,
          "end": 1100,
          "left": {
            "type": "NewExpression",
            "start": 1077,
            "end": 1092,
            "callee": {
              "type": "Identifier",
              "start": 1081,
              "end": 1087,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1088,
                "end": 1091,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 1096,
            "end": 1100,
            "value": true,
            "raw": "true",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1105,
          "end": 1106,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1108,
        "end": 1212,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1112,
            "end": 1210,
            "argument": {
              "type": "NewExpression",
              "start": 1118,
              "end": 1209,
              "callee": {
                "type": "Identifier",
                "start": 1122,
                "end": 1134,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1135,
                  "end": 1208,
                  "left": {
                    "type": "Literal",
                    "start": 1135,
                    "end": 1180,
                    "value": "#6: new String(\"1\") >> true === 0. Actual: ",
                    "raw": "'#6: new String(\"1\") >> true === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1183,
                    "end": 1208,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1184,
                      "end": 1207,
                      "left": {
                        "type": "NewExpression",
                        "start": 1184,
                        "end": 1199,
                        "callee": {
                          "type": "Identifier",
                          "start": 1188,
                          "end": 1194,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1195,
                            "end": 1198,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 1203,
                        "end": 1207,
                        "value": true,
                        "raw": "true",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1224,
      "end": 1402,
      "test": {
        "type": "BinaryExpression",
        "start": 1228,
        "end": 1270,
        "left": {
          "type": "BinaryExpression",
          "start": 1228,
          "end": 1264,
          "left": {
            "type": "NewExpression",
            "start": 1228,
            "end": 1245,
            "callee": {
              "type": "Identifier",
              "start": 1232,
              "end": 1239,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1240,
                "end": 1244,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>",
          "right": {
            "type": "NewExpression",
            "start": 1249,
            "end": 1264,
            "callee": {
              "type": "Identifier",
              "start": 1253,
              "end": 1259,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1260,
                "end": 1263,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1269,
          "end": 1270,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1272,
        "end": 1402,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1276,
            "end": 1400,
            "argument": {
              "type": "NewExpression",
              "start": 1282,
              "end": 1399,
              "callee": {
                "type": "Identifier",
                "start": 1286,
                "end": 1298,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1299,
                  "end": 1398,
                  "left": {
                    "type": "Literal",
                    "start": 1299,
                    "end": 1357,
                    "value": "#7: new Boolean(true) >> new String(\"1\") === 0. Actual: ",
                    "raw": "'#7: new Boolean(true) >> new String(\"1\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1360,
                    "end": 1398,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1361,
                      "end": 1397,
                      "left": {
                        "type": "NewExpression",
                        "start": 1361,
                        "end": 1378,
                        "callee": {
                          "type": "Identifier",
                          "start": 1365,
                          "end": 1372,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1373,
                            "end": 1377,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1382,
                        "end": 1397,
                        "callee": {
                          "type": "Identifier",
                          "start": 1386,
                          "end": 1392,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1393,
                            "end": 1396,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1414,
      "end": 1592,
      "test": {
        "type": "BinaryExpression",
        "start": 1418,
        "end": 1460,
        "left": {
          "type": "BinaryExpression",
          "start": 1418,
          "end": 1454,
          "left": {
            "type": "NewExpression",
            "start": 1418,
            "end": 1433,
            "callee": {
              "type": "Identifier",
              "start": 1422,
              "end": 1428,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1429,
                "end": 1432,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>",
          "right": {
            "type": "NewExpression",
            "start": 1437,
            "end": 1454,
            "callee": {
              "type": "Identifier",
              "start": 1441,
              "end": 1448,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1449,
                "end": 1453,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1459,
          "end": 1460,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1462,
        "end": 1592,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1466,
            "end": 1590,
            "argument": {
              "type": "NewExpression",
              "start": 1472,
              "end": 1589,
              "callee": {
                "type": "Identifier",
                "start": 1476,
                "end": 1488,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1489,
                  "end": 1588,
                  "left": {
                    "type": "Literal",
                    "start": 1489,
                    "end": 1547,
                    "value": "#8: new String(\"1\") >> new Boolean(true) === 0. Actual: ",
                    "raw": "'#8: new String(\"1\") >> new Boolean(true) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1550,
                    "end": 1588,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1551,
                      "end": 1587,
                      "left": {
                        "type": "NewExpression",
                        "start": 1551,
                        "end": 1566,
                        "callee": {
                          "type": "Identifier",
                          "start": 1555,
                          "end": 1561,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1562,
                            "end": 1565,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1570,
                        "end": 1587,
                        "callee": {
                          "type": "Identifier",
                          "start": 1574,
                          "end": 1581,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1582,
                            "end": 1586,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}