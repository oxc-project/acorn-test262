{
  "type": "Program",
  "start": 0,
  "end": 1722,
  "body": [
    {
      "type": "IfStatement",
      "start": 383,
      "end": 477,
      "test": {
        "type": "BinaryExpression",
        "start": 387,
        "end": 401,
        "left": {
          "type": "BinaryExpression",
          "start": 387,
          "end": 395,
          "left": {
            "type": "Literal",
            "start": 387,
            "end": 390,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 394,
            "end": 395,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 400,
          "end": 401,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 403,
        "end": 477,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 407,
            "end": 475,
            "argument": {
              "type": "NewExpression",
              "start": 413,
              "end": 474,
              "callee": {
                "type": "Identifier",
                "start": 417,
                "end": 429,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 430,
                  "end": 473,
                  "left": {
                    "type": "Literal",
                    "start": 430,
                    "end": 460,
                    "value": "#1: \"1\" >> 1 === 0. Actual: ",
                    "raw": "'#1: \"1\" >> 1 === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 463,
                    "end": 473,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 464,
                      "end": 472,
                      "left": {
                        "type": "Literal",
                        "start": 464,
                        "end": 467,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 471,
                        "end": 472,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 489,
      "end": 583,
      "test": {
        "type": "BinaryExpression",
        "start": 493,
        "end": 507,
        "left": {
          "type": "BinaryExpression",
          "start": 493,
          "end": 501,
          "left": {
            "type": "Literal",
            "start": 493,
            "end": 494,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 498,
            "end": 501,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 506,
          "end": 507,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 509,
        "end": 583,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 513,
            "end": 581,
            "argument": {
              "type": "NewExpression",
              "start": 519,
              "end": 580,
              "callee": {
                "type": "Identifier",
                "start": 523,
                "end": 535,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 536,
                  "end": 579,
                  "left": {
                    "type": "Literal",
                    "start": 536,
                    "end": 566,
                    "value": "#2: 1 >> \"1\" === 0. Actual: ",
                    "raw": "'#2: 1 >> \"1\" === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 569,
                    "end": 579,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 570,
                      "end": 578,
                      "left": {
                        "type": "Literal",
                        "start": 570,
                        "end": 571,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 575,
                        "end": 578,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 595,
      "end": 725,
      "test": {
        "type": "BinaryExpression",
        "start": 599,
        "end": 625,
        "left": {
          "type": "BinaryExpression",
          "start": 599,
          "end": 619,
          "left": {
            "type": "NewExpression",
            "start": 599,
            "end": 614,
            "callee": {
              "type": "Identifier",
              "start": 603,
              "end": 609,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 610,
                "end": 613,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 618,
            "end": 619,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 624,
          "end": 625,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 627,
        "end": 725,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 631,
            "end": 723,
            "argument": {
              "type": "NewExpression",
              "start": 637,
              "end": 722,
              "callee": {
                "type": "Identifier",
                "start": 641,
                "end": 653,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 654,
                  "end": 721,
                  "left": {
                    "type": "Literal",
                    "start": 654,
                    "end": 696,
                    "value": "#3: new String(\"1\") >> 1 === 0. Actual: ",
                    "raw": "'#3: new String(\"1\") >> 1 === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 699,
                    "end": 721,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 700,
                      "end": 720,
                      "left": {
                        "type": "NewExpression",
                        "start": 700,
                        "end": 715,
                        "callee": {
                          "type": "Identifier",
                          "start": 704,
                          "end": 710,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 711,
                            "end": 714,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 719,
                        "end": 720,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 737,
      "end": 867,
      "test": {
        "type": "BinaryExpression",
        "start": 741,
        "end": 767,
        "left": {
          "type": "BinaryExpression",
          "start": 741,
          "end": 761,
          "left": {
            "type": "Literal",
            "start": 741,
            "end": 742,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "NewExpression",
            "start": 746,
            "end": 761,
            "callee": {
              "type": "Identifier",
              "start": 750,
              "end": 756,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 757,
                "end": 760,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 766,
          "end": 767,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 769,
        "end": 867,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 773,
            "end": 865,
            "argument": {
              "type": "NewExpression",
              "start": 779,
              "end": 864,
              "callee": {
                "type": "Identifier",
                "start": 783,
                "end": 795,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 796,
                  "end": 863,
                  "left": {
                    "type": "Literal",
                    "start": 796,
                    "end": 838,
                    "value": "#4: 1 >> new String(\"1\") === 0. Actual: ",
                    "raw": "'#4: 1 >> new String(\"1\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 841,
                    "end": 863,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 842,
                      "end": 862,
                      "left": {
                        "type": "Literal",
                        "start": 842,
                        "end": 843,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "NewExpression",
                        "start": 847,
                        "end": 862,
                        "callee": {
                          "type": "Identifier",
                          "start": 851,
                          "end": 857,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 858,
                            "end": 861,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 879,
      "end": 1009,
      "test": {
        "type": "BinaryExpression",
        "start": 883,
        "end": 909,
        "left": {
          "type": "BinaryExpression",
          "start": 883,
          "end": 903,
          "left": {
            "type": "Literal",
            "start": 883,
            "end": 886,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "NewExpression",
            "start": 890,
            "end": 903,
            "callee": {
              "type": "Identifier",
              "start": 894,
              "end": 900,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 901,
                "end": 902,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 908,
          "end": 909,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 911,
        "end": 1009,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 915,
            "end": 1007,
            "argument": {
              "type": "NewExpression",
              "start": 921,
              "end": 1006,
              "callee": {
                "type": "Identifier",
                "start": 925,
                "end": 937,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 938,
                  "end": 1005,
                  "left": {
                    "type": "Literal",
                    "start": 938,
                    "end": 980,
                    "value": "#5: \"1\" >> new Number(1) === 0. Actual: ",
                    "raw": "'#5: \"1\" >> new Number(1) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 983,
                    "end": 1005,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 984,
                      "end": 1004,
                      "left": {
                        "type": "Literal",
                        "start": 984,
                        "end": 987,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "NewExpression",
                        "start": 991,
                        "end": 1004,
                        "callee": {
                          "type": "Identifier",
                          "start": 995,
                          "end": 1001,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1002,
                            "end": 1003,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1021,
      "end": 1151,
      "test": {
        "type": "BinaryExpression",
        "start": 1025,
        "end": 1051,
        "left": {
          "type": "BinaryExpression",
          "start": 1025,
          "end": 1045,
          "left": {
            "type": "NewExpression",
            "start": 1025,
            "end": 1038,
            "callee": {
              "type": "Identifier",
              "start": 1029,
              "end": 1035,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1036,
                "end": 1037,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 1042,
            "end": 1045,
            "value": "1",
            "raw": "\"1\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1050,
          "end": 1051,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1053,
        "end": 1151,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1057,
            "end": 1149,
            "argument": {
              "type": "NewExpression",
              "start": 1063,
              "end": 1148,
              "callee": {
                "type": "Identifier",
                "start": 1067,
                "end": 1079,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1080,
                  "end": 1147,
                  "left": {
                    "type": "Literal",
                    "start": 1080,
                    "end": 1122,
                    "value": "#6: new Number(1) >> \"1\" === 0. Actual: ",
                    "raw": "'#6: new Number(1) >> \"1\" === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1125,
                    "end": 1147,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1126,
                      "end": 1146,
                      "left": {
                        "type": "NewExpression",
                        "start": 1126,
                        "end": 1139,
                        "callee": {
                          "type": "Identifier",
                          "start": 1130,
                          "end": 1136,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1137,
                            "end": 1138,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 1143,
                        "end": 1146,
                        "value": "1",
                        "raw": "\"1\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1163,
      "end": 1329,
      "test": {
        "type": "BinaryExpression",
        "start": 1167,
        "end": 1205,
        "left": {
          "type": "BinaryExpression",
          "start": 1167,
          "end": 1199,
          "left": {
            "type": "NewExpression",
            "start": 1167,
            "end": 1182,
            "callee": {
              "type": "Identifier",
              "start": 1171,
              "end": 1177,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1178,
                "end": 1181,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>",
          "right": {
            "type": "NewExpression",
            "start": 1186,
            "end": 1199,
            "callee": {
              "type": "Identifier",
              "start": 1190,
              "end": 1196,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1197,
                "end": 1198,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1204,
          "end": 1205,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1207,
        "end": 1329,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1211,
            "end": 1327,
            "argument": {
              "type": "NewExpression",
              "start": 1217,
              "end": 1326,
              "callee": {
                "type": "Identifier",
                "start": 1221,
                "end": 1233,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1234,
                  "end": 1325,
                  "left": {
                    "type": "Literal",
                    "start": 1234,
                    "end": 1288,
                    "value": "#7: new String(\"1\") >> new Number(1) === 0. Actual: ",
                    "raw": "'#7: new String(\"1\") >> new Number(1) === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1291,
                    "end": 1325,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1292,
                      "end": 1324,
                      "left": {
                        "type": "NewExpression",
                        "start": 1292,
                        "end": 1307,
                        "callee": {
                          "type": "Identifier",
                          "start": 1296,
                          "end": 1302,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1303,
                            "end": 1306,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1311,
                        "end": 1324,
                        "callee": {
                          "type": "Identifier",
                          "start": 1315,
                          "end": 1321,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1322,
                            "end": 1323,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1341,
      "end": 1507,
      "test": {
        "type": "BinaryExpression",
        "start": 1345,
        "end": 1383,
        "left": {
          "type": "BinaryExpression",
          "start": 1345,
          "end": 1377,
          "left": {
            "type": "NewExpression",
            "start": 1345,
            "end": 1358,
            "callee": {
              "type": "Identifier",
              "start": 1349,
              "end": 1355,
              "name": "Number"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1356,
                "end": 1357,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          },
          "operator": ">>",
          "right": {
            "type": "NewExpression",
            "start": 1362,
            "end": 1377,
            "callee": {
              "type": "Identifier",
              "start": 1366,
              "end": 1372,
              "name": "String"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 1373,
                "end": 1376,
                "value": "1",
                "raw": "\"1\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1382,
          "end": 1383,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1385,
        "end": 1507,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1389,
            "end": 1505,
            "argument": {
              "type": "NewExpression",
              "start": 1395,
              "end": 1504,
              "callee": {
                "type": "Identifier",
                "start": 1399,
                "end": 1411,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1412,
                  "end": 1503,
                  "left": {
                    "type": "Literal",
                    "start": 1412,
                    "end": 1466,
                    "value": "#8: new Number(1) >> new String(\"1\") === 0. Actual: ",
                    "raw": "'#8: new Number(1) >> new String(\"1\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1469,
                    "end": 1503,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1470,
                      "end": 1502,
                      "left": {
                        "type": "NewExpression",
                        "start": 1470,
                        "end": 1483,
                        "callee": {
                          "type": "Identifier",
                          "start": 1474,
                          "end": 1480,
                          "name": "Number"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1481,
                            "end": 1482,
                            "value": 1,
                            "raw": "1",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      },
                      "operator": ">>",
                      "right": {
                        "type": "NewExpression",
                        "start": 1487,
                        "end": 1502,
                        "callee": {
                          "type": "Identifier",
                          "start": 1491,
                          "end": 1497,
                          "name": "String"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 1498,
                            "end": 1501,
                            "value": "1",
                            "raw": "\"1\"",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1519,
      "end": 1613,
      "test": {
        "type": "BinaryExpression",
        "start": 1523,
        "end": 1537,
        "left": {
          "type": "BinaryExpression",
          "start": 1523,
          "end": 1531,
          "left": {
            "type": "Literal",
            "start": 1523,
            "end": 1526,
            "value": "x",
            "raw": "\"x\"",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 1530,
            "end": 1531,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1536,
          "end": 1537,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1539,
        "end": 1613,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1543,
            "end": 1611,
            "argument": {
              "type": "NewExpression",
              "start": 1549,
              "end": 1610,
              "callee": {
                "type": "Identifier",
                "start": 1553,
                "end": 1565,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1566,
                  "end": 1609,
                  "left": {
                    "type": "Literal",
                    "start": 1566,
                    "end": 1596,
                    "value": "#9: \"x\" >> 1 === 0. Actual: ",
                    "raw": "'#9: \"x\" >> 1 === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1599,
                    "end": 1609,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1600,
                      "end": 1608,
                      "left": {
                        "type": "Literal",
                        "start": 1600,
                        "end": 1603,
                        "value": "x",
                        "raw": "\"x\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 1607,
                        "end": 1608,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1626,
      "end": 1721,
      "test": {
        "type": "BinaryExpression",
        "start": 1630,
        "end": 1644,
        "left": {
          "type": "BinaryExpression",
          "start": 1630,
          "end": 1638,
          "left": {
            "type": "Literal",
            "start": 1630,
            "end": 1631,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "operator": ">>",
          "right": {
            "type": "Literal",
            "start": 1635,
            "end": 1638,
            "value": "x",
            "raw": "\"x\"",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1643,
          "end": 1644,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1646,
        "end": 1721,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1650,
            "end": 1719,
            "argument": {
              "type": "NewExpression",
              "start": 1656,
              "end": 1718,
              "callee": {
                "type": "Identifier",
                "start": 1660,
                "end": 1672,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1673,
                  "end": 1717,
                  "left": {
                    "type": "Literal",
                    "start": 1673,
                    "end": 1704,
                    "value": "#10: 1 >> \"x\" === 1. Actual: ",
                    "raw": "'#10: 1 >> \"x\" === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1707,
                    "end": 1717,
                    "expression": {
                      "type": "BinaryExpression",
                      "start": 1708,
                      "end": 1716,
                      "left": {
                        "type": "Literal",
                        "start": 1708,
                        "end": 1709,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": ">>",
                      "right": {
                        "type": "Literal",
                        "start": 1713,
                        "end": 1716,
                        "value": "x",
                        "raw": "\"x\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}