{
  "type": "Program",
  "start": 0,
  "end": 498,
  "body": [
    {
      "type": "IfStatement",
      "start": 287,
      "end": 396,
      "test": {
        "type": "BinaryExpression",
        "start": 291,
        "end": 324,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 291,
          "end": 310,
          "expression": {
            "type": "LogicalExpression",
            "start": 292,
            "end": 309,
            "left": {
              "type": "Literal",
              "start": 292,
              "end": 296,
              "value": true,
              "raw": "true",
              "regex": null,
              "bigint": null
            },
            "operator": "&&",
            "right": {
              "type": "Identifier",
              "start": 300,
              "end": 309,
              "name": "undefined"
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Identifier",
          "start": 315,
          "end": 324,
          "name": "undefined"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 326,
        "end": 396,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 330,
            "end": 394,
            "argument": {
              "type": "NewExpression",
              "start": 336,
              "end": 393,
              "callee": {
                "type": "Identifier",
                "start": 340,
                "end": 352,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 353,
                  "end": 392,
                  "value": "#1: (true && undefined) === undefined",
                  "raw": "'#1: (true && undefined) === undefined'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 408,
      "end": 497,
      "test": {
        "type": "BinaryExpression",
        "start": 412,
        "end": 435,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 412,
          "end": 426,
          "expression": {
            "type": "LogicalExpression",
            "start": 413,
            "end": 425,
            "left": {
              "type": "Literal",
              "start": 413,
              "end": 417,
              "value": true,
              "raw": "true",
              "regex": null,
              "bigint": null
            },
            "operator": "&&",
            "right": {
              "type": "Literal",
              "start": 421,
              "end": 425,
              "value": null,
              "raw": "null",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 431,
          "end": 435,
          "value": null,
          "raw": "null",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 437,
        "end": 497,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 441,
            "end": 495,
            "argument": {
              "type": "NewExpression",
              "start": 447,
              "end": 494,
              "callee": {
                "type": "Identifier",
                "start": 451,
                "end": 463,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 464,
                  "end": 493,
                  "value": "#2: (true && null) === null",
                  "raw": "'#2: (true && null) === null'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}