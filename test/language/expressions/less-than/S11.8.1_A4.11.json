{
  "type": "Program",
  "start": 0,
  "end": 1126,
  "body": [
    {
      "type": "IfStatement",
      "start": 272,
      "end": 357,
      "test": {
        "type": "BinaryExpression",
        "start": 276,
        "end": 297,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 276,
          "end": 288,
          "expression": {
            "type": "BinaryExpression",
            "start": 277,
            "end": 287,
            "left": {
              "type": "Literal",
              "start": 277,
              "end": 280,
              "value": "x",
              "raw": "\"x\"",
              "regex": null,
              "bigint": null
            },
            "operator": "<",
            "right": {
              "type": "Literal",
              "start": 283,
              "end": 287,
              "value": "x ",
              "raw": "\"x \"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 293,
          "end": 297,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 299,
        "end": 357,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 303,
            "end": 355,
            "argument": {
              "type": "NewExpression",
              "start": 309,
              "end": 354,
              "callee": {
                "type": "Identifier",
                "start": 313,
                "end": 325,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 326,
                  "end": 353,
                  "value": "#1: (\"x\" < \"x \") === true",
                  "raw": "'#1: (\"x\" < \"x \") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 369,
      "end": 450,
      "test": {
        "type": "BinaryExpression",
        "start": 373,
        "end": 392,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 373,
          "end": 383,
          "expression": {
            "type": "BinaryExpression",
            "start": 374,
            "end": 382,
            "left": {
              "type": "Literal",
              "start": 374,
              "end": 376,
              "value": "",
              "raw": "\"\"",
              "regex": null,
              "bigint": null
            },
            "operator": "<",
            "right": {
              "type": "Literal",
              "start": 379,
              "end": 382,
              "value": "x",
              "raw": "\"x\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 388,
          "end": 392,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 394,
        "end": 450,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 398,
            "end": 448,
            "argument": {
              "type": "NewExpression",
              "start": 404,
              "end": 447,
              "callee": {
                "type": "Identifier",
                "start": 408,
                "end": 420,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 421,
                  "end": 446,
                  "value": "#2: (\"\" < \"x\") === true",
                  "raw": "'#2: (\"\" < \"x\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 462,
      "end": 552,
      "test": {
        "type": "BinaryExpression",
        "start": 466,
        "end": 490,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 466,
          "end": 481,
          "expression": {
            "type": "BinaryExpression",
            "start": 467,
            "end": 480,
            "left": {
              "type": "Literal",
              "start": 467,
              "end": 471,
              "value": "ab",
              "raw": "\"ab\"",
              "regex": null,
              "bigint": null
            },
            "operator": "<",
            "right": {
              "type": "Literal",
              "start": 474,
              "end": 480,
              "value": "abcd",
              "raw": "\"abcd\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 486,
          "end": 490,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 492,
        "end": 552,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 496,
            "end": 550,
            "argument": {
              "type": "NewExpression",
              "start": 502,
              "end": 549,
              "callee": {
                "type": "Identifier",
                "start": 506,
                "end": 518,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 519,
                  "end": 548,
                  "value": "#3: (\"ab\" < abcd\") === true",
                  "raw": "'#3: (\"ab\" < abcd\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 564,
      "end": 671,
      "test": {
        "type": "BinaryExpression",
        "start": 568,
        "end": 600,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 568,
          "end": 590,
          "expression": {
            "type": "BinaryExpression",
            "start": 569,
            "end": 589,
            "left": {
              "type": "Literal",
              "start": 569,
              "end": 575,
              "value": "abcd",
              "raw": "\"abcd\"",
              "regex": null,
              "bigint": null
            },
            "operator": "<",
            "right": {
              "type": "Literal",
              "start": 578,
              "end": 589,
              "value": "abcd",
              "raw": "\"abc\\u0064\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 595,
          "end": 600,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 602,
        "end": 671,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 606,
            "end": 669,
            "argument": {
              "type": "NewExpression",
              "start": 612,
              "end": 668,
              "callee": {
                "type": "Identifier",
                "start": 616,
                "end": 628,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 629,
                  "end": 667,
                  "value": "#4: (\"abcd\" < abc\\u0064\") === false",
                  "raw": "'#4: (\"abcd\" < abc\\\\u0064\") === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 683,
      "end": 778,
      "test": {
        "type": "BinaryExpression",
        "start": 687,
        "end": 713,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 687,
          "end": 704,
          "expression": {
            "type": "BinaryExpression",
            "start": 688,
            "end": 703,
            "left": {
              "type": "Literal",
              "start": 688,
              "end": 691,
              "value": "x",
              "raw": "\"x\"",
              "regex": null,
              "bigint": null
            },
            "operator": "<",
            "right": {
              "type": "BinaryExpression",
              "start": 694,
              "end": 703,
              "left": {
                "type": "Literal",
                "start": 694,
                "end": 697,
                "value": "x",
                "raw": "\"x\"",
                "regex": null,
                "bigint": null
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 700,
                "end": 703,
                "value": "y",
                "raw": "\"y\"",
                "regex": null,
                "bigint": null
              }
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 709,
          "end": 713,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 715,
        "end": 778,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 719,
            "end": 776,
            "argument": {
              "type": "NewExpression",
              "start": 725,
              "end": 775,
              "callee": {
                "type": "Identifier",
                "start": 729,
                "end": 741,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 742,
                  "end": 774,
                  "value": "#5: (\"x\" < \"x\" + \"y\") === true",
                  "raw": "'#5: (\"x\" < \"x\" + \"y\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "VariableDeclaration",
      "start": 790,
      "end": 802,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 794,
          "end": 801,
          "id": {
            "type": "Identifier",
            "start": 794,
            "end": 795,
            "name": "x"
          },
          "init": {
            "type": "Literal",
            "start": 798,
            "end": 801,
            "value": "x",
            "raw": "\"x\"",
            "regex": null,
            "bigint": null
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "IfStatement",
      "start": 803,
      "end": 903,
      "test": {
        "type": "BinaryExpression",
        "start": 807,
        "end": 829,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 807,
          "end": 820,
          "expression": {
            "type": "BinaryExpression",
            "start": 808,
            "end": 819,
            "left": {
              "type": "Identifier",
              "start": 808,
              "end": 809,
              "name": "x"
            },
            "operator": "<",
            "right": {
              "type": "BinaryExpression",
              "start": 812,
              "end": 819,
              "left": {
                "type": "Identifier",
                "start": 812,
                "end": 813,
                "name": "x"
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 816,
                "end": 819,
                "value": "y",
                "raw": "\"y\"",
                "regex": null,
                "bigint": null
              }
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 825,
          "end": 829,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 831,
        "end": 903,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 835,
            "end": 901,
            "argument": {
              "type": "NewExpression",
              "start": 841,
              "end": 900,
              "callee": {
                "type": "Identifier",
                "start": 845,
                "end": 857,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 858,
                  "end": 899,
                  "value": "#6: var x = \"x\"; (x < x + \"y\") === true",
                  "raw": "'#6: var x = \"x\"; (x < x + \"y\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 915,
      "end": 1026,
      "test": {
        "type": "BinaryExpression",
        "start": 919,
        "end": 952,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 919,
          "end": 943,
          "expression": {
            "type": "BinaryExpression",
            "start": 920,
            "end": 942,
            "left": {
              "type": "Literal",
              "start": 920,
              "end": 929,
              "value": "a\u0000",
              "raw": "\"a\\u0000\"",
              "regex": null,
              "bigint": null
            },
            "operator": "<",
            "right": {
              "type": "Literal",
              "start": 932,
              "end": 942,
              "value": "a\u0000a",
              "raw": "\"a\\u0000a\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 948,
          "end": 952,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 954,
        "end": 1026,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 958,
            "end": 1024,
            "argument": {
              "type": "NewExpression",
              "start": 964,
              "end": 1023,
              "callee": {
                "type": "Identifier",
                "start": 968,
                "end": 980,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 981,
                  "end": 1022,
                  "value": "#7: (\"a\\u0000\" < \"a\\u0000a\") === true",
                  "raw": "'#7: (\"a\\\\u0000\" < \"a\\\\u0000a\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1038,
      "end": 1125,
      "test": {
        "type": "BinaryExpression",
        "start": 1042,
        "end": 1064,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 1042,
          "end": 1054,
          "expression": {
            "type": "BinaryExpression",
            "start": 1043,
            "end": 1053,
            "left": {
              "type": "Literal",
              "start": 1043,
              "end": 1046,
              "value": "x",
              "raw": "\"x\"",
              "regex": null,
              "bigint": null
            },
            "operator": "<",
            "right": {
              "type": "Literal",
              "start": 1049,
              "end": 1053,
              "value": " x",
              "raw": "\" x\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1059,
          "end": 1064,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1066,
        "end": 1125,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1070,
            "end": 1123,
            "argument": {
              "type": "NewExpression",
              "start": 1076,
              "end": 1122,
              "callee": {
                "type": "Identifier",
                "start": 1080,
                "end": 1092,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 1093,
                  "end": 1121,
                  "value": "#8: (\"x\" < \" x\") === false",
                  "raw": "'#8: (\"x\" < \" x\") === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}