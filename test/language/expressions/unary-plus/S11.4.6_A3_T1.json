{
  "type": "Program",
  "start": 0,
  "end": 499,
  "body": [
    {
      "type": "IfStatement",
      "start": 274,
      "end": 362,
      "test": {
        "type": "BinaryExpression",
        "start": 278,
        "end": 290,
        "left": {
          "type": "UnaryExpression",
          "start": 278,
          "end": 284,
          "operator": "+",
          "prefix": true,
          "argument": {
            "type": "Literal",
            "start": 279,
            "end": 284,
            "value": false,
            "raw": "false",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 289,
          "end": 290,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 292,
        "end": 362,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 296,
            "end": 360,
            "argument": {
              "type": "NewExpression",
              "start": 302,
              "end": 359,
              "callee": {
                "type": "Identifier",
                "start": 306,
                "end": 318,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 319,
                  "end": 358,
                  "left": {
                    "type": "Literal",
                    "start": 319,
                    "end": 347,
                    "value": "#1: +false === 0. Actual: ",
                    "raw": "'#1: +false === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 350,
                    "end": 358,
                    "expression": {
                      "type": "UnaryExpression",
                      "start": 351,
                      "end": 357,
                      "operator": "+",
                      "prefix": true,
                      "argument": {
                        "type": "Literal",
                        "start": 352,
                        "end": 357,
                        "value": false,
                        "raw": "false",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 374,
      "end": 498,
      "test": {
        "type": "BinaryExpression",
        "start": 378,
        "end": 402,
        "left": {
          "type": "UnaryExpression",
          "start": 378,
          "end": 396,
          "operator": "+",
          "prefix": true,
          "argument": {
            "type": "NewExpression",
            "start": 379,
            "end": 396,
            "callee": {
              "type": "Identifier",
              "start": 383,
              "end": 390,
              "name": "Boolean"
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 391,
                "end": 395,
                "value": true,
                "raw": "true",
                "regex": null,
                "bigint": null
              }
            ]
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 401,
          "end": 402,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 404,
        "end": 498,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 408,
            "end": 496,
            "argument": {
              "type": "NewExpression",
              "start": 414,
              "end": 495,
              "callee": {
                "type": "Identifier",
                "start": 418,
                "end": 430,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 431,
                  "end": 494,
                  "left": {
                    "type": "Literal",
                    "start": 431,
                    "end": 471,
                    "value": "#2: +new Boolean(true) === 1. Actual: ",
                    "raw": "'#2: +new Boolean(true) === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 474,
                    "end": 494,
                    "expression": {
                      "type": "UnaryExpression",
                      "start": 475,
                      "end": 493,
                      "operator": "+",
                      "prefix": true,
                      "argument": {
                        "type": "NewExpression",
                        "start": 476,
                        "end": 493,
                        "callee": {
                          "type": "Identifier",
                          "start": 480,
                          "end": 487,
                          "name": "Boolean"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "start": 488,
                            "end": 492,
                            "value": true,
                            "raw": "true",
                            "regex": null,
                            "bigint": null
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}