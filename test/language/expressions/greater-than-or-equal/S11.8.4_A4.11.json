{
  "type": "Program",
  "start": 0,
  "end": 1125,
  "body": [
    {
      "type": "IfStatement",
      "start": 260,
      "end": 345,
      "test": {
        "type": "BinaryExpression",
        "start": 264,
        "end": 285,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 264,
          "end": 276,
          "expression": {
            "type": "BinaryExpression",
            "start": 265,
            "end": 275,
            "left": {
              "type": "Literal",
              "start": 265,
              "end": 268,
              "value": "x",
              "raw": "\"x\"",
              "regex": null,
              "bigint": null
            },
            "operator": ">=",
            "right": {
              "type": "Literal",
              "start": 272,
              "end": 275,
              "value": "x",
              "raw": "\"x\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 281,
          "end": 285,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 287,
        "end": 345,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 291,
            "end": 343,
            "argument": {
              "type": "NewExpression",
              "start": 297,
              "end": 342,
              "callee": {
                "type": "Identifier",
                "start": 301,
                "end": 313,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 314,
                  "end": 341,
                  "value": "#1: (\"x\" >= \"x\") === true",
                  "raw": "'#1: (\"x\" >= \"x\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 357,
      "end": 440,
      "test": {
        "type": "BinaryExpression",
        "start": 361,
        "end": 381,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 361,
          "end": 372,
          "expression": {
            "type": "BinaryExpression",
            "start": 362,
            "end": 371,
            "left": {
              "type": "Literal",
              "start": 362,
              "end": 365,
              "value": "x",
              "raw": "\"x\"",
              "regex": null,
              "bigint": null
            },
            "operator": ">=",
            "right": {
              "type": "Literal",
              "start": 369,
              "end": 371,
              "value": "",
              "raw": "\"\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 377,
          "end": 381,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 383,
        "end": 440,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 387,
            "end": 438,
            "argument": {
              "type": "NewExpression",
              "start": 393,
              "end": 437,
              "callee": {
                "type": "Identifier",
                "start": 397,
                "end": 409,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 410,
                  "end": 436,
                  "value": "#2: (\"x\" >= \"\") === true",
                  "raw": "'#2: (\"x\" >= \"\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 452,
      "end": 544,
      "test": {
        "type": "BinaryExpression",
        "start": 456,
        "end": 481,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 456,
          "end": 472,
          "expression": {
            "type": "BinaryExpression",
            "start": 457,
            "end": 471,
            "left": {
              "type": "Literal",
              "start": 457,
              "end": 463,
              "value": "abcd",
              "raw": "\"abcd\"",
              "regex": null,
              "bigint": null
            },
            "operator": ">=",
            "right": {
              "type": "Literal",
              "start": 467,
              "end": 471,
              "value": "ab",
              "raw": "\"ab\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 477,
          "end": 481,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 483,
        "end": 544,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 487,
            "end": 542,
            "argument": {
              "type": "NewExpression",
              "start": 493,
              "end": 541,
              "callee": {
                "type": "Identifier",
                "start": 497,
                "end": 509,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 510,
                  "end": 540,
                  "value": "#3: (\"abcd\" >= ab\") === true",
                  "raw": "'#3: (\"abcd\" >= ab\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 556,
      "end": 662,
      "test": {
        "type": "BinaryExpression",
        "start": 560,
        "end": 592,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 560,
          "end": 583,
          "expression": {
            "type": "BinaryExpression",
            "start": 561,
            "end": 582,
            "left": {
              "type": "Literal",
              "start": 561,
              "end": 572,
              "value": "abcd",
              "raw": "\"abc\\u0064\"",
              "regex": null,
              "bigint": null
            },
            "operator": ">=",
            "right": {
              "type": "Literal",
              "start": 576,
              "end": 582,
              "value": "abcd",
              "raw": "\"abcd\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 588,
          "end": 592,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 594,
        "end": 662,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 598,
            "end": 660,
            "argument": {
              "type": "NewExpression",
              "start": 604,
              "end": 659,
              "callee": {
                "type": "Identifier",
                "start": 608,
                "end": 620,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 621,
                  "end": 658,
                  "value": "#4: (\"abc\\u0064\" >= abc\") === true",
                  "raw": "'#4: (\"abc\\\\u0064\" >= abc\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 674,
      "end": 771,
      "test": {
        "type": "BinaryExpression",
        "start": 678,
        "end": 705,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 678,
          "end": 696,
          "expression": {
            "type": "BinaryExpression",
            "start": 679,
            "end": 695,
            "left": {
              "type": "BinaryExpression",
              "start": 679,
              "end": 688,
              "left": {
                "type": "Literal",
                "start": 679,
                "end": 682,
                "value": "x",
                "raw": "\"x\"",
                "regex": null,
                "bigint": null
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 685,
                "end": 688,
                "value": "y",
                "raw": "\"y\"",
                "regex": null,
                "bigint": null
              }
            },
            "operator": ">=",
            "right": {
              "type": "Literal",
              "start": 692,
              "end": 695,
              "value": "x",
              "raw": "\"x\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 701,
          "end": 705,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 707,
        "end": 771,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 711,
            "end": 769,
            "argument": {
              "type": "NewExpression",
              "start": 717,
              "end": 768,
              "callee": {
                "type": "Identifier",
                "start": 721,
                "end": 733,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 734,
                  "end": 767,
                  "value": "#5: (\"x\" + \"y\" >= \"x\") === true",
                  "raw": "'#5: (\"x\" + \"y\" >= \"x\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "VariableDeclaration",
      "start": 783,
      "end": 795,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 787,
          "end": 794,
          "id": {
            "type": "Identifier",
            "start": 787,
            "end": 788,
            "name": "x"
          },
          "init": {
            "type": "Literal",
            "start": 791,
            "end": 794,
            "value": "x",
            "raw": "\"x\"",
            "regex": null,
            "bigint": null
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "IfStatement",
      "start": 796,
      "end": 898,
      "test": {
        "type": "BinaryExpression",
        "start": 800,
        "end": 823,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 800,
          "end": 814,
          "expression": {
            "type": "BinaryExpression",
            "start": 801,
            "end": 813,
            "left": {
              "type": "BinaryExpression",
              "start": 801,
              "end": 808,
              "left": {
                "type": "Identifier",
                "start": 801,
                "end": 802,
                "name": "x"
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 805,
                "end": 808,
                "value": "y",
                "raw": "'y'",
                "regex": null,
                "bigint": null
              }
            },
            "operator": ">=",
            "right": {
              "type": "Identifier",
              "start": 812,
              "end": 813,
              "name": "x"
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 819,
          "end": 823,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 825,
        "end": 898,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 829,
            "end": 896,
            "argument": {
              "type": "NewExpression",
              "start": 835,
              "end": 895,
              "callee": {
                "type": "Identifier",
                "start": 839,
                "end": 851,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 852,
                  "end": 894,
                  "value": "#6: var x = \"x\"; (x + \"y\" >= x) === true",
                  "raw": "'#6: var x = \"x\"; (x + \"y\" >= x) === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 910,
      "end": 1023,
      "test": {
        "type": "BinaryExpression",
        "start": 914,
        "end": 948,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 914,
          "end": 939,
          "expression": {
            "type": "BinaryExpression",
            "start": 915,
            "end": 938,
            "left": {
              "type": "Literal",
              "start": 915,
              "end": 925,
              "value": "a\u0000a",
              "raw": "\"a\\u0000a\"",
              "regex": null,
              "bigint": null
            },
            "operator": ">=",
            "right": {
              "type": "Literal",
              "start": 929,
              "end": 938,
              "value": "a\u0000",
              "raw": "\"a\\u0000\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 944,
          "end": 948,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 950,
        "end": 1023,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 954,
            "end": 1021,
            "argument": {
              "type": "NewExpression",
              "start": 960,
              "end": 1020,
              "callee": {
                "type": "Identifier",
                "start": 964,
                "end": 976,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 977,
                  "end": 1019,
                  "value": "#7: (\"a\\u0000a\" >= \"a\\u0000\") === true",
                  "raw": "'#7: (\"a\\\\u0000a\" >= \"a\\\\u0000\") === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1035,
      "end": 1124,
      "test": {
        "type": "BinaryExpression",
        "start": 1039,
        "end": 1062,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 1039,
          "end": 1052,
          "expression": {
            "type": "BinaryExpression",
            "start": 1040,
            "end": 1051,
            "left": {
              "type": "Literal",
              "start": 1040,
              "end": 1044,
              "value": " x",
              "raw": "\" x\"",
              "regex": null,
              "bigint": null
            },
            "operator": ">=",
            "right": {
              "type": "Literal",
              "start": 1048,
              "end": 1051,
              "value": "x",
              "raw": "\"x\"",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1057,
          "end": 1062,
          "value": false,
          "raw": "false",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1064,
        "end": 1124,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1068,
            "end": 1122,
            "argument": {
              "type": "NewExpression",
              "start": 1074,
              "end": 1121,
              "callee": {
                "type": "Identifier",
                "start": 1078,
                "end": 1090,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 1091,
                  "end": 1120,
                  "value": "#8: (\" x\" >= \"x\") === false",
                  "raw": "'#8: (\" x\" >= \"x\") === false'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}