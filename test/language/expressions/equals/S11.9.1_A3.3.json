{
  "type": "Program",
  "start": 0,
  "end": 529,
  "body": [
    {
      "type": "IfStatement",
      "start": 344,
      "end": 429,
      "test": {
        "type": "BinaryExpression",
        "start": 348,
        "end": 369,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 348,
          "end": 360,
          "expression": {
            "type": "BinaryExpression",
            "start": 349,
            "end": 359,
            "left": {
              "type": "Literal",
              "start": 349,
              "end": 350,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            "operator": "==",
            "right": {
              "type": "Literal",
              "start": 354,
              "end": 359,
              "value": false,
              "raw": "false",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 365,
          "end": 369,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 371,
        "end": 429,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 375,
            "end": 427,
            "argument": {
              "type": "NewExpression",
              "start": 381,
              "end": 426,
              "callee": {
                "type": "Identifier",
                "start": 385,
                "end": 397,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 398,
                  "end": 425,
                  "value": "#1: (0 == false) === true",
                  "raw": "'#1: (0 == false) === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 441,
      "end": 528,
      "test": {
        "type": "BinaryExpression",
        "start": 445,
        "end": 467,
        "left": {
          "type": "ParenthesizedExpression",
          "start": 445,
          "end": 458,
          "expression": {
            "type": "BinaryExpression",
            "start": 446,
            "end": 457,
            "left": {
              "type": "Literal",
              "start": 446,
              "end": 449,
              "value": "1",
              "raw": "\"1\"",
              "regex": null,
              "bigint": null
            },
            "operator": "==",
            "right": {
              "type": "Literal",
              "start": 453,
              "end": 457,
              "value": true,
              "raw": "true",
              "regex": null,
              "bigint": null
            }
          }
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 463,
          "end": 467,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 469,
        "end": 528,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 473,
            "end": 526,
            "argument": {
              "type": "NewExpression",
              "start": 479,
              "end": 525,
              "callee": {
                "type": "Identifier",
                "start": 483,
                "end": 495,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 496,
                  "end": 524,
                  "value": "#2: (\"1\" == true) === true",
                  "raw": "'#2: (\"1\" == true) === true'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}