{
  "type": "Program",
  "start": 0,
  "end": 1035,
  "body": [
    {
      "type": "TryStatement",
      "start": 445,
      "end": 603,
      "block": {
        "type": "BlockStatement",
        "start": 449,
        "end": 494,
        "body": [
          {
            "type": "IfStatement",
            "start": 452,
            "end": 492,
            "test": {
              "type": "CallExpression",
              "start": 456,
              "end": 479,
              "callee": {
                "type": "ParenthesizedExpression",
                "start": 456,
                "end": 477,
                "expression": {
                  "type": "FunctionExpression",
                  "start": 457,
                  "end": 476,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 467,
                    "end": 476,
                    "body": [
                      {
                        "type": "ThrowStatement",
                        "start": 468,
                        "end": 475,
                        "argument": {
                          "type": "Literal",
                          "start": 474,
                          "end": 475,
                          "value": 1,
                          "raw": "1",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ]
                  }
                }
              },
              "arguments": [],
              "optional": false
            },
            "consequent": {
              "type": "ExpressionStatement",
              "start": 481,
              "end": 492,
              "expression": {
                "type": "Identifier",
                "start": 481,
                "end": 492,
                "name": "abracadabra"
              }
            },
            "alternate": null
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 495,
        "end": 603,
        "param": {
          "type": "Identifier",
          "start": 502,
          "end": 503,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 505,
          "end": 603,
          "body": [
            {
              "type": "IfStatement",
              "start": 508,
              "end": 601,
              "test": {
                "type": "BinaryExpression",
                "start": 512,
                "end": 519,
                "left": {
                  "type": "Identifier",
                  "start": 512,
                  "end": 513,
                  "name": "e"
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 518,
                  "end": 519,
                  "value": 1,
                  "raw": "1",
                  "regex": null,
                  "bigint": null
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "start": 521,
                "end": 601,
                "body": [
                  {
                    "type": "ThrowStatement",
                    "start": 525,
                    "end": 598,
                    "argument": {
                      "type": "NewExpression",
                      "start": 531,
                      "end": 597,
                      "callee": {
                        "type": "Identifier",
                        "start": 535,
                        "end": 547,
                        "name": "Test262Error"
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "start": 548,
                          "end": 596,
                          "left": {
                            "type": "Literal",
                            "start": 548,
                            "end": 593,
                            "value": "#1: Exception === 1. Actual:  Exception ===",
                            "raw": "'#1: Exception === 1. Actual:  Exception ==='",
                            "regex": null,
                            "bigint": null
                          },
                          "operator": "+",
                          "right": {
                            "type": "Identifier",
                            "start": 595,
                            "end": 596,
                            "name": "e"
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    },
    {
      "type": "TryStatement",
      "start": 776,
      "end": 952,
      "block": {
        "type": "BlockStatement",
        "start": 780,
        "end": 843,
        "body": [
          {
            "type": "IfStatement",
            "start": 783,
            "end": 841,
            "test": {
              "type": "CallExpression",
              "start": 787,
              "end": 810,
              "callee": {
                "type": "ParenthesizedExpression",
                "start": 787,
                "end": 808,
                "expression": {
                  "type": "FunctionExpression",
                  "start": 788,
                  "end": 807,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 798,
                    "end": 807,
                    "body": [
                      {
                        "type": "ThrowStatement",
                        "start": 799,
                        "end": 806,
                        "argument": {
                          "type": "Literal",
                          "start": 805,
                          "end": 806,
                          "value": 1,
                          "raw": "1",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ]
                  }
                }
              },
              "arguments": [],
              "optional": false
            },
            "consequent": {
              "type": "ExpressionStatement",
              "start": 812,
              "end": 824,
              "expression": {
                "type": "Identifier",
                "start": 812,
                "end": 823,
                "name": "abracadabra"
              }
            },
            "alternate": {
              "type": "ExpressionStatement",
              "start": 830,
              "end": 841,
              "expression": {
                "type": "Identifier",
                "start": 830,
                "end": 840,
                "name": "blablachat"
              }
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 844,
        "end": 952,
        "param": {
          "type": "Identifier",
          "start": 851,
          "end": 852,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 854,
          "end": 952,
          "body": [
            {
              "type": "IfStatement",
              "start": 857,
              "end": 950,
              "test": {
                "type": "BinaryExpression",
                "start": 861,
                "end": 868,
                "left": {
                  "type": "Identifier",
                  "start": 861,
                  "end": 862,
                  "name": "e"
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 867,
                  "end": 868,
                  "value": 1,
                  "raw": "1",
                  "regex": null,
                  "bigint": null
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "start": 870,
                "end": 950,
                "body": [
                  {
                    "type": "ThrowStatement",
                    "start": 874,
                    "end": 947,
                    "argument": {
                      "type": "NewExpression",
                      "start": 880,
                      "end": 946,
                      "callee": {
                        "type": "Identifier",
                        "start": 884,
                        "end": 896,
                        "name": "Test262Error"
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "start": 897,
                          "end": 945,
                          "left": {
                            "type": "Literal",
                            "start": 897,
                            "end": 942,
                            "value": "#2: Exception === 1. Actual:  Exception ===",
                            "raw": "'#2: Exception === 1. Actual:  Exception ==='",
                            "regex": null,
                            "bigint": null
                          },
                          "operator": "+",
                          "right": {
                            "type": "Identifier",
                            "start": 944,
                            "end": 945,
                            "name": "e"
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}