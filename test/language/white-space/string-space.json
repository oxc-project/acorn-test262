{
  "type": "Program",
  "start": 0,
  "end": 562,
  "body": [
    {
      "type": "IfStatement",
      "start": 253,
      "end": 434,
      "test": {
        "type": "BinaryExpression",
        "start": 257,
        "end": 322,
        "left": {
          "type": "CallExpression",
          "start": 257,
          "end": 291,
          "callee": {
            "type": "Identifier",
            "start": 257,
            "end": 261,
            "name": "eval"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 262,
              "end": 290,
              "value": "' str ing '",
              "raw": "\"'\\u0020str\\u0020ing\\u0020'\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 296,
          "end": 322,
          "value": " str ing ",
          "raw": "\"\\u0020str\\u0020ing\\u0020\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 324,
        "end": 434,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 328,
            "end": 432,
            "argument": {
              "type": "NewExpression",
              "start": 334,
              "end": 431,
              "callee": {
                "type": "Identifier",
                "start": 338,
                "end": 350,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 351,
                  "end": 430,
                  "value": "#1: eval(\"'\\u0020str\\u0020ing\\u0020'\") === \"\\u0020str\\u0020ing\\u0020\"",
                  "raw": "'#1: eval(\"\\'\\\\u0020str\\\\u0020ing\\\\u0020\\'\") === \"\\\\u0020str\\\\u0020ing\\\\u0020\"'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 446,
      "end": 561,
      "test": {
        "type": "BinaryExpression",
        "start": 450,
        "end": 485,
        "left": {
          "type": "CallExpression",
          "start": 450,
          "end": 469,
          "callee": {
            "type": "Identifier",
            "start": 450,
            "end": 454,
            "name": "eval"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 455,
              "end": 468,
              "value": "' str ing '",
              "raw": "\"' str ing '\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 474,
          "end": 485,
          "value": " str ing ",
          "raw": "\" str ing \"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 487,
        "end": 561,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 491,
            "end": 559,
            "argument": {
              "type": "NewExpression",
              "start": 497,
              "end": 558,
              "callee": {
                "type": "Identifier",
                "start": 501,
                "end": 513,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 514,
                  "end": 557,
                  "value": "#2: eval(\"' str ing '\") === \" str ing \"",
                  "raw": "'#2: eval(\"\\' str ing \\'\") === \" str ing \"'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}