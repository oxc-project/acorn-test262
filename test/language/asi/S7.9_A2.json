{
  "type": "Program",
  "start": 0,
  "end": 729,
  "body": [
    {
      "type": "LabeledStatement",
      "start": 281,
      "end": 465,
      "body": {
        "type": "ForStatement",
        "start": 289,
        "end": 465,
        "init": {
          "type": "VariableDeclaration",
          "start": 294,
          "end": 303,
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 298,
              "end": 303,
              "id": {
                "type": "Identifier",
                "start": 298,
                "end": 299,
                "name": "i"
              },
              "init": {
                "type": "Literal",
                "start": 302,
                "end": 303,
                "value": 0,
                "raw": "0"
              }
            }
          ],
          "kind": "var"
        },
        "test": {
          "type": "BinaryExpression",
          "start": 305,
          "end": 311,
          "left": {
            "type": "Identifier",
            "start": 305,
            "end": 306,
            "name": "i"
          },
          "operator": "<=",
          "right": {
            "type": "Literal",
            "start": 310,
            "end": 311,
            "value": 0,
            "raw": "0"
          }
        },
        "update": {
          "type": "UpdateExpression",
          "start": 313,
          "end": 316,
          "operator": "++",
          "prefix": false,
          "argument": {
            "type": "Identifier",
            "start": 313,
            "end": 314,
            "name": "i"
          }
        },
        "body": {
          "type": "BlockStatement",
          "start": 318,
          "end": 465,
          "body": [
            {
              "type": "ForStatement",
              "start": 322,
              "end": 374,
              "init": {
                "type": "VariableDeclaration",
                "start": 327,
                "end": 336,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 331,
                    "end": 336,
                    "id": {
                      "type": "Identifier",
                      "start": 331,
                      "end": 332,
                      "name": "j"
                    },
                    "init": {
                      "type": "Literal",
                      "start": 335,
                      "end": 336,
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "var"
              },
              "test": {
                "type": "BinaryExpression",
                "start": 338,
                "end": 344,
                "left": {
                  "type": "Identifier",
                  "start": 338,
                  "end": 339,
                  "name": "j"
                },
                "operator": "<=",
                "right": {
                  "type": "Literal",
                  "start": 343,
                  "end": 344,
                  "value": 0,
                  "raw": "0"
                }
              },
              "update": {
                "type": "UpdateExpression",
                "start": 346,
                "end": 349,
                "operator": "++",
                "prefix": false,
                "argument": {
                  "type": "Identifier",
                  "start": 346,
                  "end": 347,
                  "name": "j"
                }
              },
              "body": {
                "type": "BlockStatement",
                "start": 351,
                "end": 374,
                "body": [
                  {
                    "type": "BreakStatement",
                    "start": 357,
                    "end": 370,
                    "label": {
                      "type": "Identifier",
                      "start": 363,
                      "end": 369,
                      "name": "label1"
                    }
                  }
                ]
              }
            },
            {
              "type": "ThrowStatement",
              "start": 377,
              "end": 463,
              "argument": {
                "type": "NewExpression",
                "start": 383,
                "end": 462,
                "callee": {
                  "type": "Identifier",
                  "start": 387,
                  "end": 399,
                  "name": "Test262Error"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "start": 400,
                    "end": 461,
                    "value": "#1: Check break statement for automatic semicolon insertion",
                    "raw": "'#1: Check break statement for automatic semicolon insertion'"
                  }
                ]
              }
            }
          ]
        }
      },
      "label": {
        "type": "Identifier",
        "start": 281,
        "end": 287,
        "name": "label1"
      }
    },
    {
      "type": "VariableDeclaration",
      "start": 477,
      "end": 496,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 481,
          "end": 495,
          "id": {
            "type": "Identifier",
            "start": 481,
            "end": 487,
            "name": "result"
          },
          "init": {
            "type": "Literal",
            "start": 490,
            "end": 495,
            "value": false,
            "raw": "false"
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "LabeledStatement",
      "start": 497,
      "end": 613,
      "body": {
        "type": "ForStatement",
        "start": 505,
        "end": 613,
        "init": {
          "type": "VariableDeclaration",
          "start": 510,
          "end": 519,
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 514,
              "end": 519,
              "id": {
                "type": "Identifier",
                "start": 514,
                "end": 515,
                "name": "i"
              },
              "init": {
                "type": "Literal",
                "start": 518,
                "end": 519,
                "value": 0,
                "raw": "0"
              }
            }
          ],
          "kind": "var"
        },
        "test": {
          "type": "BinaryExpression",
          "start": 521,
          "end": 527,
          "left": {
            "type": "Identifier",
            "start": 521,
            "end": 522,
            "name": "i"
          },
          "operator": "<=",
          "right": {
            "type": "Literal",
            "start": 526,
            "end": 527,
            "value": 0,
            "raw": "0"
          }
        },
        "update": {
          "type": "UpdateExpression",
          "start": 529,
          "end": 532,
          "operator": "++",
          "prefix": false,
          "argument": {
            "type": "Identifier",
            "start": 529,
            "end": 530,
            "name": "i"
          }
        },
        "body": {
          "type": "BlockStatement",
          "start": 534,
          "end": 613,
          "body": [
            {
              "type": "ForStatement",
              "start": 538,
              "end": 594,
              "init": {
                "type": "VariableDeclaration",
                "start": 543,
                "end": 552,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 547,
                    "end": 552,
                    "id": {
                      "type": "Identifier",
                      "start": 547,
                      "end": 548,
                      "name": "j"
                    },
                    "init": {
                      "type": "Literal",
                      "start": 551,
                      "end": 552,
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "var"
              },
              "test": {
                "type": "BinaryExpression",
                "start": 554,
                "end": 560,
                "left": {
                  "type": "Identifier",
                  "start": 554,
                  "end": 555,
                  "name": "j"
                },
                "operator": "<=",
                "right": {
                  "type": "Literal",
                  "start": 559,
                  "end": 560,
                  "value": 0,
                  "raw": "0"
                }
              },
              "update": {
                "type": "UpdateExpression",
                "start": 562,
                "end": 565,
                "operator": "++",
                "prefix": false,
                "argument": {
                  "type": "Identifier",
                  "start": 562,
                  "end": 563,
                  "name": "j"
                }
              },
              "body": {
                "type": "BlockStatement",
                "start": 567,
                "end": 594,
                "body": [
                  {
                    "type": "BreakStatement",
                    "start": 573,
                    "end": 578,
                    "label": null
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 583,
                    "end": 590,
                    "expression": {
                      "type": "Identifier",
                      "start": 583,
                      "end": 589,
                      "name": "label2"
                    }
                  }
                ]
              }
            },
            {
              "type": "ExpressionStatement",
              "start": 597,
              "end": 611,
              "expression": {
                "type": "AssignmentExpression",
                "start": 597,
                "end": 610,
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "start": 597,
                  "end": 603,
                  "name": "result"
                },
                "right": {
                  "type": "Literal",
                  "start": 606,
                  "end": 610,
                  "value": true,
                  "raw": "true"
                }
              }
            }
          ]
        }
      },
      "label": {
        "type": "Identifier",
        "start": 497,
        "end": 503,
        "name": "label2"
      }
    },
    {
      "type": "IfStatement",
      "start": 615,
      "end": 728,
      "test": {
        "type": "BinaryExpression",
        "start": 619,
        "end": 634,
        "left": {
          "type": "Identifier",
          "start": 619,
          "end": 625,
          "name": "result"
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 630,
          "end": 634,
          "value": true,
          "raw": "true"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 636,
        "end": 728,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 640,
            "end": 726,
            "argument": {
              "type": "NewExpression",
              "start": 646,
              "end": 725,
              "callee": {
                "type": "Identifier",
                "start": 650,
                "end": 662,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 663,
                  "end": 724,
                  "value": "#2: Check break statement for automatic semicolon insertion",
                  "raw": "'#2: Check break statement for automatic semicolon insertion'"
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}