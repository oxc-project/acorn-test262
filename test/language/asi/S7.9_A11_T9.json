{
  "type": "Program",
  "start": 0,
  "end": 440,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 294,
      "end": 304,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 298,
          "end": 303,
          "id": {
            "type": "Identifier",
            "start": 298,
            "end": 299,
            "name": "x"
          },
          "init": {
            "type": "Literal",
            "start": 302,
            "end": 303,
            "value": 0,
            "raw": "0",
            "regex": null,
            "bigint": null
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "IfStatement",
      "start": 305,
      "end": 335,
      "test": {
        "type": "Literal",
        "start": 309,
        "end": 314,
        "value": false,
        "raw": "false",
        "regex": null,
        "bigint": null
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 316,
        "end": 323,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 317,
            "end": 322,
            "expression": {
              "type": "AssignmentExpression",
              "start": 317,
              "end": 322,
              "operator": "=",
              "left": {
                "type": "Identifier",
                "start": 317,
                "end": 318,
                "name": "x"
              },
              "right": {
                "type": "Literal",
                "start": 321,
                "end": 322,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            }
          }
        ]
      },
      "alternate": {
        "type": "ExpressionStatement",
        "start": 329,
        "end": 335,
        "expression": {
          "type": "AssignmentExpression",
          "start": 329,
          "end": 335,
          "operator": "=",
          "left": {
            "type": "Identifier",
            "start": 329,
            "end": 330,
            "name": "x"
          },
          "right": {
            "type": "UnaryExpression",
            "start": 333,
            "end": 335,
            "operator": "-",
            "prefix": true,
            "argument": {
              "type": "Literal",
              "start": 334,
              "end": 335,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            }
          }
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 336,
      "end": 439,
      "test": {
        "type": "BinaryExpression",
        "start": 340,
        "end": 348,
        "left": {
          "type": "Identifier",
          "start": 340,
          "end": 341,
          "name": "x"
        },
        "operator": "!==",
        "right": {
          "type": "UnaryExpression",
          "start": 346,
          "end": 348,
          "operator": "-",
          "prefix": true,
          "argument": {
            "type": "Literal",
            "start": 347,
            "end": 348,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 350,
        "end": 439,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 354,
            "end": 437,
            "argument": {
              "type": "NewExpression",
              "start": 360,
              "end": 436,
              "callee": {
                "type": "Identifier",
                "start": 364,
                "end": 376,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 377,
                  "end": 435,
                  "value": "#1: Check If Statement for automatic semicolon insertion",
                  "raw": "'#1: Check If Statement for automatic semicolon insertion'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}