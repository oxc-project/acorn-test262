{
  "type": "Program",
  "start": 0,
  "end": 464,
  "body": [
    {
      "type": "FunctionDeclaration",
      "start": 302,
      "end": 331,
      "id": {
        "type": "Identifier",
        "start": 311,
        "end": 312,
        "name": "f"
      },
      "expression": false,
      "generator": false,
      "async": false,
      "params": [
        {
          "type": "Identifier",
          "start": 313,
          "end": 314,
          "name": "t"
        }
      ],
      "body": {
        "type": "BlockStatement",
        "start": 316,
        "end": 331,
        "body": [
          {
            "type": "ReturnStatement",
            "start": 320,
            "end": 329,
            "argument": {
              "type": "Identifier",
              "start": 327,
              "end": 328,
              "name": "t"
            }
          }
        ]
      }
    },
    {
      "type": "VariableDeclaration",
      "start": 332,
      "end": 353,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 336,
          "end": 353,
          "id": {
            "type": "Identifier",
            "start": 336,
            "end": 337,
            "name": "x"
          },
          "init": {
            "type": "BinaryExpression",
            "start": 340,
            "end": 353,
            "left": {
              "type": "Literal",
              "start": 340,
              "end": 341,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            "operator": "+",
            "right": {
              "type": "CallExpression",
              "start": 344,
              "end": 353,
              "callee": {
                "type": "Identifier",
                "start": 344,
                "end": 345,
                "name": "f"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 347,
                  "end": 352,
                  "left": {
                    "type": "Literal",
                    "start": 347,
                    "end": 348,
                    "value": 2,
                    "raw": "2",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "Literal",
                    "start": 351,
                    "end": 352,
                    "value": 3,
                    "raw": "3",
                    "regex": null,
                    "bigint": null
                  }
                }
              ],
              "optional": false
            }
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "IfStatement",
      "start": 354,
      "end": 463,
      "test": {
        "type": "BinaryExpression",
        "start": 358,
        "end": 365,
        "left": {
          "type": "Identifier",
          "start": 358,
          "end": 359,
          "name": "x"
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 364,
          "end": 365,
          "value": 6,
          "raw": "6",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 367,
        "end": 463,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 371,
            "end": 461,
            "argument": {
              "type": "NewExpression",
              "start": 377,
              "end": 460,
              "callee": {
                "type": "Identifier",
                "start": 381,
                "end": 393,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 394,
                  "end": 459,
                  "value": "#1: Check Function Expression for automatic semicolon insertion",
                  "raw": "'#1: Check Function Expression for automatic semicolon insertion'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}