{
  "type": "Program",
  "start": 0,
  "end": 436,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 292,
      "end": 302,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 296,
          "end": 301,
          "id": {
            "type": "Identifier",
            "start": 296,
            "end": 297,
            "name": "x"
          },
          "init": {
            "type": "Literal",
            "start": 300,
            "end": 301,
            "value": 0,
            "raw": "0",
            "regex": null,
            "bigint": null
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "IfStatement",
      "start": 303,
      "end": 331,
      "test": {
        "type": "Literal",
        "start": 307,
        "end": 312,
        "value": false,
        "raw": "false",
        "regex": null,
        "bigint": null
      },
      "consequent": {
        "type": "ExpressionStatement",
        "start": 314,
        "end": 319,
        "expression": {
          "type": "AssignmentExpression",
          "start": 314,
          "end": 319,
          "operator": "=",
          "left": {
            "type": "Identifier",
            "start": 314,
            "end": 315,
            "name": "x"
          },
          "right": {
            "type": "Literal",
            "start": 318,
            "end": 319,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        }
      },
      "alternate": {
        "type": "ExpressionStatement",
        "start": 325,
        "end": 331,
        "expression": {
          "type": "AssignmentExpression",
          "start": 325,
          "end": 331,
          "operator": "=",
          "left": {
            "type": "Identifier",
            "start": 325,
            "end": 326,
            "name": "x"
          },
          "right": {
            "type": "UnaryExpression",
            "start": 329,
            "end": 331,
            "operator": "-",
            "prefix": true,
            "argument": {
              "type": "Literal",
              "start": 330,
              "end": 331,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            }
          }
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 332,
      "end": 435,
      "test": {
        "type": "BinaryExpression",
        "start": 336,
        "end": 344,
        "left": {
          "type": "Identifier",
          "start": 336,
          "end": 337,
          "name": "x"
        },
        "operator": "!==",
        "right": {
          "type": "UnaryExpression",
          "start": 342,
          "end": 344,
          "operator": "-",
          "prefix": true,
          "argument": {
            "type": "Literal",
            "start": 343,
            "end": 344,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 346,
        "end": 435,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 350,
            "end": 433,
            "argument": {
              "type": "NewExpression",
              "start": 356,
              "end": 432,
              "callee": {
                "type": "Identifier",
                "start": 360,
                "end": 372,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 373,
                  "end": 431,
                  "value": "#1: Check If Statement for automatic semicolon insertion",
                  "raw": "'#1: Check If Statement for automatic semicolon insertion'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}