{
  "type": "Program",
  "start": 0,
  "end": 837,
  "body": [
    {
      "type": "LabeledStatement",
      "start": 287,
      "end": 521,
      "body": {
        "type": "ForStatement",
        "start": 295,
        "end": 521,
        "init": {
          "type": "VariableDeclaration",
          "start": 300,
          "end": 309,
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 304,
              "end": 309,
              "id": {
                "type": "Identifier",
                "start": 304,
                "end": 305,
                "name": "i"
              },
              "init": {
                "type": "Literal",
                "start": 308,
                "end": 309,
                "value": 0,
                "raw": "0",
                "regex": null,
                "bigint": null
              }
            }
          ],
          "kind": "var"
        },
        "test": {
          "type": "BinaryExpression",
          "start": 311,
          "end": 317,
          "left": {
            "type": "Identifier",
            "start": 311,
            "end": 312,
            "name": "i"
          },
          "operator": "<=",
          "right": {
            "type": "Literal",
            "start": 316,
            "end": 317,
            "value": 0,
            "raw": "0",
            "regex": null,
            "bigint": null
          }
        },
        "update": {
          "type": "UpdateExpression",
          "start": 319,
          "end": 322,
          "operator": "++",
          "prefix": false,
          "argument": {
            "type": "Identifier",
            "start": 319,
            "end": 320,
            "name": "i"
          }
        },
        "body": {
          "type": "BlockStatement",
          "start": 324,
          "end": 521,
          "body": [
            {
              "type": "ForStatement",
              "start": 328,
              "end": 519,
              "init": {
                "type": "VariableDeclaration",
                "start": 333,
                "end": 342,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 337,
                    "end": 342,
                    "id": {
                      "type": "Identifier",
                      "start": 337,
                      "end": 338,
                      "name": "j"
                    },
                    "init": {
                      "type": "Literal",
                      "start": 341,
                      "end": 342,
                      "value": 0,
                      "raw": "0",
                      "regex": null,
                      "bigint": null
                    }
                  }
                ],
                "kind": "var"
              },
              "test": {
                "type": "BinaryExpression",
                "start": 344,
                "end": 350,
                "left": {
                  "type": "Identifier",
                  "start": 344,
                  "end": 345,
                  "name": "j"
                },
                "operator": "<=",
                "right": {
                  "type": "Literal",
                  "start": 349,
                  "end": 350,
                  "value": 1,
                  "raw": "1",
                  "regex": null,
                  "bigint": null
                }
              },
              "update": {
                "type": "UpdateExpression",
                "start": 352,
                "end": 355,
                "operator": "++",
                "prefix": false,
                "argument": {
                  "type": "Identifier",
                  "start": 352,
                  "end": 353,
                  "name": "j"
                }
              },
              "body": {
                "type": "BlockStatement",
                "start": 357,
                "end": 519,
                "body": [
                  {
                    "type": "IfStatement",
                    "start": 363,
                    "end": 515,
                    "test": {
                      "type": "BinaryExpression",
                      "start": 367,
                      "end": 374,
                      "left": {
                        "type": "Identifier",
                        "start": 367,
                        "end": 368,
                        "name": "j"
                      },
                      "operator": "===",
                      "right": {
                        "type": "Literal",
                        "start": 373,
                        "end": 374,
                        "value": 0,
                        "raw": "0",
                        "regex": null,
                        "bigint": null
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "start": 376,
                      "end": 406,
                      "body": [
                        {
                          "type": "ContinueStatement",
                          "start": 384,
                          "end": 400,
                          "label": {
                            "type": "Identifier",
                            "start": 393,
                            "end": 399,
                            "name": "label1"
                          }
                        }
                      ]
                    },
                    "alternate": {
                      "type": "BlockStatement",
                      "start": 412,
                      "end": 515,
                      "body": [
                        {
                          "type": "ThrowStatement",
                          "start": 420,
                          "end": 509,
                          "argument": {
                            "type": "NewExpression",
                            "start": 426,
                            "end": 508,
                            "callee": {
                              "type": "Identifier",
                              "start": 430,
                              "end": 442,
                              "name": "Test262Error"
                            },
                            "arguments": [
                              {
                                "type": "Literal",
                                "start": 443,
                                "end": 507,
                                "value": "#1: Check continue statement for automatic semicolon insertion",
                                "raw": "'#1: Check continue statement for automatic semicolon insertion'",
                                "regex": null,
                                "bigint": null
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "label": {
        "type": "Identifier",
        "start": 287,
        "end": 293,
        "name": "label1"
      }
    },
    {
      "type": "VariableDeclaration",
      "start": 533,
      "end": 552,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 537,
          "end": 551,
          "id": {
            "type": "Identifier",
            "start": 537,
            "end": 543,
            "name": "result"
          },
          "init": {
            "type": "Literal",
            "start": 546,
            "end": 551,
            "value": false,
            "raw": "false",
            "regex": null,
            "bigint": null
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "LabeledStatement",
      "start": 553,
      "end": 718,
      "body": {
        "type": "ForStatement",
        "start": 561,
        "end": 718,
        "init": {
          "type": "VariableDeclaration",
          "start": 566,
          "end": 575,
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 570,
              "end": 575,
              "id": {
                "type": "Identifier",
                "start": 570,
                "end": 571,
                "name": "i"
              },
              "init": {
                "type": "Literal",
                "start": 574,
                "end": 575,
                "value": 0,
                "raw": "0",
                "regex": null,
                "bigint": null
              }
            }
          ],
          "kind": "var"
        },
        "test": {
          "type": "BinaryExpression",
          "start": 577,
          "end": 583,
          "left": {
            "type": "Identifier",
            "start": 577,
            "end": 578,
            "name": "i"
          },
          "operator": "<=",
          "right": {
            "type": "Literal",
            "start": 582,
            "end": 583,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        },
        "update": {
          "type": "UpdateExpression",
          "start": 585,
          "end": 588,
          "operator": "++",
          "prefix": false,
          "argument": {
            "type": "Identifier",
            "start": 585,
            "end": 586,
            "name": "i"
          }
        },
        "body": {
          "type": "BlockStatement",
          "start": 590,
          "end": 718,
          "body": [
            {
              "type": "ForStatement",
              "start": 594,
              "end": 716,
              "init": {
                "type": "VariableDeclaration",
                "start": 599,
                "end": 608,
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "start": 603,
                    "end": 608,
                    "id": {
                      "type": "Identifier",
                      "start": 603,
                      "end": 604,
                      "name": "j"
                    },
                    "init": {
                      "type": "Literal",
                      "start": 607,
                      "end": 608,
                      "value": 0,
                      "raw": "0",
                      "regex": null,
                      "bigint": null
                    }
                  }
                ],
                "kind": "var"
              },
              "test": {
                "type": "BinaryExpression",
                "start": 610,
                "end": 616,
                "left": {
                  "type": "Identifier",
                  "start": 610,
                  "end": 611,
                  "name": "j"
                },
                "operator": "<=",
                "right": {
                  "type": "Literal",
                  "start": 615,
                  "end": 616,
                  "value": 1,
                  "raw": "1",
                  "regex": null,
                  "bigint": null
                }
              },
              "update": {
                "type": "UpdateExpression",
                "start": 618,
                "end": 621,
                "operator": "++",
                "prefix": false,
                "argument": {
                  "type": "Identifier",
                  "start": 618,
                  "end": 619,
                  "name": "j"
                }
              },
              "body": {
                "type": "BlockStatement",
                "start": 623,
                "end": 716,
                "body": [
                  {
                    "type": "IfStatement",
                    "start": 629,
                    "end": 712,
                    "test": {
                      "type": "BinaryExpression",
                      "start": 633,
                      "end": 640,
                      "left": {
                        "type": "Identifier",
                        "start": 633,
                        "end": 634,
                        "name": "j"
                      },
                      "operator": "===",
                      "right": {
                        "type": "Literal",
                        "start": 639,
                        "end": 640,
                        "value": 0,
                        "raw": "0",
                        "regex": null,
                        "bigint": null
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "start": 642,
                      "end": 678,
                      "body": [
                        {
                          "type": "ContinueStatement",
                          "start": 650,
                          "end": 658,
                          "label": null
                        },
                        {
                          "type": "ExpressionStatement",
                          "start": 665,
                          "end": 672,
                          "expression": {
                            "type": "Identifier",
                            "start": 665,
                            "end": 671,
                            "name": "label2"
                          }
                        }
                      ]
                    },
                    "alternate": {
                      "type": "BlockStatement",
                      "start": 684,
                      "end": 712,
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "start": 692,
                          "end": 706,
                          "expression": {
                            "type": "AssignmentExpression",
                            "start": 692,
                            "end": 705,
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "start": 692,
                              "end": 698,
                              "name": "result"
                            },
                            "right": {
                              "type": "Literal",
                              "start": 701,
                              "end": 705,
                              "value": true,
                              "raw": "true",
                              "regex": null,
                              "bigint": null
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "label": {
        "type": "Identifier",
        "start": 553,
        "end": 559,
        "name": "label2"
      }
    },
    {
      "type": "IfStatement",
      "start": 720,
      "end": 836,
      "test": {
        "type": "BinaryExpression",
        "start": 724,
        "end": 739,
        "left": {
          "type": "Identifier",
          "start": 724,
          "end": 730,
          "name": "result"
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 735,
          "end": 739,
          "value": true,
          "raw": "true",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 741,
        "end": 836,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 745,
            "end": 834,
            "argument": {
              "type": "NewExpression",
              "start": 751,
              "end": 833,
              "callee": {
                "type": "Identifier",
                "start": 755,
                "end": 767,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 768,
                  "end": 832,
                  "value": "#2: Check continue statement for automatic semicolon insertion",
                  "raw": "'#2: Check continue statement for automatic semicolon insertion'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}