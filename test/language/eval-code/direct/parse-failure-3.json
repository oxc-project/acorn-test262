{
  "type": "Program",
  "start": 0,
  "end": 992,
  "body": [
    {
      "type": "TryStatement",
      "start": 334,
      "end": 609,
      "block": {
        "type": "BlockStatement",
        "start": 338,
        "end": 461,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 342,
            "end": 360,
            "expression": {
              "type": "CallExpression",
              "start": 342,
              "end": 359,
              "callee": {
                "type": "Identifier",
                "start": 342,
                "end": 346,
                "name": "eval"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 347,
                  "end": 358,
                  "value": "continue;",
                  "raw": "\"continue;\"",
                  "regex": null,
                  "bigint": null
                }
              ],
              "optional": false
            }
          },
          {
            "type": "ThrowStatement",
            "start": 363,
            "end": 459,
            "argument": {
              "type": "NewExpression",
              "start": 369,
              "end": 458,
              "callee": {
                "type": "Identifier",
                "start": 373,
                "end": 385,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 386,
                  "end": 457,
                  "left": {
                    "type": "Literal",
                    "start": 386,
                    "end": 435,
                    "value": "#1.1: continue must throw SyntaxError. Actual: ",
                    "raw": "'#1.1: continue must throw SyntaxError. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 438,
                    "end": 457,
                    "expression": {
                      "type": "CallExpression",
                      "start": 439,
                      "end": 456,
                      "callee": {
                        "type": "Identifier",
                        "start": 439,
                        "end": 443,
                        "name": "eval"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 444,
                          "end": 455,
                          "value": "continue;",
                          "raw": "\"continue;\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 462,
        "end": 609,
        "param": {
          "type": "Identifier",
          "start": 468,
          "end": 469,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 471,
          "end": 609,
          "body": [
            {
              "type": "IfStatement",
              "start": 475,
              "end": 605,
              "test": {
                "type": "BinaryExpression",
                "start": 479,
                "end": 514,
                "left": {
                  "type": "ParenthesizedExpression",
                  "start": 479,
                  "end": 505,
                  "expression": {
                    "type": "BinaryExpression",
                    "start": 480,
                    "end": 504,
                    "left": {
                      "type": "Identifier",
                      "start": 480,
                      "end": 481,
                      "name": "e"
                    },
                    "operator": "instanceof",
                    "right": {
                      "type": "Identifier",
                      "start": 493,
                      "end": 504,
                      "name": "SyntaxError"
                    }
                  }
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 510,
                  "end": 514,
                  "value": true,
                  "raw": "true",
                  "regex": null,
                  "bigint": null
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "start": 516,
                "end": 605,
                "body": [
                  {
                    "type": "ThrowStatement",
                    "start": 522,
                    "end": 601,
                    "argument": {
                      "type": "NewExpression",
                      "start": 528,
                      "end": 600,
                      "callee": {
                        "type": "Identifier",
                        "start": 532,
                        "end": 544,
                        "name": "Test262Error"
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "start": 545,
                          "end": 599,
                          "left": {
                            "type": "Literal",
                            "start": 545,
                            "end": 593,
                            "value": "#1.2: continue must throw SyntaxError. Actual ",
                            "raw": "'#1.2: continue must throw SyntaxError. Actual '",
                            "regex": null,
                            "bigint": null
                          },
                          "operator": "+",
                          "right": {
                            "type": "ParenthesizedExpression",
                            "start": 596,
                            "end": 599,
                            "expression": {
                              "type": "Identifier",
                              "start": 597,
                              "end": 598,
                              "name": "e"
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    },
    {
      "type": "TryStatement",
      "start": 621,
      "end": 991,
      "block": {
        "type": "BlockStatement",
        "start": 625,
        "end": 842,
        "body": [
          {
            "type": "ForStatement",
            "start": 629,
            "end": 737,
            "init": {
              "type": "VariableDeclaration",
              "start": 634,
              "end": 643,
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "start": 638,
                  "end": 643,
                  "id": {
                    "type": "Identifier",
                    "start": 638,
                    "end": 639,
                    "name": "i"
                  },
                  "init": {
                    "type": "Literal",
                    "start": 642,
                    "end": 643,
                    "value": 0,
                    "raw": "0",
                    "regex": null,
                    "bigint": null
                  }
                }
              ],
              "kind": "var"
            },
            "test": {
              "type": "BinaryExpression",
              "start": 645,
              "end": 651,
              "left": {
                "type": "Identifier",
                "start": 645,
                "end": 646,
                "name": "i"
              },
              "operator": "<=",
              "right": {
                "type": "Literal",
                "start": 650,
                "end": 651,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            },
            "update": {
              "type": "UpdateExpression",
              "start": 653,
              "end": 656,
              "operator": "++",
              "prefix": false,
              "argument": {
                "type": "Identifier",
                "start": 653,
                "end": 654,
                "name": "i"
              }
            },
            "body": {
              "type": "BlockStatement",
              "start": 658,
              "end": 737,
              "body": [
                {
                  "type": "ForStatement",
                  "start": 664,
                  "end": 733,
                  "init": {
                    "type": "VariableDeclaration",
                    "start": 669,
                    "end": 678,
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "start": 673,
                        "end": 678,
                        "id": {
                          "type": "Identifier",
                          "start": 673,
                          "end": 674,
                          "name": "j"
                        },
                        "init": {
                          "type": "Literal",
                          "start": 677,
                          "end": 678,
                          "value": 0,
                          "raw": "0",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ],
                    "kind": "var"
                  },
                  "test": {
                    "type": "BinaryExpression",
                    "start": 680,
                    "end": 686,
                    "left": {
                      "type": "Identifier",
                      "start": 680,
                      "end": 681,
                      "name": "j"
                    },
                    "operator": "<=",
                    "right": {
                      "type": "Literal",
                      "start": 685,
                      "end": 686,
                      "value": 1,
                      "raw": "1",
                      "regex": null,
                      "bigint": null
                    }
                  },
                  "update": {
                    "type": "UpdateExpression",
                    "start": 688,
                    "end": 691,
                    "operator": "++",
                    "prefix": false,
                    "argument": {
                      "type": "Identifier",
                      "start": 688,
                      "end": 689,
                      "name": "j"
                    }
                  },
                  "body": {
                    "type": "BlockStatement",
                    "start": 693,
                    "end": 733,
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "start": 702,
                        "end": 720,
                        "expression": {
                          "type": "CallExpression",
                          "start": 702,
                          "end": 719,
                          "callee": {
                            "type": "Identifier",
                            "start": 702,
                            "end": 706,
                            "name": "eval"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 707,
                              "end": 718,
                              "value": "continue;",
                              "raw": "\"continue;\"",
                              "regex": null,
                              "bigint": null
                            }
                          ],
                          "optional": false
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "type": "ThrowStatement",
            "start": 740,
            "end": 836,
            "argument": {
              "type": "NewExpression",
              "start": 746,
              "end": 835,
              "callee": {
                "type": "Identifier",
                "start": 750,
                "end": 762,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 763,
                  "end": 834,
                  "left": {
                    "type": "Literal",
                    "start": 763,
                    "end": 812,
                    "value": "#2.1: continue must throw SyntaxError. Actual: ",
                    "raw": "'#2.1: continue must throw SyntaxError. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 815,
                    "end": 834,
                    "expression": {
                      "type": "CallExpression",
                      "start": 816,
                      "end": 833,
                      "callee": {
                        "type": "Identifier",
                        "start": 816,
                        "end": 820,
                        "name": "eval"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 821,
                          "end": 832,
                          "value": "continue;",
                          "raw": "\"continue;\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 843,
        "end": 991,
        "param": {
          "type": "Identifier",
          "start": 849,
          "end": 850,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 852,
          "end": 991,
          "body": [
            {
              "type": "IfStatement",
              "start": 856,
              "end": 987,
              "test": {
                "type": "BinaryExpression",
                "start": 860,
                "end": 895,
                "left": {
                  "type": "ParenthesizedExpression",
                  "start": 860,
                  "end": 886,
                  "expression": {
                    "type": "BinaryExpression",
                    "start": 861,
                    "end": 885,
                    "left": {
                      "type": "Identifier",
                      "start": 861,
                      "end": 862,
                      "name": "e"
                    },
                    "operator": "instanceof",
                    "right": {
                      "type": "Identifier",
                      "start": 874,
                      "end": 885,
                      "name": "SyntaxError"
                    }
                  }
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 891,
                  "end": 895,
                  "value": true,
                  "raw": "true",
                  "regex": null,
                  "bigint": null
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "start": 897,
                "end": 987,
                "body": [
                  {
                    "type": "ThrowStatement",
                    "start": 903,
                    "end": 983,
                    "argument": {
                      "type": "NewExpression",
                      "start": 909,
                      "end": 982,
                      "callee": {
                        "type": "Identifier",
                        "start": 913,
                        "end": 925,
                        "name": "Test262Error"
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "start": 926,
                          "end": 981,
                          "left": {
                            "type": "Literal",
                            "start": 926,
                            "end": 975,
                            "value": "#2.2: continue must throw SyntaxError. Actual: ",
                            "raw": "'#2.2: continue must throw SyntaxError. Actual: '",
                            "regex": null,
                            "bigint": null
                          },
                          "operator": "+",
                          "right": {
                            "type": "ParenthesizedExpression",
                            "start": 978,
                            "end": 981,
                            "expression": {
                              "type": "Identifier",
                              "start": 979,
                              "end": 980,
                              "name": "e"
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              "alternate": null
            }
          ]
        }
      },
      "finalizer": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}