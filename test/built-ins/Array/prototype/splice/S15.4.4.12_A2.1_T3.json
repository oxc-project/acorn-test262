{
  "type": "Program",
  "start": 0,
  "end": 1332,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 249,
      "end": 270,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 253,
          "end": 269,
          "id": {
            "type": "Identifier",
            "start": 253,
            "end": 254,
            "name": "x"
          },
          "init": {
            "type": "ArrayExpression",
            "start": 257,
            "end": 269,
            "elements": [
              {
                "type": "Literal",
                "start": 258,
                "end": 259,
                "value": 0,
                "raw": "0",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 261,
                "end": 262,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 264,
                "end": 265,
                "value": 2,
                "raw": "2",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 267,
                "end": 268,
                "value": 3,
                "raw": "3",
                "regex": null,
                "bigint": null
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "start": 271,
      "end": 319,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 275,
          "end": 318,
          "id": {
            "type": "Identifier",
            "start": 275,
            "end": 278,
            "name": "arr"
          },
          "init": {
            "type": "CallExpression",
            "start": 281,
            "end": 318,
            "callee": {
              "type": "MemberExpression",
              "start": 281,
              "end": 289,
              "object": {
                "type": "Identifier",
                "start": 281,
                "end": 282,
                "name": "x"
              },
              "property": {
                "type": "Identifier",
                "start": 283,
                "end": 289,
                "name": "splice"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "MemberExpression",
                "start": 290,
                "end": 314,
                "object": {
                  "type": "Identifier",
                  "start": 290,
                  "end": 296,
                  "name": "Number"
                },
                "property": {
                  "type": "Identifier",
                  "start": 297,
                  "end": 314,
                  "name": "POSITIVE_INFINITY"
                },
                "computed": false,
                "optional": false
              },
              {
                "type": "Literal",
                "start": 316,
                "end": 317,
                "value": 3,
                "raw": "3",
                "regex": null,
                "bigint": null
              }
            ],
            "optional": false
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 321,
      "end": 362,
      "expression": {
        "type": "AssignmentExpression",
        "start": 321,
        "end": 361,
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "start": 321,
          "end": 333,
          "object": {
            "type": "Identifier",
            "start": 321,
            "end": 324,
            "name": "arr"
          },
          "property": {
            "type": "Identifier",
            "start": 325,
            "end": 333,
            "name": "getClass"
          },
          "computed": false,
          "optional": false
        },
        "right": {
          "type": "MemberExpression",
          "start": 336,
          "end": 361,
          "object": {
            "type": "MemberExpression",
            "start": 336,
            "end": 352,
            "object": {
              "type": "Identifier",
              "start": 336,
              "end": 342,
              "name": "Object"
            },
            "property": {
              "type": "Identifier",
              "start": 343,
              "end": 352,
              "name": "prototype"
            },
            "computed": false,
            "optional": false
          },
          "property": {
            "type": "Identifier",
            "start": 353,
            "end": 361,
            "name": "toString"
          },
          "computed": false,
          "optional": false
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 363,
      "end": 566,
      "test": {
        "type": "BinaryExpression",
        "start": 367,
        "end": 412,
        "left": {
          "type": "CallExpression",
          "start": 367,
          "end": 381,
          "callee": {
            "type": "MemberExpression",
            "start": 367,
            "end": 379,
            "object": {
              "type": "Identifier",
              "start": 367,
              "end": 370,
              "name": "arr"
            },
            "property": {
              "type": "Identifier",
              "start": 371,
              "end": 379,
              "name": "getClass"
            },
            "computed": false,
            "optional": false
          },
          "arguments": [],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "BinaryExpression",
          "start": 386,
          "end": 412,
          "left": {
            "type": "BinaryExpression",
            "start": 386,
            "end": 406,
            "left": {
              "type": "Literal",
              "start": 386,
              "end": 396,
              "value": "[object ",
              "raw": "\"[object \"",
              "regex": null,
              "bigint": null
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "start": 399,
              "end": 406,
              "value": "Array",
              "raw": "\"Array\"",
              "regex": null,
              "bigint": null
            }
          },
          "operator": "+",
          "right": {
            "type": "Literal",
            "start": 409,
            "end": 412,
            "value": "]",
            "raw": "\"]\"",
            "regex": null,
            "bigint": null
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 414,
        "end": 566,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 418,
            "end": 564,
            "argument": {
              "type": "NewExpression",
              "start": 424,
              "end": 563,
              "callee": {
                "type": "Identifier",
                "start": 428,
                "end": 440,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 441,
                  "end": 562,
                  "left": {
                    "type": "Literal",
                    "start": 441,
                    "end": 543,
                    "value": "#1: var x = [0,1,2,3]; var arr = x.splice(Number.POSITIVE_INFINITY,3); arr is Array object. Actual: ",
                    "raw": "'#1: var x = [0,1,2,3]; var arr = x.splice(Number.POSITIVE_INFINITY,3); arr is Array object. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 546,
                    "end": 562,
                    "expression": {
                      "type": "CallExpression",
                      "start": 547,
                      "end": 561,
                      "callee": {
                        "type": "MemberExpression",
                        "start": 547,
                        "end": 559,
                        "object": {
                          "type": "Identifier",
                          "start": 547,
                          "end": 550,
                          "name": "arr"
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 551,
                          "end": 559,
                          "name": "getClass"
                        },
                        "computed": false,
                        "optional": false
                      },
                      "arguments": [],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 568,
      "end": 735,
      "test": {
        "type": "BinaryExpression",
        "start": 572,
        "end": 588,
        "left": {
          "type": "MemberExpression",
          "start": 572,
          "end": 582,
          "object": {
            "type": "Identifier",
            "start": 572,
            "end": 575,
            "name": "arr"
          },
          "property": {
            "type": "Identifier",
            "start": 576,
            "end": 582,
            "name": "length"
          },
          "computed": false,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 587,
          "end": 588,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 590,
        "end": 735,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 594,
            "end": 733,
            "argument": {
              "type": "NewExpression",
              "start": 600,
              "end": 732,
              "callee": {
                "type": "Identifier",
                "start": 604,
                "end": 616,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 617,
                  "end": 731,
                  "left": {
                    "type": "Literal",
                    "start": 617,
                    "end": 716,
                    "value": "#2: var x = [0,1,2,3]; var arr = x.splice(Number.POSITIVE_INFINITY,3); arr.length === 0. Actual: ",
                    "raw": "'#2: var x = [0,1,2,3]; var arr = x.splice(Number.POSITIVE_INFINITY,3); arr.length === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 719,
                    "end": 731,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 720,
                      "end": 730,
                      "object": {
                        "type": "Identifier",
                        "start": 720,
                        "end": 723,
                        "name": "arr"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 724,
                        "end": 730,
                        "name": "length"
                      },
                      "computed": false,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 737,
      "end": 884,
      "test": {
        "type": "BinaryExpression",
        "start": 741,
        "end": 751,
        "left": {
          "type": "MemberExpression",
          "start": 741,
          "end": 745,
          "object": {
            "type": "Identifier",
            "start": 741,
            "end": 742,
            "name": "x"
          },
          "property": {
            "type": "Literal",
            "start": 743,
            "end": 744,
            "value": 0,
            "raw": "0",
            "regex": null,
            "bigint": null
          },
          "computed": true,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 750,
          "end": 751,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 753,
        "end": 884,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 757,
            "end": 882,
            "argument": {
              "type": "NewExpression",
              "start": 763,
              "end": 881,
              "callee": {
                "type": "Identifier",
                "start": 767,
                "end": 779,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 780,
                  "end": 880,
                  "left": {
                    "type": "Literal",
                    "start": 780,
                    "end": 871,
                    "value": "#3: var x = [0,1,2,3]; var x = x.splice(Number.POSITIVE_INFINITY,3); x[0] === 0. Actual: ",
                    "raw": "'#3: var x = [0,1,2,3]; var x = x.splice(Number.POSITIVE_INFINITY,3); x[0] === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 874,
                    "end": 880,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 875,
                      "end": 879,
                      "object": {
                        "type": "Identifier",
                        "start": 875,
                        "end": 876,
                        "name": "x"
                      },
                      "property": {
                        "type": "Literal",
                        "start": 877,
                        "end": 878,
                        "value": 0,
                        "raw": "0",
                        "regex": null,
                        "bigint": null
                      },
                      "computed": true,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 886,
      "end": 1033,
      "test": {
        "type": "BinaryExpression",
        "start": 890,
        "end": 900,
        "left": {
          "type": "MemberExpression",
          "start": 890,
          "end": 894,
          "object": {
            "type": "Identifier",
            "start": 890,
            "end": 891,
            "name": "x"
          },
          "property": {
            "type": "Literal",
            "start": 892,
            "end": 893,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "computed": true,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 899,
          "end": 900,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 902,
        "end": 1033,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 906,
            "end": 1031,
            "argument": {
              "type": "NewExpression",
              "start": 912,
              "end": 1030,
              "callee": {
                "type": "Identifier",
                "start": 916,
                "end": 928,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 929,
                  "end": 1029,
                  "left": {
                    "type": "Literal",
                    "start": 929,
                    "end": 1020,
                    "value": "#4: var x = [0,1,2,3]; var x = x.splice(Number.POSITIVE_INFINITY,3); x[1] === 1. Actual: ",
                    "raw": "'#4: var x = [0,1,2,3]; var x = x.splice(Number.POSITIVE_INFINITY,3); x[1] === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1023,
                    "end": 1029,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 1024,
                      "end": 1028,
                      "object": {
                        "type": "Identifier",
                        "start": 1024,
                        "end": 1025,
                        "name": "x"
                      },
                      "property": {
                        "type": "Literal",
                        "start": 1026,
                        "end": 1027,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "computed": true,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1035,
      "end": 1182,
      "test": {
        "type": "BinaryExpression",
        "start": 1039,
        "end": 1049,
        "left": {
          "type": "MemberExpression",
          "start": 1039,
          "end": 1043,
          "object": {
            "type": "Identifier",
            "start": 1039,
            "end": 1040,
            "name": "x"
          },
          "property": {
            "type": "Literal",
            "start": 1041,
            "end": 1042,
            "value": 2,
            "raw": "2",
            "regex": null,
            "bigint": null
          },
          "computed": true,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1048,
          "end": 1049,
          "value": 2,
          "raw": "2",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1051,
        "end": 1182,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1055,
            "end": 1180,
            "argument": {
              "type": "NewExpression",
              "start": 1061,
              "end": 1179,
              "callee": {
                "type": "Identifier",
                "start": 1065,
                "end": 1077,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1078,
                  "end": 1178,
                  "left": {
                    "type": "Literal",
                    "start": 1078,
                    "end": 1169,
                    "value": "#5: var x = [0,1,2,3]; var x = x.splice(Number.POSITIVE_INFINITY,3); x[2] === 2. Actual: ",
                    "raw": "'#5: var x = [0,1,2,3]; var x = x.splice(Number.POSITIVE_INFINITY,3); x[2] === 2. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1172,
                    "end": 1178,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 1173,
                      "end": 1177,
                      "object": {
                        "type": "Identifier",
                        "start": 1173,
                        "end": 1174,
                        "name": "x"
                      },
                      "property": {
                        "type": "Literal",
                        "start": 1175,
                        "end": 1176,
                        "value": 2,
                        "raw": "2",
                        "regex": null,
                        "bigint": null
                      },
                      "computed": true,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1184,
      "end": 1331,
      "test": {
        "type": "BinaryExpression",
        "start": 1188,
        "end": 1198,
        "left": {
          "type": "MemberExpression",
          "start": 1188,
          "end": 1192,
          "object": {
            "type": "Identifier",
            "start": 1188,
            "end": 1189,
            "name": "x"
          },
          "property": {
            "type": "Literal",
            "start": 1190,
            "end": 1191,
            "value": 3,
            "raw": "3",
            "regex": null,
            "bigint": null
          },
          "computed": true,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1197,
          "end": 1198,
          "value": 3,
          "raw": "3",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1200,
        "end": 1331,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1204,
            "end": 1329,
            "argument": {
              "type": "NewExpression",
              "start": 1210,
              "end": 1328,
              "callee": {
                "type": "Identifier",
                "start": 1214,
                "end": 1226,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1227,
                  "end": 1327,
                  "left": {
                    "type": "Literal",
                    "start": 1227,
                    "end": 1318,
                    "value": "#6: var x = [0,1,2,3]; var x = x.splice(Number.POSITIVE_INFINITY,3); x[3] === 3. Actual: ",
                    "raw": "'#6: var x = [0,1,2,3]; var x = x.splice(Number.POSITIVE_INFINITY,3); x[3] === 3. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1321,
                    "end": 1327,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 1322,
                      "end": 1326,
                      "object": {
                        "type": "Identifier",
                        "start": 1322,
                        "end": 1323,
                        "name": "x"
                      },
                      "property": {
                        "type": "Literal",
                        "start": 1324,
                        "end": 1325,
                        "value": 3,
                        "raw": "3",
                        "regex": null,
                        "bigint": null
                      },
                      "computed": true,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}