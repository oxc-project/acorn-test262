{
  "type": "Program",
  "start": 0,
  "end": 1056,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 256,
      "end": 271,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 260,
          "end": 270,
          "id": {
            "type": "Identifier",
            "start": 260,
            "end": 261,
            "name": "x"
          },
          "init": {
            "type": "ArrayExpression",
            "start": 264,
            "end": 270,
            "elements": [
              {
                "type": "Literal",
                "start": 265,
                "end": 266,
                "value": 0,
                "raw": "0",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 268,
                "end": 269,
                "value": 1,
                "raw": "1",
                "regex": null,
                "bigint": null
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "start": 272,
      "end": 299,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 276,
          "end": 298,
          "id": {
            "type": "Identifier",
            "start": 276,
            "end": 279,
            "name": "arr"
          },
          "init": {
            "type": "CallExpression",
            "start": 282,
            "end": 298,
            "callee": {
              "type": "MemberExpression",
              "start": 282,
              "end": 290,
              "object": {
                "type": "Identifier",
                "start": 282,
                "end": 283,
                "name": "x"
              },
              "property": {
                "type": "Identifier",
                "start": 284,
                "end": 290,
                "name": "splice"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 291,
                "end": 292,
                "value": 0,
                "raw": "0",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Identifier",
                "start": 294,
                "end": 297,
                "name": "NaN"
              }
            ],
            "optional": false
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 301,
      "end": 342,
      "expression": {
        "type": "AssignmentExpression",
        "start": 301,
        "end": 341,
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "start": 301,
          "end": 313,
          "object": {
            "type": "Identifier",
            "start": 301,
            "end": 304,
            "name": "arr"
          },
          "property": {
            "type": "Identifier",
            "start": 305,
            "end": 313,
            "name": "getClass"
          },
          "computed": false,
          "optional": false
        },
        "right": {
          "type": "MemberExpression",
          "start": 316,
          "end": 341,
          "object": {
            "type": "MemberExpression",
            "start": 316,
            "end": 332,
            "object": {
              "type": "Identifier",
              "start": 316,
              "end": 322,
              "name": "Object"
            },
            "property": {
              "type": "Identifier",
              "start": 323,
              "end": 332,
              "name": "prototype"
            },
            "computed": false,
            "optional": false
          },
          "property": {
            "type": "Identifier",
            "start": 333,
            "end": 341,
            "name": "toString"
          },
          "computed": false,
          "optional": false
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 343,
      "end": 521,
      "test": {
        "type": "BinaryExpression",
        "start": 347,
        "end": 392,
        "left": {
          "type": "CallExpression",
          "start": 347,
          "end": 361,
          "callee": {
            "type": "MemberExpression",
            "start": 347,
            "end": 359,
            "object": {
              "type": "Identifier",
              "start": 347,
              "end": 350,
              "name": "arr"
            },
            "property": {
              "type": "Identifier",
              "start": 351,
              "end": 359,
              "name": "getClass"
            },
            "computed": false,
            "optional": false
          },
          "arguments": [],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "BinaryExpression",
          "start": 366,
          "end": 392,
          "left": {
            "type": "BinaryExpression",
            "start": 366,
            "end": 386,
            "left": {
              "type": "Literal",
              "start": 366,
              "end": 376,
              "value": "[object ",
              "raw": "\"[object \"",
              "regex": null,
              "bigint": null
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "start": 379,
              "end": 386,
              "value": "Array",
              "raw": "\"Array\"",
              "regex": null,
              "bigint": null
            }
          },
          "operator": "+",
          "right": {
            "type": "Literal",
            "start": 389,
            "end": 392,
            "value": "]",
            "raw": "\"]\"",
            "regex": null,
            "bigint": null
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 394,
        "end": 521,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 398,
            "end": 519,
            "argument": {
              "type": "NewExpression",
              "start": 404,
              "end": 518,
              "callee": {
                "type": "Identifier",
                "start": 408,
                "end": 420,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 421,
                  "end": 517,
                  "left": {
                    "type": "Literal",
                    "start": 421,
                    "end": 498,
                    "value": "#0: var x = [0,1]; var arr = x.splice(0,NaN); arr is Array object. Actual: ",
                    "raw": "'#0: var x = [0,1]; var arr = x.splice(0,NaN); arr is Array object. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 501,
                    "end": 517,
                    "expression": {
                      "type": "CallExpression",
                      "start": 502,
                      "end": 516,
                      "callee": {
                        "type": "MemberExpression",
                        "start": 502,
                        "end": 514,
                        "object": {
                          "type": "Identifier",
                          "start": 502,
                          "end": 505,
                          "name": "arr"
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 506,
                          "end": 514,
                          "name": "getClass"
                        },
                        "computed": false,
                        "optional": false
                      },
                      "arguments": [],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 523,
      "end": 665,
      "test": {
        "type": "BinaryExpression",
        "start": 527,
        "end": 543,
        "left": {
          "type": "MemberExpression",
          "start": 527,
          "end": 537,
          "object": {
            "type": "Identifier",
            "start": 527,
            "end": 530,
            "name": "arr"
          },
          "property": {
            "type": "Identifier",
            "start": 531,
            "end": 537,
            "name": "length"
          },
          "computed": false,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 542,
          "end": 543,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 545,
        "end": 665,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 549,
            "end": 663,
            "argument": {
              "type": "NewExpression",
              "start": 555,
              "end": 662,
              "callee": {
                "type": "Identifier",
                "start": 559,
                "end": 571,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 572,
                  "end": 661,
                  "left": {
                    "type": "Literal",
                    "start": 572,
                    "end": 646,
                    "value": "#1: var x = [0,1]; var arr = x.splice(0,NaN); arr.length === 0. Actual: ",
                    "raw": "'#1: var x = [0,1]; var arr = x.splice(0,NaN); arr.length === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 649,
                    "end": 661,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 650,
                      "end": 660,
                      "object": {
                        "type": "Identifier",
                        "start": 650,
                        "end": 653,
                        "name": "arr"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 654,
                        "end": 660,
                        "name": "length"
                      },
                      "computed": false,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 667,
      "end": 803,
      "test": {
        "type": "BinaryExpression",
        "start": 671,
        "end": 685,
        "left": {
          "type": "MemberExpression",
          "start": 671,
          "end": 679,
          "object": {
            "type": "Identifier",
            "start": 671,
            "end": 672,
            "name": "x"
          },
          "property": {
            "type": "Identifier",
            "start": 673,
            "end": 679,
            "name": "length"
          },
          "computed": false,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 684,
          "end": 685,
          "value": 2,
          "raw": "2",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 687,
        "end": 803,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 691,
            "end": 801,
            "argument": {
              "type": "NewExpression",
              "start": 697,
              "end": 800,
              "callee": {
                "type": "Identifier",
                "start": 701,
                "end": 713,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 714,
                  "end": 799,
                  "left": {
                    "type": "Literal",
                    "start": 714,
                    "end": 786,
                    "value": "#2: var x = [0,1]; var arr = x.splice(0,NaN); x.length === 2. Actual: ",
                    "raw": "'#2: var x = [0,1]; var arr = x.splice(0,NaN); x.length === 2. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 789,
                    "end": 799,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 790,
                      "end": 798,
                      "object": {
                        "type": "Identifier",
                        "start": 790,
                        "end": 791,
                        "name": "x"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 792,
                        "end": 798,
                        "name": "length"
                      },
                      "computed": false,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 805,
      "end": 929,
      "test": {
        "type": "BinaryExpression",
        "start": 809,
        "end": 819,
        "left": {
          "type": "MemberExpression",
          "start": 809,
          "end": 813,
          "object": {
            "type": "Identifier",
            "start": 809,
            "end": 810,
            "name": "x"
          },
          "property": {
            "type": "Literal",
            "start": 811,
            "end": 812,
            "value": 0,
            "raw": "0",
            "regex": null,
            "bigint": null
          },
          "computed": true,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 818,
          "end": 819,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 821,
        "end": 929,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 825,
            "end": 927,
            "argument": {
              "type": "NewExpression",
              "start": 831,
              "end": 926,
              "callee": {
                "type": "Identifier",
                "start": 835,
                "end": 847,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 848,
                  "end": 925,
                  "left": {
                    "type": "Literal",
                    "start": 848,
                    "end": 916,
                    "value": "#3: var x = [0,1]; var arr = x.splice(0,NaN); x[0] === 0. Actual: ",
                    "raw": "'#3: var x = [0,1]; var arr = x.splice(0,NaN); x[0] === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 919,
                    "end": 925,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 920,
                      "end": 924,
                      "object": {
                        "type": "Identifier",
                        "start": 920,
                        "end": 921,
                        "name": "x"
                      },
                      "property": {
                        "type": "Literal",
                        "start": 922,
                        "end": 923,
                        "value": 0,
                        "raw": "0",
                        "regex": null,
                        "bigint": null
                      },
                      "computed": true,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 931,
      "end": 1055,
      "test": {
        "type": "BinaryExpression",
        "start": 935,
        "end": 945,
        "left": {
          "type": "MemberExpression",
          "start": 935,
          "end": 939,
          "object": {
            "type": "Identifier",
            "start": 935,
            "end": 936,
            "name": "x"
          },
          "property": {
            "type": "Literal",
            "start": 937,
            "end": 938,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          },
          "computed": true,
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 944,
          "end": 945,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 947,
        "end": 1055,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 951,
            "end": 1053,
            "argument": {
              "type": "NewExpression",
              "start": 957,
              "end": 1052,
              "callee": {
                "type": "Identifier",
                "start": 961,
                "end": 973,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 974,
                  "end": 1051,
                  "left": {
                    "type": "Literal",
                    "start": 974,
                    "end": 1042,
                    "value": "#4: var x = [0,1]; var arr = x.splice(0,NaN); x[1] === 1. Actual: ",
                    "raw": "'#4: var x = [0,1]; var arr = x.splice(0,NaN); x[1] === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1045,
                    "end": 1051,
                    "expression": {
                      "type": "MemberExpression",
                      "start": 1046,
                      "end": 1050,
                      "object": {
                        "type": "Identifier",
                        "start": 1046,
                        "end": 1047,
                        "name": "x"
                      },
                      "property": {
                        "type": "Literal",
                        "start": 1048,
                        "end": 1049,
                        "value": 1,
                        "raw": "1",
                        "regex": null,
                        "bigint": null
                      },
                      "computed": true,
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}