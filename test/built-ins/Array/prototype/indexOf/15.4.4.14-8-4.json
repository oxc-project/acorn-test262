{
  "type": "Program",
  "start": 0,
  "end": 364,
  "body": [
    {
      "type": "ExpressionStatement",
      "start": 282,
      "end": 363,
      "expression": {
        "type": "CallExpression",
        "start": 282,
        "end": 362,
        "callee": {
          "type": "MemberExpression",
          "start": 282,
          "end": 298,
          "object": {
            "type": "Identifier",
            "start": 282,
            "end": 288,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 289,
            "end": 298,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 299,
            "end": 326,
            "callee": {
              "type": "MemberExpression",
              "start": 299,
              "end": 319,
              "object": {
                "type": "ArrayExpression",
                "start": 299,
                "end": 311,
                "elements": [
                  {
                    "type": "Literal",
                    "start": 300,
                    "end": 301,
                    "value": 1,
                    "raw": "1",
                    "regex": null,
                    "bigint": null
                  },
                  {
                    "type": "Literal",
                    "start": 303,
                    "end": 304,
                    "value": 2,
                    "raw": "2",
                    "regex": null,
                    "bigint": null
                  },
                  {
                    "type": "Literal",
                    "start": 306,
                    "end": 307,
                    "value": 3,
                    "raw": "3",
                    "regex": null,
                    "bigint": null
                  },
                  {
                    "type": "Literal",
                    "start": 309,
                    "end": 310,
                    "value": 4,
                    "raw": "4",
                    "regex": null,
                    "bigint": null
                  }
                ]
              },
              "property": {
                "type": "Identifier",
                "start": 312,
                "end": 319,
                "name": "indexOf"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Literal",
                "start": 320,
                "end": 321,
                "value": 0,
                "raw": "0",
                "regex": null,
                "bigint": null
              },
              {
                "type": "UnaryExpression",
                "start": 323,
                "end": 325,
                "operator": "-",
                "prefix": true,
                "argument": {
                  "type": "Literal",
                  "start": 324,
                  "end": 325,
                  "value": 4,
                  "raw": "4",
                  "regex": null,
                  "bigint": null
                }
              }
            ],
            "optional": false
          },
          {
            "type": "UnaryExpression",
            "start": 328,
            "end": 330,
            "operator": "-",
            "prefix": true,
            "argument": {
              "type": "Literal",
              "start": 329,
              "end": 330,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            }
          },
          {
            "type": "Literal",
            "start": 332,
            "end": 361,
            "value": "[1, 2, 3, 4].indexOf(0, -4)",
            "raw": "'[1, 2, 3, 4].indexOf(0, -4)'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}