{
  "type": "Program",
  "start": 0,
  "end": 477,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 285,
      "end": 460,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 289,
          "end": 459,
          "id": {
            "type": "Identifier",
            "start": 289,
            "end": 296,
            "name": "evalStr"
          },
          "init": {
            "type": "BinaryExpression",
            "start": 299,
            "end": 459,
            "left": {
              "type": "BinaryExpression",
              "start": 299,
              "end": 452,
              "left": {
                "type": "BinaryExpression",
                "start": 299,
                "end": 443,
                "left": {
                  "type": "BinaryExpression",
                  "start": 299,
                  "end": 370,
                  "left": {
                    "type": "BinaryExpression",
                    "start": 299,
                    "end": 339,
                    "left": {
                      "type": "Literal",
                      "start": 299,
                      "end": 312,
                      "value": "//CHECK#1\n",
                      "raw": "'//CHECK#1\\n'",
                      "regex": null,
                      "bigint": null
                    },
                    "operator": "+",
                    "right": {
                      "type": "Literal",
                      "start": 314,
                      "end": 339,
                      "value": "for (var x in this) {\n",
                      "raw": "'for (var x in this) {\\n'",
                      "regex": null,
                      "bigint": null
                    }
                  },
                  "operator": "+",
                  "right": {
                    "type": "Literal",
                    "start": 341,
                    "end": 370,
                    "value": "  if ( x === 'Math' ) {\n",
                    "raw": "'  if ( x === \\'Math\\' ) {\\n'",
                    "regex": null,
                    "bigint": null
                  }
                },
                "operator": "+",
                "right": {
                  "type": "Literal",
                  "start": 372,
                  "end": 443,
                  "value": "    throw new Test262Error(\"#1: 'Math' have attribute DontEnum\");\n",
                  "raw": "'    throw new Test262Error(\"#1: \\'Math\\' have attribute DontEnum\");\\n'",
                  "regex": null,
                  "bigint": null
                }
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 445,
                "end": 452,
                "value": "  }\n",
                "raw": "'  }\\n'",
                "regex": null,
                "bigint": null
              }
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "start": 454,
              "end": 459,
              "value": "}\n",
              "raw": "'}\\n'",
              "regex": null,
              "bigint": null
            }
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 462,
      "end": 476,
      "expression": {
        "type": "CallExpression",
        "start": 462,
        "end": 475,
        "callee": {
          "type": "Identifier",
          "start": 462,
          "end": 466,
          "name": "eval"
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 467,
            "end": 474,
            "name": "evalStr"
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}