{
  "type": "Program",
  "start": 0,
  "end": 541,
  "body": [
    {
      "type": "ForInStatement",
      "start": 299,
      "end": 397,
      "left": {
        "type": "Identifier",
        "start": 304,
        "end": 305,
        "name": "x"
      },
      "right": {
        "type": "Identifier",
        "start": 309,
        "end": 316,
        "name": "Boolean"
      },
      "body": {
        "type": "BlockStatement",
        "start": 318,
        "end": 397,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 322,
            "end": 395,
            "expression": {
              "type": "CallExpression",
              "start": 322,
              "end": 394,
              "callee": {
                "type": "MemberExpression",
                "start": 322,
                "end": 341,
                "object": {
                  "type": "Identifier",
                  "start": 322,
                  "end": 328,
                  "name": "assert"
                },
                "property": {
                  "type": "Identifier",
                  "start": 329,
                  "end": 341,
                  "name": "notSameValue"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "start": 342,
                  "end": 343,
                  "name": "x"
                },
                {
                  "type": "Literal",
                  "start": 345,
                  "end": 356,
                  "value": "prototype",
                  "raw": "\"prototype\"",
                  "regex": null,
                  "bigint": null
                },
                {
                  "type": "Literal",
                  "start": 358,
                  "end": 393,
                  "value": "The value of x is not \"prototype\"",
                  "raw": "'The value of x is not \"prototype\"'",
                  "regex": null,
                  "bigint": null
                }
              ],
              "optional": false
            }
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 399,
      "end": 540,
      "expression": {
        "type": "CallExpression",
        "start": 399,
        "end": 539,
        "callee": {
          "type": "Identifier",
          "start": 399,
          "end": 405,
          "name": "assert"
        },
        "arguments": [
          {
            "type": "UnaryExpression",
            "start": 409,
            "end": 451,
            "operator": "!",
            "prefix": true,
            "argument": {
              "type": "CallExpression",
              "start": 410,
              "end": 451,
              "callee": {
                "type": "MemberExpression",
                "start": 410,
                "end": 438,
                "object": {
                  "type": "Identifier",
                  "start": 410,
                  "end": 417,
                  "name": "Boolean"
                },
                "property": {
                  "type": "Identifier",
                  "start": 418,
                  "end": 438,
                  "name": "propertyIsEnumerable"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 439,
                  "end": 450,
                  "value": "prototype",
                  "raw": "'prototype'",
                  "regex": null,
                  "bigint": null
                }
              ],
              "optional": false
            }
          },
          {
            "type": "Literal",
            "start": 455,
            "end": 537,
            "value": "The value of !Boolean.propertyIsEnumerable('prototype') is expected to be true",
            "raw": "'The value of !Boolean.propertyIsEnumerable(\\'prototype\\') is expected to be true'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}