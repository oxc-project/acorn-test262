{
  "type": "Program",
  "start": 0,
  "end": 1706,
  "body": [
    {
      "type": "FunctionDeclaration",
      "start": 460,
      "end": 761,
      "id": {
        "type": "Identifier",
        "start": 469,
        "end": 486,
        "name": "isSyntaxCharacter"
      },
      "expression": false,
      "generator": false,
      "async": false,
      "params": [
        {
          "type": "Identifier",
          "start": 487,
          "end": 488,
          "name": "c"
        }
      ],
      "body": {
        "type": "BlockStatement",
        "start": 490,
        "end": 761,
        "body": [
          {
            "type": "SwitchStatement",
            "start": 494,
            "end": 759,
            "discriminant": {
              "type": "Identifier",
              "start": 502,
              "end": 503,
              "name": "c"
            },
            "cases": [
              {
                "type": "SwitchCase",
                "start": 511,
                "end": 520,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 516,
                  "end": 519,
                  "value": "^",
                  "raw": "\"^\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 525,
                "end": 534,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 530,
                  "end": 533,
                  "value": "$",
                  "raw": "\"$\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 539,
                "end": 549,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 544,
                  "end": 548,
                  "value": "\\",
                  "raw": "\"\\\\\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 554,
                "end": 563,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 559,
                  "end": 562,
                  "value": ".",
                  "raw": "\".\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 568,
                "end": 577,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 573,
                  "end": 576,
                  "value": "*",
                  "raw": "\"*\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 582,
                "end": 591,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 587,
                  "end": 590,
                  "value": "+",
                  "raw": "\"+\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 596,
                "end": 605,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 601,
                  "end": 604,
                  "value": "?",
                  "raw": "\"?\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 610,
                "end": 619,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 615,
                  "end": 618,
                  "value": "(",
                  "raw": "\"(\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 624,
                "end": 633,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 629,
                  "end": 632,
                  "value": ")",
                  "raw": "\")\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 638,
                "end": 647,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 643,
                  "end": 646,
                  "value": "[",
                  "raw": "\"[\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 652,
                "end": 661,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 657,
                  "end": 660,
                  "value": "]",
                  "raw": "\"]\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 666,
                "end": 675,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 671,
                  "end": 674,
                  "value": "{",
                  "raw": "\"{\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 680,
                "end": 689,
                "consequent": [],
                "test": {
                  "type": "Literal",
                  "start": 685,
                  "end": 688,
                  "value": "}",
                  "raw": "\"}\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 694,
                "end": 722,
                "consequent": [
                  {
                    "type": "ReturnStatement",
                    "start": 710,
                    "end": 722,
                    "argument": {
                      "type": "Literal",
                      "start": 717,
                      "end": 721,
                      "value": true,
                      "raw": "true",
                      "regex": null,
                      "bigint": null
                    }
                  }
                ],
                "test": {
                  "type": "Literal",
                  "start": 699,
                  "end": 702,
                  "value": "|",
                  "raw": "\"|\"",
                  "regex": null,
                  "bigint": null
                }
              },
              {
                "type": "SwitchCase",
                "start": 727,
                "end": 755,
                "consequent": [
                  {
                    "type": "ReturnStatement",
                    "start": 742,
                    "end": 755,
                    "argument": {
                      "type": "Literal",
                      "start": 749,
                      "end": 754,
                      "value": false,
                      "raw": "false",
                      "regex": null,
                      "bigint": null
                    }
                  }
                ],
                "test": null
              }
            ]
          }
        ]
      }
    },
    {
      "type": "FunctionDeclaration",
      "start": 763,
      "end": 876,
      "id": {
        "type": "Identifier",
        "start": 772,
        "end": 784,
        "name": "isAlphaDigit"
      },
      "expression": false,
      "generator": false,
      "async": false,
      "params": [
        {
          "type": "Identifier",
          "start": 785,
          "end": 786,
          "name": "c"
        }
      ],
      "body": {
        "type": "BlockStatement",
        "start": 788,
        "end": 876,
        "body": [
          {
            "type": "ReturnStatement",
            "start": 792,
            "end": 874,
            "argument": {
              "type": "LogicalExpression",
              "start": 799,
              "end": 873,
              "left": {
                "type": "LogicalExpression",
                "start": 799,
                "end": 847,
                "left": {
                  "type": "ParenthesizedExpression",
                  "start": 799,
                  "end": 821,
                  "expression": {
                    "type": "LogicalExpression",
                    "start": 800,
                    "end": 820,
                    "left": {
                      "type": "BinaryExpression",
                      "start": 800,
                      "end": 808,
                      "left": {
                        "type": "Literal",
                        "start": 800,
                        "end": 803,
                        "value": "0",
                        "raw": "\"0\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "<=",
                      "right": {
                        "type": "Identifier",
                        "start": 807,
                        "end": 808,
                        "name": "c"
                      }
                    },
                    "operator": "&&",
                    "right": {
                      "type": "BinaryExpression",
                      "start": 812,
                      "end": 820,
                      "left": {
                        "type": "Identifier",
                        "start": 812,
                        "end": 813,
                        "name": "c"
                      },
                      "operator": "<=",
                      "right": {
                        "type": "Literal",
                        "start": 817,
                        "end": 820,
                        "value": "9",
                        "raw": "\"9\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                },
                "operator": "||",
                "right": {
                  "type": "ParenthesizedExpression",
                  "start": 825,
                  "end": 847,
                  "expression": {
                    "type": "LogicalExpression",
                    "start": 826,
                    "end": 846,
                    "left": {
                      "type": "BinaryExpression",
                      "start": 826,
                      "end": 834,
                      "left": {
                        "type": "Literal",
                        "start": 826,
                        "end": 829,
                        "value": "A",
                        "raw": "\"A\"",
                        "regex": null,
                        "bigint": null
                      },
                      "operator": "<=",
                      "right": {
                        "type": "Identifier",
                        "start": 833,
                        "end": 834,
                        "name": "c"
                      }
                    },
                    "operator": "&&",
                    "right": {
                      "type": "BinaryExpression",
                      "start": 838,
                      "end": 846,
                      "left": {
                        "type": "Identifier",
                        "start": 838,
                        "end": 839,
                        "name": "c"
                      },
                      "operator": "<=",
                      "right": {
                        "type": "Literal",
                        "start": 843,
                        "end": 846,
                        "value": "Z",
                        "raw": "\"Z\"",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  }
                }
              },
              "operator": "||",
              "right": {
                "type": "ParenthesizedExpression",
                "start": 851,
                "end": 873,
                "expression": {
                  "type": "LogicalExpression",
                  "start": 852,
                  "end": 872,
                  "left": {
                    "type": "BinaryExpression",
                    "start": 852,
                    "end": 860,
                    "left": {
                      "type": "Literal",
                      "start": 852,
                      "end": 855,
                      "value": "a",
                      "raw": "\"a\"",
                      "regex": null,
                      "bigint": null
                    },
                    "operator": "<=",
                    "right": {
                      "type": "Identifier",
                      "start": 859,
                      "end": 860,
                      "name": "c"
                    }
                  },
                  "operator": "&&",
                  "right": {
                    "type": "BinaryExpression",
                    "start": 864,
                    "end": 872,
                    "left": {
                      "type": "Identifier",
                      "start": 864,
                      "end": 865,
                      "name": "c"
                    },
                    "operator": "<=",
                    "right": {
                      "type": "Literal",
                      "start": 869,
                      "end": 872,
                      "value": "z",
                      "raw": "\"z\"",
                      "regex": null,
                      "bigint": null
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    {
      "type": "ForStatement",
      "start": 999,
      "end": 1279,
      "init": {
        "type": "VariableDeclaration",
        "start": 1004,
        "end": 1017,
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 1008,
            "end": 1017,
            "id": {
              "type": "Identifier",
              "start": 1008,
              "end": 1010,
              "name": "cu"
            },
            "init": {
              "type": "Literal",
              "start": 1013,
              "end": 1017,
              "value": 0,
              "raw": "0x00",
              "regex": null,
              "bigint": null
            }
          }
        ],
        "kind": "var"
      },
      "test": {
        "type": "BinaryExpression",
        "start": 1019,
        "end": 1029,
        "left": {
          "type": "Identifier",
          "start": 1019,
          "end": 1021,
          "name": "cu"
        },
        "operator": "<=",
        "right": {
          "type": "Literal",
          "start": 1025,
          "end": 1029,
          "value": 127,
          "raw": "0x7f",
          "regex": null,
          "bigint": null
        }
      },
      "update": {
        "type": "UpdateExpression",
        "start": 1031,
        "end": 1035,
        "operator": "++",
        "prefix": true,
        "argument": {
          "type": "Identifier",
          "start": 1033,
          "end": 1035,
          "name": "cu"
        }
      },
      "body": {
        "type": "BlockStatement",
        "start": 1037,
        "end": 1279,
        "body": [
          {
            "type": "VariableDeclaration",
            "start": 1041,
            "end": 1073,
            "declarations": [
              {
                "type": "VariableDeclarator",
                "start": 1045,
                "end": 1072,
                "id": {
                  "type": "Identifier",
                  "start": 1045,
                  "end": 1046,
                  "name": "s"
                },
                "init": {
                  "type": "CallExpression",
                  "start": 1049,
                  "end": 1072,
                  "callee": {
                    "type": "MemberExpression",
                    "start": 1049,
                    "end": 1068,
                    "object": {
                      "type": "Identifier",
                      "start": 1049,
                      "end": 1055,
                      "name": "String"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 1056,
                      "end": 1068,
                      "name": "fromCharCode"
                    },
                    "computed": false,
                    "optional": false
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "start": 1069,
                      "end": 1071,
                      "name": "cu"
                    }
                  ],
                  "optional": false
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "IfStatement",
            "start": 1076,
            "end": 1277,
            "test": {
              "type": "LogicalExpression",
              "start": 1080,
              "end": 1134,
              "left": {
                "type": "LogicalExpression",
                "start": 1080,
                "end": 1121,
                "left": {
                  "type": "UnaryExpression",
                  "start": 1080,
                  "end": 1096,
                  "operator": "!",
                  "prefix": true,
                  "argument": {
                    "type": "CallExpression",
                    "start": 1081,
                    "end": 1096,
                    "callee": {
                      "type": "Identifier",
                      "start": 1081,
                      "end": 1093,
                      "name": "isAlphaDigit"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "start": 1094,
                        "end": 1095,
                        "name": "s"
                      }
                    ],
                    "optional": false
                  }
                },
                "operator": "&&",
                "right": {
                  "type": "UnaryExpression",
                  "start": 1100,
                  "end": 1121,
                  "operator": "!",
                  "prefix": true,
                  "argument": {
                    "type": "CallExpression",
                    "start": 1101,
                    "end": 1121,
                    "callee": {
                      "type": "Identifier",
                      "start": 1101,
                      "end": 1118,
                      "name": "isSyntaxCharacter"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "start": 1119,
                        "end": 1120,
                        "name": "s"
                      }
                    ],
                    "optional": false
                  }
                }
              },
              "operator": "&&",
              "right": {
                "type": "BinaryExpression",
                "start": 1125,
                "end": 1134,
                "left": {
                  "type": "Identifier",
                  "start": 1125,
                  "end": 1126,
                  "name": "s"
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 1131,
                  "end": 1134,
                  "value": "/",
                  "raw": "\"/\"",
                  "regex": null,
                  "bigint": null
                }
              }
            },
            "consequent": {
              "type": "BlockStatement",
              "start": 1136,
              "end": 1277,
              "body": [
                {
                  "type": "ExpressionStatement",
                  "start": 1142,
                  "end": 1273,
                  "expression": {
                    "type": "CallExpression",
                    "start": 1142,
                    "end": 1272,
                    "callee": {
                      "type": "MemberExpression",
                      "start": 1142,
                      "end": 1155,
                      "object": {
                        "type": "Identifier",
                        "start": 1142,
                        "end": 1148,
                        "name": "assert"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 1149,
                        "end": 1155,
                        "name": "throws"
                      },
                      "computed": false,
                      "optional": false
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "start": 1156,
                        "end": 1167,
                        "name": "SyntaxError"
                      },
                      {
                        "type": "FunctionExpression",
                        "start": 1169,
                        "end": 1216,
                        "id": null,
                        "expression": false,
                        "generator": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 1180,
                          "end": 1216,
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 1188,
                              "end": 1210,
                              "expression": {
                                "type": "CallExpression",
                                "start": 1188,
                                "end": 1209,
                                "callee": {
                                  "type": "Identifier",
                                  "start": 1188,
                                  "end": 1194,
                                  "name": "RegExp"
                                },
                                "arguments": [
                                  {
                                    "type": "BinaryExpression",
                                    "start": 1195,
                                    "end": 1203,
                                    "left": {
                                      "type": "Literal",
                                      "start": 1195,
                                      "end": 1199,
                                      "value": "\\",
                                      "raw": "\"\\\\\"",
                                      "regex": null,
                                      "bigint": null
                                    },
                                    "operator": "+",
                                    "right": {
                                      "type": "Identifier",
                                      "start": 1202,
                                      "end": 1203,
                                      "name": "s"
                                    }
                                  },
                                  {
                                    "type": "Literal",
                                    "start": 1205,
                                    "end": 1208,
                                    "value": "u",
                                    "raw": "\"u\"",
                                    "regex": null,
                                    "bigint": null
                                  }
                                ],
                                "optional": false
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "BinaryExpression",
                        "start": 1218,
                        "end": 1271,
                        "left": {
                          "type": "BinaryExpression",
                          "start": 1218,
                          "end": 1265,
                          "left": {
                            "type": "Literal",
                            "start": 1218,
                            "end": 1261,
                            "value": "Invalid IdentityEscape in AtomEscape: '\\",
                            "raw": "\"Invalid IdentityEscape in AtomEscape: '\\\\\"",
                            "regex": null,
                            "bigint": null
                          },
                          "operator": "+",
                          "right": {
                            "type": "Identifier",
                            "start": 1264,
                            "end": 1265,
                            "name": "s"
                          }
                        },
                        "operator": "+",
                        "right": {
                          "type": "Literal",
                          "start": 1268,
                          "end": 1271,
                          "value": "'",
                          "raw": "\"'\"",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ],
                    "optional": false
                  }
                }
              ]
            },
            "alternate": null
          }
        ]
      }
    },
    {
      "type": "ForStatement",
      "start": 1404,
      "end": 1705,
      "init": {
        "type": "VariableDeclaration",
        "start": 1409,
        "end": 1422,
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 1413,
            "end": 1422,
            "id": {
              "type": "Identifier",
              "start": 1413,
              "end": 1415,
              "name": "cu"
            },
            "init": {
              "type": "Literal",
              "start": 1418,
              "end": 1422,
              "value": 0,
              "raw": "0x00",
              "regex": null,
              "bigint": null
            }
          }
        ],
        "kind": "var"
      },
      "test": {
        "type": "BinaryExpression",
        "start": 1424,
        "end": 1434,
        "left": {
          "type": "Identifier",
          "start": 1424,
          "end": 1426,
          "name": "cu"
        },
        "operator": "<=",
        "right": {
          "type": "Literal",
          "start": 1430,
          "end": 1434,
          "value": 127,
          "raw": "0x7f",
          "regex": null,
          "bigint": null
        }
      },
      "update": {
        "type": "UpdateExpression",
        "start": 1436,
        "end": 1440,
        "operator": "++",
        "prefix": true,
        "argument": {
          "type": "Identifier",
          "start": 1438,
          "end": 1440,
          "name": "cu"
        }
      },
      "body": {
        "type": "BlockStatement",
        "start": 1442,
        "end": 1705,
        "body": [
          {
            "type": "VariableDeclaration",
            "start": 1446,
            "end": 1478,
            "declarations": [
              {
                "type": "VariableDeclarator",
                "start": 1450,
                "end": 1477,
                "id": {
                  "type": "Identifier",
                  "start": 1450,
                  "end": 1451,
                  "name": "s"
                },
                "init": {
                  "type": "CallExpression",
                  "start": 1454,
                  "end": 1477,
                  "callee": {
                    "type": "MemberExpression",
                    "start": 1454,
                    "end": 1473,
                    "object": {
                      "type": "Identifier",
                      "start": 1454,
                      "end": 1460,
                      "name": "String"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 1461,
                      "end": 1473,
                      "name": "fromCharCode"
                    },
                    "computed": false,
                    "optional": false
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "start": 1474,
                      "end": 1476,
                      "name": "cu"
                    }
                  ],
                  "optional": false
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "IfStatement",
            "start": 1481,
            "end": 1703,
            "test": {
              "type": "LogicalExpression",
              "start": 1485,
              "end": 1552,
              "left": {
                "type": "LogicalExpression",
                "start": 1485,
                "end": 1539,
                "left": {
                  "type": "LogicalExpression",
                  "start": 1485,
                  "end": 1526,
                  "left": {
                    "type": "UnaryExpression",
                    "start": 1485,
                    "end": 1501,
                    "operator": "!",
                    "prefix": true,
                    "argument": {
                      "type": "CallExpression",
                      "start": 1486,
                      "end": 1501,
                      "callee": {
                        "type": "Identifier",
                        "start": 1486,
                        "end": 1498,
                        "name": "isAlphaDigit"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "start": 1499,
                          "end": 1500,
                          "name": "s"
                        }
                      ],
                      "optional": false
                    }
                  },
                  "operator": "&&",
                  "right": {
                    "type": "UnaryExpression",
                    "start": 1505,
                    "end": 1526,
                    "operator": "!",
                    "prefix": true,
                    "argument": {
                      "type": "CallExpression",
                      "start": 1506,
                      "end": 1526,
                      "callee": {
                        "type": "Identifier",
                        "start": 1506,
                        "end": 1523,
                        "name": "isSyntaxCharacter"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "start": 1524,
                          "end": 1525,
                          "name": "s"
                        }
                      ],
                      "optional": false
                    }
                  }
                },
                "operator": "&&",
                "right": {
                  "type": "BinaryExpression",
                  "start": 1530,
                  "end": 1539,
                  "left": {
                    "type": "Identifier",
                    "start": 1530,
                    "end": 1531,
                    "name": "s"
                  },
                  "operator": "!==",
                  "right": {
                    "type": "Literal",
                    "start": 1536,
                    "end": 1539,
                    "value": "/",
                    "raw": "\"/\"",
                    "regex": null,
                    "bigint": null
                  }
                }
              },
              "operator": "&&",
              "right": {
                "type": "BinaryExpression",
                "start": 1543,
                "end": 1552,
                "left": {
                  "type": "Identifier",
                  "start": 1543,
                  "end": 1544,
                  "name": "s"
                },
                "operator": "!==",
                "right": {
                  "type": "Literal",
                  "start": 1549,
                  "end": 1552,
                  "value": "-",
                  "raw": "\"-\"",
                  "regex": null,
                  "bigint": null
                }
              }
            },
            "consequent": {
              "type": "BlockStatement",
              "start": 1554,
              "end": 1703,
              "body": [
                {
                  "type": "ExpressionStatement",
                  "start": 1560,
                  "end": 1699,
                  "expression": {
                    "type": "CallExpression",
                    "start": 1560,
                    "end": 1698,
                    "callee": {
                      "type": "MemberExpression",
                      "start": 1560,
                      "end": 1573,
                      "object": {
                        "type": "Identifier",
                        "start": 1560,
                        "end": 1566,
                        "name": "assert"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 1567,
                        "end": 1573,
                        "name": "throws"
                      },
                      "computed": false,
                      "optional": false
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "start": 1574,
                        "end": 1585,
                        "name": "SyntaxError"
                      },
                      {
                        "type": "FunctionExpression",
                        "start": 1587,
                        "end": 1641,
                        "id": null,
                        "expression": false,
                        "generator": false,
                        "async": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "start": 1598,
                          "end": 1641,
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "start": 1606,
                              "end": 1635,
                              "expression": {
                                "type": "CallExpression",
                                "start": 1606,
                                "end": 1634,
                                "callee": {
                                  "type": "Identifier",
                                  "start": 1606,
                                  "end": 1612,
                                  "name": "RegExp"
                                },
                                "arguments": [
                                  {
                                    "type": "BinaryExpression",
                                    "start": 1613,
                                    "end": 1628,
                                    "left": {
                                      "type": "BinaryExpression",
                                      "start": 1613,
                                      "end": 1622,
                                      "left": {
                                        "type": "Literal",
                                        "start": 1613,
                                        "end": 1618,
                                        "value": "[\\",
                                        "raw": "\"[\\\\\"",
                                        "regex": null,
                                        "bigint": null
                                      },
                                      "operator": "+",
                                      "right": {
                                        "type": "Identifier",
                                        "start": 1621,
                                        "end": 1622,
                                        "name": "s"
                                      }
                                    },
                                    "operator": "+",
                                    "right": {
                                      "type": "Literal",
                                      "start": 1625,
                                      "end": 1628,
                                      "value": "]",
                                      "raw": "\"]\"",
                                      "regex": null,
                                      "bigint": null
                                    }
                                  },
                                  {
                                    "type": "Literal",
                                    "start": 1630,
                                    "end": 1633,
                                    "value": "u",
                                    "raw": "\"u\"",
                                    "regex": null,
                                    "bigint": null
                                  }
                                ],
                                "optional": false
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "BinaryExpression",
                        "start": 1643,
                        "end": 1697,
                        "left": {
                          "type": "BinaryExpression",
                          "start": 1643,
                          "end": 1691,
                          "left": {
                            "type": "Literal",
                            "start": 1643,
                            "end": 1687,
                            "value": "Invalid IdentityEscape in ClassEscape: '\\",
                            "raw": "\"Invalid IdentityEscape in ClassEscape: '\\\\\"",
                            "regex": null,
                            "bigint": null
                          },
                          "operator": "+",
                          "right": {
                            "type": "Identifier",
                            "start": 1690,
                            "end": 1691,
                            "name": "s"
                          }
                        },
                        "operator": "+",
                        "right": {
                          "type": "Literal",
                          "start": 1694,
                          "end": 1697,
                          "value": "'",
                          "raw": "\"'\"",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ],
                    "optional": false
                  }
                }
              ]
            },
            "alternate": null
          }
        ]
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}