{
  "type": "Program",
  "start": 0,
  "end": 991,
  "body": [
    {
      "type": "TryStatement",
      "start": 655,
      "end": 945,
      "block": {
        "type": "BlockStatement",
        "start": 659,
        "end": 785,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 663,
            "end": 783,
            "argument": {
              "type": "NewExpression",
              "start": 669,
              "end": 782,
              "callee": {
                "type": "Identifier",
                "start": 673,
                "end": 685,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 686,
                  "end": 781,
                  "left": {
                    "type": "Literal",
                    "start": 686,
                    "end": 743,
                    "value": "#1.1: /[\\10b-G]/.exec(\"a\") throw SyntaxError. Actual: ",
                    "raw": "'#1.1: /[\\\\10b-G]/.exec(\"a\") throw SyntaxError. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 746,
                    "end": 781,
                    "expression": {
                      "type": "CallExpression",
                      "start": 747,
                      "end": 780,
                      "callee": {
                        "type": "MemberExpression",
                        "start": 747,
                        "end": 775,
                        "object": {
                          "type": "NewExpression",
                          "start": 747,
                          "end": 770,
                          "callee": {
                            "type": "Identifier",
                            "start": 751,
                            "end": 757,
                            "name": "RegExp"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 758,
                              "end": 769,
                              "value": "[\\10b-G]",
                              "raw": "\"[\\\\10b-G]\"",
                              "regex": null,
                              "bigint": null
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 771,
                          "end": 775,
                          "name": "exec"
                        },
                        "computed": false,
                        "optional": false
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 776,
                          "end": 779,
                          "value": "a",
                          "raw": "\"a\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "handler": {
        "type": "CatchClause",
        "start": 786,
        "end": 945,
        "param": {
          "type": "Identifier",
          "start": 793,
          "end": 794,
          "name": "e"
        },
        "body": {
          "type": "BlockStatement",
          "start": 796,
          "end": 945,
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 800,
              "end": 943,
              "expression": {
                "type": "CallExpression",
                "start": 800,
                "end": 942,
                "callee": {
                  "type": "MemberExpression",
                  "start": 800,
                  "end": 816,
                  "object": {
                    "type": "Identifier",
                    "start": 800,
                    "end": 806,
                    "name": "assert"
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 807,
                    "end": 816,
                    "name": "sameValue"
                  },
                  "computed": false,
                  "optional": false
                },
                "arguments": [
                  {
                    "type": "BinaryExpression",
                    "start": 822,
                    "end": 846,
                    "left": {
                      "type": "Identifier",
                      "start": 822,
                      "end": 823,
                      "name": "e"
                    },
                    "operator": "instanceof",
                    "right": {
                      "type": "Identifier",
                      "start": 835,
                      "end": 846,
                      "name": "SyntaxError"
                    }
                  },
                  {
                    "type": "Literal",
                    "start": 852,
                    "end": 856,
                    "value": true,
                    "raw": "true",
                    "regex": null,
                    "bigint": null
                  },
                  {
                    "type": "Literal",
                    "start": 862,
                    "end": 938,
                    "value": "The result of evaluating (e instanceof SyntaxError) is expected to be true",
                    "raw": "'The result of evaluating (e instanceof SyntaxError) is expected to be true'",
                    "regex": null,
                    "bigint": null
                  }
                ],
                "optional": false
              }
            }
          ]
        }
      },
      "finalizer": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}