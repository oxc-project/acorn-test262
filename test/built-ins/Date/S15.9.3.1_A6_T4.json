{
  "type": "Program",
  "start": 0,
  "end": 1795,
  "body": [
    {
      "type": "FunctionDeclaration",
      "start": 384,
      "end": 531,
      "id": {
        "type": "Identifier",
        "start": 393,
        "end": 402,
        "name": "DateValue"
      },
      "expression": false,
      "generator": false,
      "async": false,
      "params": [
        {
          "type": "Identifier",
          "start": 403,
          "end": 407,
          "name": "year"
        },
        {
          "type": "Identifier",
          "start": 409,
          "end": 414,
          "name": "month"
        },
        {
          "type": "Identifier",
          "start": 416,
          "end": 420,
          "name": "date"
        },
        {
          "type": "Identifier",
          "start": 422,
          "end": 427,
          "name": "hours"
        },
        {
          "type": "Identifier",
          "start": 429,
          "end": 436,
          "name": "minutes"
        },
        {
          "type": "Identifier",
          "start": 438,
          "end": 445,
          "name": "seconds"
        },
        {
          "type": "Identifier",
          "start": 447,
          "end": 449,
          "name": "ms"
        }
      ],
      "body": {
        "type": "BlockStatement",
        "start": 451,
        "end": 531,
        "body": [
          {
            "type": "ReturnStatement",
            "start": 455,
            "end": 529,
            "argument": {
              "type": "CallExpression",
              "start": 462,
              "end": 528,
              "callee": {
                "type": "MemberExpression",
                "start": 462,
                "end": 526,
                "object": {
                  "type": "NewExpression",
                  "start": 462,
                  "end": 518,
                  "callee": {
                    "type": "Identifier",
                    "start": 466,
                    "end": 470,
                    "name": "Date"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "start": 471,
                      "end": 475,
                      "name": "year"
                    },
                    {
                      "type": "Identifier",
                      "start": 477,
                      "end": 482,
                      "name": "month"
                    },
                    {
                      "type": "Identifier",
                      "start": 484,
                      "end": 488,
                      "name": "date"
                    },
                    {
                      "type": "Identifier",
                      "start": 490,
                      "end": 495,
                      "name": "hours"
                    },
                    {
                      "type": "Identifier",
                      "start": 497,
                      "end": 504,
                      "name": "minutes"
                    },
                    {
                      "type": "Identifier",
                      "start": 506,
                      "end": 513,
                      "name": "seconds"
                    },
                    {
                      "type": "Identifier",
                      "start": 515,
                      "end": 517,
                      "name": "ms"
                    }
                  ]
                },
                "property": {
                  "type": "Identifier",
                  "start": 519,
                  "end": 526,
                  "name": "valueOf"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [],
              "optional": false
            }
          }
        ]
      }
    },
    {
      "type": "VariableDeclaration",
      "start": 533,
      "end": 539,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 537,
          "end": 538,
          "id": {
            "type": "Identifier",
            "start": 537,
            "end": 538,
            "name": "x"
          },
          "init": null
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 540,
      "end": 576,
      "expression": {
        "type": "AssignmentExpression",
        "start": 540,
        "end": 575,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 540,
          "end": 541,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 544,
          "end": 575,
          "callee": {
            "type": "Identifier",
            "start": 544,
            "end": 553,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 554,
              "end": 558,
              "value": 1899,
              "raw": "1899",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 560,
              "end": 562,
              "value": 11,
              "raw": "11",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 564,
              "end": 566,
              "value": 31,
              "raw": "31",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 568,
              "end": 570,
              "value": 23,
              "raw": "23",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 572,
              "end": 574,
              "value": 59,
              "raw": "59",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 577,
      "end": 645,
      "expression": {
        "type": "CallExpression",
        "start": 577,
        "end": 644,
        "callee": {
          "type": "MemberExpression",
          "start": 577,
          "end": 593,
          "object": {
            "type": "Identifier",
            "start": 577,
            "end": 583,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 584,
            "end": 593,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 594,
            "end": 595,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 597,
            "end": 600,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 602,
            "end": 643,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 647,
      "end": 680,
      "expression": {
        "type": "AssignmentExpression",
        "start": 647,
        "end": 679,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 647,
          "end": 648,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 651,
          "end": 679,
          "callee": {
            "type": "Identifier",
            "start": 651,
            "end": 660,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 661,
              "end": 665,
              "value": 1899,
              "raw": "1899",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 667,
              "end": 669,
              "value": 12,
              "raw": "12",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 671,
              "end": 672,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 674,
              "end": 675,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 677,
              "end": 678,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 681,
      "end": 749,
      "expression": {
        "type": "CallExpression",
        "start": 681,
        "end": 748,
        "callee": {
          "type": "MemberExpression",
          "start": 681,
          "end": 697,
          "object": {
            "type": "Identifier",
            "start": 681,
            "end": 687,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 688,
            "end": 697,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 698,
            "end": 699,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 701,
            "end": 704,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 706,
            "end": 747,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 751,
      "end": 783,
      "expression": {
        "type": "AssignmentExpression",
        "start": 751,
        "end": 782,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 751,
          "end": 752,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 755,
          "end": 782,
          "callee": {
            "type": "Identifier",
            "start": 755,
            "end": 764,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 765,
              "end": 769,
              "value": 1900,
              "raw": "1900",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 771,
              "end": 772,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 774,
              "end": 775,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 777,
              "end": 778,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 780,
              "end": 781,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 784,
      "end": 852,
      "expression": {
        "type": "CallExpression",
        "start": 784,
        "end": 851,
        "callee": {
          "type": "MemberExpression",
          "start": 784,
          "end": 800,
          "object": {
            "type": "Identifier",
            "start": 784,
            "end": 790,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 791,
            "end": 800,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 801,
            "end": 802,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 804,
            "end": 807,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 809,
            "end": 850,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 854,
      "end": 890,
      "expression": {
        "type": "AssignmentExpression",
        "start": 854,
        "end": 889,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 854,
          "end": 855,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 858,
          "end": 889,
          "callee": {
            "type": "Identifier",
            "start": 858,
            "end": 867,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 868,
              "end": 872,
              "value": 1969,
              "raw": "1969",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 874,
              "end": 876,
              "value": 11,
              "raw": "11",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 878,
              "end": 880,
              "value": 31,
              "raw": "31",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 882,
              "end": 884,
              "value": 23,
              "raw": "23",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 886,
              "end": 888,
              "value": 59,
              "raw": "59",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 891,
      "end": 959,
      "expression": {
        "type": "CallExpression",
        "start": 891,
        "end": 958,
        "callee": {
          "type": "MemberExpression",
          "start": 891,
          "end": 907,
          "object": {
            "type": "Identifier",
            "start": 891,
            "end": 897,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 898,
            "end": 907,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 908,
            "end": 909,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 911,
            "end": 914,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 916,
            "end": 957,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 961,
      "end": 994,
      "expression": {
        "type": "AssignmentExpression",
        "start": 961,
        "end": 993,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 961,
          "end": 962,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 965,
          "end": 993,
          "callee": {
            "type": "Identifier",
            "start": 965,
            "end": 974,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 975,
              "end": 979,
              "value": 1969,
              "raw": "1969",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 981,
              "end": 983,
              "value": 12,
              "raw": "12",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 985,
              "end": 986,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 988,
              "end": 989,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 991,
              "end": 992,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 995,
      "end": 1063,
      "expression": {
        "type": "CallExpression",
        "start": 995,
        "end": 1062,
        "callee": {
          "type": "MemberExpression",
          "start": 995,
          "end": 1011,
          "object": {
            "type": "Identifier",
            "start": 995,
            "end": 1001,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1002,
            "end": 1011,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1012,
            "end": 1013,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 1015,
            "end": 1018,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 1020,
            "end": 1061,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1065,
      "end": 1097,
      "expression": {
        "type": "AssignmentExpression",
        "start": 1065,
        "end": 1096,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 1065,
          "end": 1066,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 1069,
          "end": 1096,
          "callee": {
            "type": "Identifier",
            "start": 1069,
            "end": 1078,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1079,
              "end": 1083,
              "value": 1970,
              "raw": "1970",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1085,
              "end": 1086,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1088,
              "end": 1089,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1091,
              "end": 1092,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1094,
              "end": 1095,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1098,
      "end": 1166,
      "expression": {
        "type": "CallExpression",
        "start": 1098,
        "end": 1165,
        "callee": {
          "type": "MemberExpression",
          "start": 1098,
          "end": 1114,
          "object": {
            "type": "Identifier",
            "start": 1098,
            "end": 1104,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1105,
            "end": 1114,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1115,
            "end": 1116,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 1118,
            "end": 1121,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 1123,
            "end": 1164,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1168,
      "end": 1204,
      "expression": {
        "type": "AssignmentExpression",
        "start": 1168,
        "end": 1203,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 1168,
          "end": 1169,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 1172,
          "end": 1203,
          "callee": {
            "type": "Identifier",
            "start": 1172,
            "end": 1181,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1182,
              "end": 1186,
              "value": 1999,
              "raw": "1999",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1188,
              "end": 1190,
              "value": 11,
              "raw": "11",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1192,
              "end": 1194,
              "value": 31,
              "raw": "31",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1196,
              "end": 1198,
              "value": 23,
              "raw": "23",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1200,
              "end": 1202,
              "value": 59,
              "raw": "59",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1205,
      "end": 1273,
      "expression": {
        "type": "CallExpression",
        "start": 1205,
        "end": 1272,
        "callee": {
          "type": "MemberExpression",
          "start": 1205,
          "end": 1221,
          "object": {
            "type": "Identifier",
            "start": 1205,
            "end": 1211,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1212,
            "end": 1221,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1222,
            "end": 1223,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 1225,
            "end": 1228,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 1230,
            "end": 1271,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1275,
      "end": 1308,
      "expression": {
        "type": "AssignmentExpression",
        "start": 1275,
        "end": 1307,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 1275,
          "end": 1276,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 1279,
          "end": 1307,
          "callee": {
            "type": "Identifier",
            "start": 1279,
            "end": 1288,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1289,
              "end": 1293,
              "value": 1999,
              "raw": "1999",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1295,
              "end": 1297,
              "value": 12,
              "raw": "12",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1299,
              "end": 1300,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1302,
              "end": 1303,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1305,
              "end": 1306,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1309,
      "end": 1377,
      "expression": {
        "type": "CallExpression",
        "start": 1309,
        "end": 1376,
        "callee": {
          "type": "MemberExpression",
          "start": 1309,
          "end": 1325,
          "object": {
            "type": "Identifier",
            "start": 1309,
            "end": 1315,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1316,
            "end": 1325,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1326,
            "end": 1327,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 1329,
            "end": 1332,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 1334,
            "end": 1375,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1379,
      "end": 1411,
      "expression": {
        "type": "AssignmentExpression",
        "start": 1379,
        "end": 1410,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 1379,
          "end": 1380,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 1383,
          "end": 1410,
          "callee": {
            "type": "Identifier",
            "start": 1383,
            "end": 1392,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1393,
              "end": 1397,
              "value": 2000,
              "raw": "2000",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1399,
              "end": 1400,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1402,
              "end": 1403,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1405,
              "end": 1406,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1408,
              "end": 1409,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1412,
      "end": 1480,
      "expression": {
        "type": "CallExpression",
        "start": 1412,
        "end": 1479,
        "callee": {
          "type": "MemberExpression",
          "start": 1412,
          "end": 1428,
          "object": {
            "type": "Identifier",
            "start": 1412,
            "end": 1418,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1419,
            "end": 1428,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1429,
            "end": 1430,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 1432,
            "end": 1435,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 1437,
            "end": 1478,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1482,
      "end": 1518,
      "expression": {
        "type": "AssignmentExpression",
        "start": 1482,
        "end": 1517,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 1482,
          "end": 1483,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 1486,
          "end": 1517,
          "callee": {
            "type": "Identifier",
            "start": 1486,
            "end": 1495,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1496,
              "end": 1500,
              "value": 2099,
              "raw": "2099",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1502,
              "end": 1504,
              "value": 11,
              "raw": "11",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1506,
              "end": 1508,
              "value": 31,
              "raw": "31",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1510,
              "end": 1512,
              "value": 23,
              "raw": "23",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1514,
              "end": 1516,
              "value": 59,
              "raw": "59",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1519,
      "end": 1587,
      "expression": {
        "type": "CallExpression",
        "start": 1519,
        "end": 1586,
        "callee": {
          "type": "MemberExpression",
          "start": 1519,
          "end": 1535,
          "object": {
            "type": "Identifier",
            "start": 1519,
            "end": 1525,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1526,
            "end": 1535,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1536,
            "end": 1537,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 1539,
            "end": 1542,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 1544,
            "end": 1585,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1589,
      "end": 1622,
      "expression": {
        "type": "AssignmentExpression",
        "start": 1589,
        "end": 1621,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 1589,
          "end": 1590,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 1593,
          "end": 1621,
          "callee": {
            "type": "Identifier",
            "start": 1593,
            "end": 1602,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1603,
              "end": 1607,
              "value": 2099,
              "raw": "2099",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1609,
              "end": 1611,
              "value": 12,
              "raw": "12",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1613,
              "end": 1614,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1616,
              "end": 1617,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1619,
              "end": 1620,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1623,
      "end": 1691,
      "expression": {
        "type": "CallExpression",
        "start": 1623,
        "end": 1690,
        "callee": {
          "type": "MemberExpression",
          "start": 1623,
          "end": 1639,
          "object": {
            "type": "Identifier",
            "start": 1623,
            "end": 1629,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1630,
            "end": 1639,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1640,
            "end": 1641,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 1643,
            "end": 1646,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 1648,
            "end": 1689,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1693,
      "end": 1725,
      "expression": {
        "type": "AssignmentExpression",
        "start": 1693,
        "end": 1724,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 1693,
          "end": 1694,
          "name": "x"
        },
        "right": {
          "type": "CallExpression",
          "start": 1697,
          "end": 1724,
          "callee": {
            "type": "Identifier",
            "start": 1697,
            "end": 1706,
            "name": "DateValue"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1707,
              "end": 1711,
              "value": 2100,
              "raw": "2100",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1713,
              "end": 1714,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1716,
              "end": 1717,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1719,
              "end": 1720,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            },
            {
              "type": "Literal",
              "start": 1722,
              "end": 1723,
              "value": 0,
              "raw": "0",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1726,
      "end": 1794,
      "expression": {
        "type": "CallExpression",
        "start": 1726,
        "end": 1793,
        "callee": {
          "type": "MemberExpression",
          "start": 1726,
          "end": 1742,
          "object": {
            "type": "Identifier",
            "start": 1726,
            "end": 1732,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1733,
            "end": 1742,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1743,
            "end": 1744,
            "name": "x"
          },
          {
            "type": "Identifier",
            "start": 1746,
            "end": 1749,
            "name": "NaN"
          },
          {
            "type": "Literal",
            "start": 1751,
            "end": 1792,
            "value": "The value of x is expected to equal NaN",
            "raw": "'The value of x is expected to equal NaN'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}