{
  "type": "Program",
  "start": 0,
  "end": 842,
  "body": [
    {
      "type": "IfStatement",
      "start": 260,
      "end": 413,
      "test": {
        "type": "BinaryExpression",
        "start": 264,
        "end": 347,
        "left": {
          "type": "CallExpression",
          "start": 264,
          "end": 313,
          "callee": {
            "type": "Identifier",
            "start": 264,
            "end": 282,
            "name": "decodeURIComponent"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 283,
              "end": 312,
              "value": "http://unipro.ru/0123456789",
              "raw": "\"http://unipro.ru/0123456789\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 318,
          "end": 347,
          "value": "http://unipro.ru/0123456789",
          "raw": "\"http://unipro.ru/0123456789\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 349,
        "end": 413,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 353,
            "end": 411,
            "argument": {
              "type": "NewExpression",
              "start": 359,
              "end": 410,
              "callee": {
                "type": "Identifier",
                "start": 363,
                "end": 375,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 376,
                  "end": 409,
                  "value": "#1: http://unipro.ru/0123456789",
                  "raw": "'#1: http://unipro.ru/0123456789'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 425,
      "end": 627,
      "test": {
        "type": "BinaryExpression",
        "start": 429,
        "end": 562,
        "left": {
          "type": "CallExpression",
          "start": 429,
          "end": 529,
          "callee": {
            "type": "Identifier",
            "start": 429,
            "end": 447,
            "name": "decodeURIComponent"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 448,
              "end": 528,
              "value": "%41%42%43%44%45%46%47%48%49%4A%4B%4C%4D%4E%4F%50%51%52%53%54%55%56%57%58%59%5A",
              "raw": "\"%41%42%43%44%45%46%47%48%49%4A%4B%4C%4D%4E%4F%50%51%52%53%54%55%56%57%58%59%5A\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 534,
          "end": 562,
          "value": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
          "raw": "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 564,
        "end": 627,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 568,
            "end": 625,
            "argument": {
              "type": "NewExpression",
              "start": 574,
              "end": 624,
              "callee": {
                "type": "Identifier",
                "start": 578,
                "end": 590,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 591,
                  "end": 623,
                  "value": "#2: ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                  "raw": "'#2: ABCDEFGHIJKLMNOPQRSTUVWXYZ'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 639,
      "end": 841,
      "test": {
        "type": "BinaryExpression",
        "start": 643,
        "end": 776,
        "left": {
          "type": "CallExpression",
          "start": 643,
          "end": 743,
          "callee": {
            "type": "Identifier",
            "start": 643,
            "end": 661,
            "name": "decodeURIComponent"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 662,
              "end": 742,
              "value": "%61%62%63%64%65%66%67%68%69%6A%6B%6C%6D%6E%6F%70%71%72%73%74%75%76%77%78%79%7A",
              "raw": "\"%61%62%63%64%65%66%67%68%69%6A%6B%6C%6D%6E%6F%70%71%72%73%74%75%76%77%78%79%7A\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 748,
          "end": 776,
          "value": "abcdefghijklmnopqrstuvwxyz",
          "raw": "\"abcdefghijklmnopqrstuvwxyz\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 778,
        "end": 841,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 782,
            "end": 839,
            "argument": {
              "type": "NewExpression",
              "start": 788,
              "end": 838,
              "callee": {
                "type": "Identifier",
                "start": 792,
                "end": 804,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 805,
                  "end": 837,
                  "value": "#3: abcdefghijklmnopqrstuvwxyz",
                  "raw": "'#3: abcdefghijklmnopqrstuvwxyz'",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}