{
  "type": "Program",
  "start": 0,
  "end": 2898,
  "body": [
    {
      "type": "IfStatement",
      "start": 342,
      "end": 476,
      "test": {
        "type": "BinaryExpression",
        "start": 346,
        "end": 374,
        "left": {
          "type": "CallExpression",
          "start": 346,
          "end": 366,
          "callee": {
            "type": "Identifier",
            "start": 346,
            "end": 352,
            "name": "String"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 353,
              "end": 365,
              "callee": {
                "type": "Identifier",
                "start": 357,
                "end": 363,
                "name": "Number"
              },
              "arguments": []
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 371,
          "end": 374,
          "value": "0",
          "raw": "\"0\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 376,
        "end": 476,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 380,
            "end": 474,
            "argument": {
              "type": "NewExpression",
              "start": 386,
              "end": 473,
              "callee": {
                "type": "Identifier",
                "start": 390,
                "end": 402,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 403,
                  "end": 472,
                  "left": {
                    "type": "Literal",
                    "start": 403,
                    "end": 447,
                    "value": "#1: String(new Number()) === \"0\". Actual: ",
                    "raw": "'#1: String(new Number()) === \"0\". Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 450,
                    "end": 472,
                    "expression": {
                      "type": "CallExpression",
                      "start": 451,
                      "end": 471,
                      "callee": {
                        "type": "Identifier",
                        "start": 451,
                        "end": 457,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 458,
                          "end": 470,
                          "callee": {
                            "type": "Identifier",
                            "start": 462,
                            "end": 468,
                            "name": "Number"
                          },
                          "arguments": []
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 489,
      "end": 626,
      "test": {
        "type": "BinaryExpression",
        "start": 493,
        "end": 522,
        "left": {
          "type": "CallExpression",
          "start": 493,
          "end": 514,
          "callee": {
            "type": "Identifier",
            "start": 493,
            "end": 499,
            "name": "String"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 500,
              "end": 513,
              "callee": {
                "type": "Identifier",
                "start": 504,
                "end": 510,
                "name": "Number"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 511,
                  "end": 512,
                  "value": 0,
                  "raw": "0",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 519,
          "end": 522,
          "value": "0",
          "raw": "\"0\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 524,
        "end": 626,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 528,
            "end": 624,
            "argument": {
              "type": "NewExpression",
              "start": 534,
              "end": 623,
              "callee": {
                "type": "Identifier",
                "start": 538,
                "end": 550,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 551,
                  "end": 622,
                  "left": {
                    "type": "Literal",
                    "start": 551,
                    "end": 596,
                    "value": "#2: String(new Number(0)) === \"0\". Actual: ",
                    "raw": "'#2: String(new Number(0)) === \"0\". Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 599,
                    "end": 622,
                    "expression": {
                      "type": "CallExpression",
                      "start": 600,
                      "end": 621,
                      "callee": {
                        "type": "Identifier",
                        "start": 600,
                        "end": 606,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 607,
                          "end": 620,
                          "callee": {
                            "type": "Identifier",
                            "start": 611,
                            "end": 617,
                            "name": "Number"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 618,
                              "end": 619,
                              "value": 0,
                              "raw": "0",
                              "regex": null,
                              "bigint": null
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 639,
      "end": 814,
      "test": {
        "type": "BinaryExpression",
        "start": 643,
        "end": 683,
        "left": {
          "type": "CallExpression",
          "start": 643,
          "end": 673,
          "callee": {
            "type": "Identifier",
            "start": 643,
            "end": 649,
            "name": "String"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 650,
              "end": 672,
              "callee": {
                "type": "Identifier",
                "start": 654,
                "end": 660,
                "name": "Number"
              },
              "arguments": [
                {
                  "type": "MemberExpression",
                  "start": 661,
                  "end": 671,
                  "object": {
                    "type": "Identifier",
                    "start": 661,
                    "end": 667,
                    "name": "Number"
                  },
                  "property": {
                    "type": "Identifier",
                    "start": 668,
                    "end": 671,
                    "name": "NaN"
                  },
                  "computed": false,
                  "optional": false
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 678,
          "end": 683,
          "value": "NaN",
          "raw": "\"NaN\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 685,
        "end": 814,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 689,
            "end": 812,
            "argument": {
              "type": "NewExpression",
              "start": 695,
              "end": 811,
              "callee": {
                "type": "Identifier",
                "start": 699,
                "end": 711,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 712,
                  "end": 810,
                  "left": {
                    "type": "Literal",
                    "start": 712,
                    "end": 775,
                    "value": "#3: String(new Number(Number.NaN)) === Not-a-Number. Actual: ",
                    "raw": "'#3: String(new Number(Number.NaN)) === Not-a-Number. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 778,
                    "end": 810,
                    "expression": {
                      "type": "CallExpression",
                      "start": 779,
                      "end": 809,
                      "callee": {
                        "type": "Identifier",
                        "start": 779,
                        "end": 785,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 786,
                          "end": 808,
                          "callee": {
                            "type": "Identifier",
                            "start": 790,
                            "end": 796,
                            "name": "Number"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "start": 797,
                              "end": 807,
                              "object": {
                                "type": "Identifier",
                                "start": 797,
                                "end": 803,
                                "name": "Number"
                              },
                              "property": {
                                "type": "Identifier",
                                "start": 804,
                                "end": 807,
                                "name": "NaN"
                              },
                              "computed": false,
                              "optional": false
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 827,
      "end": 973,
      "test": {
        "type": "BinaryExpression",
        "start": 831,
        "end": 863,
        "left": {
          "type": "CallExpression",
          "start": 831,
          "end": 855,
          "callee": {
            "type": "Identifier",
            "start": 831,
            "end": 837,
            "name": "String"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 838,
              "end": 854,
              "callee": {
                "type": "Identifier",
                "start": 842,
                "end": 848,
                "name": "Number"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 849,
                  "end": 853,
                  "value": null,
                  "raw": "null",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 860,
          "end": 863,
          "value": "0",
          "raw": "\"0\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 865,
        "end": 973,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 869,
            "end": 971,
            "argument": {
              "type": "NewExpression",
              "start": 875,
              "end": 970,
              "callee": {
                "type": "Identifier",
                "start": 879,
                "end": 891,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 892,
                  "end": 969,
                  "left": {
                    "type": "Literal",
                    "start": 892,
                    "end": 940,
                    "value": "#4: String(new Number(null)) === \"0\". Actual: ",
                    "raw": "'#4: String(new Number(null)) === \"0\". Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 943,
                    "end": 969,
                    "expression": {
                      "type": "CallExpression",
                      "start": 944,
                      "end": 968,
                      "callee": {
                        "type": "Identifier",
                        "start": 944,
                        "end": 950,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 951,
                          "end": 967,
                          "callee": {
                            "type": "Identifier",
                            "start": 955,
                            "end": 961,
                            "name": "Number"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 962,
                              "end": 966,
                              "value": null,
                              "raw": "null",
                              "regex": null,
                              "bigint": null
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 986,
      "end": 1149,
      "test": {
        "type": "BinaryExpression",
        "start": 990,
        "end": 1026,
        "left": {
          "type": "CallExpression",
          "start": 990,
          "end": 1016,
          "callee": {
            "type": "Identifier",
            "start": 990,
            "end": 996,
            "name": "String"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 997,
              "end": 1015,
              "callee": {
                "type": "Identifier",
                "start": 1001,
                "end": 1007,
                "name": "Number"
              },
              "arguments": [
                {
                  "type": "UnaryExpression",
                  "start": 1008,
                  "end": 1014,
                  "operator": "void",
                  "prefix": true,
                  "argument": {
                    "type": "Literal",
                    "start": 1013,
                    "end": 1014,
                    "value": 0,
                    "raw": "0",
                    "regex": null,
                    "bigint": null
                  }
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1021,
          "end": 1026,
          "value": "NaN",
          "raw": "\"NaN\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1028,
        "end": 1149,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1032,
            "end": 1147,
            "argument": {
              "type": "NewExpression",
              "start": 1038,
              "end": 1146,
              "callee": {
                "type": "Identifier",
                "start": 1042,
                "end": 1054,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1055,
                  "end": 1145,
                  "left": {
                    "type": "Literal",
                    "start": 1055,
                    "end": 1114,
                    "value": "#5: String(new Number(void 0)) === Not-a-Number. Actual: ",
                    "raw": "'#5: String(new Number(void 0)) === Not-a-Number. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1117,
                    "end": 1145,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1118,
                      "end": 1144,
                      "callee": {
                        "type": "Identifier",
                        "start": 1118,
                        "end": 1124,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 1125,
                          "end": 1143,
                          "callee": {
                            "type": "Identifier",
                            "start": 1129,
                            "end": 1135,
                            "name": "Number"
                          },
                          "arguments": [
                            {
                              "type": "UnaryExpression",
                              "start": 1136,
                              "end": 1142,
                              "operator": "void",
                              "prefix": true,
                              "argument": {
                                "type": "Literal",
                                "start": 1141,
                                "end": 1142,
                                "value": 0,
                                "raw": "0",
                                "regex": null,
                                "bigint": null
                              }
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1162,
      "end": 1308,
      "test": {
        "type": "BinaryExpression",
        "start": 1166,
        "end": 1198,
        "left": {
          "type": "CallExpression",
          "start": 1166,
          "end": 1190,
          "callee": {
            "type": "Identifier",
            "start": 1166,
            "end": 1172,
            "name": "String"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 1173,
              "end": 1189,
              "callee": {
                "type": "Identifier",
                "start": 1177,
                "end": 1183,
                "name": "Number"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 1184,
                  "end": 1188,
                  "value": true,
                  "raw": "true",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1195,
          "end": 1198,
          "value": "1",
          "raw": "\"1\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1200,
        "end": 1308,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1204,
            "end": 1306,
            "argument": {
              "type": "NewExpression",
              "start": 1210,
              "end": 1305,
              "callee": {
                "type": "Identifier",
                "start": 1214,
                "end": 1226,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1227,
                  "end": 1304,
                  "left": {
                    "type": "Literal",
                    "start": 1227,
                    "end": 1275,
                    "value": "#6: String(new Number(true)) === \"1\". Actual: ",
                    "raw": "'#6: String(new Number(true)) === \"1\". Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1278,
                    "end": 1304,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1279,
                      "end": 1303,
                      "callee": {
                        "type": "Identifier",
                        "start": 1279,
                        "end": 1285,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 1286,
                          "end": 1302,
                          "callee": {
                            "type": "Identifier",
                            "start": 1290,
                            "end": 1296,
                            "name": "Number"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 1297,
                              "end": 1301,
                              "value": true,
                              "raw": "true",
                              "regex": null,
                              "bigint": null
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1321,
      "end": 1470,
      "test": {
        "type": "BinaryExpression",
        "start": 1325,
        "end": 1358,
        "left": {
          "type": "CallExpression",
          "start": 1325,
          "end": 1350,
          "callee": {
            "type": "Identifier",
            "start": 1325,
            "end": 1331,
            "name": "String"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 1332,
              "end": 1349,
              "callee": {
                "type": "Identifier",
                "start": 1336,
                "end": 1342,
                "name": "Number"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 1343,
                  "end": 1348,
                  "value": false,
                  "raw": "false",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1355,
          "end": 1358,
          "value": "0",
          "raw": "\"0\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1360,
        "end": 1470,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1364,
            "end": 1468,
            "argument": {
              "type": "NewExpression",
              "start": 1370,
              "end": 1467,
              "callee": {
                "type": "Identifier",
                "start": 1374,
                "end": 1386,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1387,
                  "end": 1466,
                  "left": {
                    "type": "Literal",
                    "start": 1387,
                    "end": 1436,
                    "value": "#7: String(new Number(false)) === \"0\". Actual: ",
                    "raw": "'#7: String(new Number(false)) === \"0\". Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1439,
                    "end": 1466,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1440,
                      "end": 1465,
                      "callee": {
                        "type": "Identifier",
                        "start": 1440,
                        "end": 1446,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 1447,
                          "end": 1464,
                          "callee": {
                            "type": "Identifier",
                            "start": 1451,
                            "end": 1457,
                            "name": "Number"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 1458,
                              "end": 1463,
                              "value": false,
                              "raw": "false",
                              "regex": null,
                              "bigint": null
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1483,
      "end": 1638,
      "test": {
        "type": "BinaryExpression",
        "start": 1487,
        "end": 1523,
        "left": {
          "type": "CallExpression",
          "start": 1487,
          "end": 1512,
          "callee": {
            "type": "Identifier",
            "start": 1487,
            "end": 1493,
            "name": "String"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 1494,
              "end": 1511,
              "callee": {
                "type": "Identifier",
                "start": 1498,
                "end": 1505,
                "name": "Boolean"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 1506,
                  "end": 1510,
                  "value": true,
                  "raw": "true",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1517,
          "end": 1523,
          "value": "true",
          "raw": "\"true\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1525,
        "end": 1638,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1529,
            "end": 1636,
            "argument": {
              "type": "NewExpression",
              "start": 1535,
              "end": 1635,
              "callee": {
                "type": "Identifier",
                "start": 1539,
                "end": 1551,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1552,
                  "end": 1634,
                  "left": {
                    "type": "Literal",
                    "start": 1552,
                    "end": 1604,
                    "value": "#8: String(new Boolean(true)) === \"true\". Actual: ",
                    "raw": "'#8: String(new Boolean(true)) === \"true\". Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1607,
                    "end": 1634,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1608,
                      "end": 1633,
                      "callee": {
                        "type": "Identifier",
                        "start": 1608,
                        "end": 1614,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 1615,
                          "end": 1632,
                          "callee": {
                            "type": "Identifier",
                            "start": 1619,
                            "end": 1626,
                            "name": "Boolean"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 1627,
                              "end": 1631,
                              "value": true,
                              "raw": "true",
                              "regex": null,
                              "bigint": null
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1651,
      "end": 1811,
      "test": {
        "type": "BinaryExpression",
        "start": 1655,
        "end": 1693,
        "left": {
          "type": "CallExpression",
          "start": 1655,
          "end": 1681,
          "callee": {
            "type": "Identifier",
            "start": 1655,
            "end": 1661,
            "name": "String"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 1662,
              "end": 1680,
              "callee": {
                "type": "Identifier",
                "start": 1666,
                "end": 1673,
                "name": "Boolean"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 1674,
                  "end": 1679,
                  "value": false,
                  "raw": "false",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1686,
          "end": 1693,
          "value": "false",
          "raw": "\"false\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1695,
        "end": 1811,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1699,
            "end": 1809,
            "argument": {
              "type": "NewExpression",
              "start": 1705,
              "end": 1808,
              "callee": {
                "type": "Identifier",
                "start": 1709,
                "end": 1721,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1722,
                  "end": 1807,
                  "left": {
                    "type": "Literal",
                    "start": 1722,
                    "end": 1776,
                    "value": "#9: Number(new Boolean(false)) === \"false\". Actual: ",
                    "raw": "'#9: Number(new Boolean(false)) === \"false\". Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1779,
                    "end": 1807,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1780,
                      "end": 1806,
                      "callee": {
                        "type": "Identifier",
                        "start": 1780,
                        "end": 1786,
                        "name": "Number"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 1787,
                          "end": 1805,
                          "callee": {
                            "type": "Identifier",
                            "start": 1791,
                            "end": 1798,
                            "name": "Boolean"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 1799,
                              "end": 1804,
                              "value": false,
                              "raw": "false",
                              "regex": null,
                              "bigint": null
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1825,
      "end": 2018,
      "test": {
        "type": "BinaryExpression",
        "start": 1829,
        "end": 1881,
        "left": {
          "type": "CallExpression",
          "start": 1829,
          "end": 1863,
          "callee": {
            "type": "Identifier",
            "start": 1829,
            "end": 1835,
            "name": "String"
          },
          "arguments": [
            {
              "type": "NewExpression",
              "start": 1836,
              "end": 1862,
              "callee": {
                "type": "Identifier",
                "start": 1840,
                "end": 1845,
                "name": "Array"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 1846,
                  "end": 1847,
                  "value": 2,
                  "raw": "2",
                  "regex": null,
                  "bigint": null
                },
                {
                  "type": "Literal",
                  "start": 1849,
                  "end": 1850,
                  "value": 4,
                  "raw": "4",
                  "regex": null,
                  "bigint": null
                },
                {
                  "type": "Literal",
                  "start": 1852,
                  "end": 1853,
                  "value": 8,
                  "raw": "8",
                  "regex": null,
                  "bigint": null
                },
                {
                  "type": "Literal",
                  "start": 1855,
                  "end": 1857,
                  "value": 16,
                  "raw": "16",
                  "regex": null,
                  "bigint": null
                },
                {
                  "type": "Literal",
                  "start": 1859,
                  "end": 1861,
                  "value": 32,
                  "raw": "32",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1868,
          "end": 1881,
          "value": "2,4,8,16,32",
          "raw": "\"2,4,8,16,32\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1883,
        "end": 2018,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1887,
            "end": 2016,
            "argument": {
              "type": "NewExpression",
              "start": 1893,
              "end": 2015,
              "callee": {
                "type": "Identifier",
                "start": 1897,
                "end": 1909,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1910,
                  "end": 2014,
                  "left": {
                    "type": "Literal",
                    "start": 1910,
                    "end": 1975,
                    "value": "#10: String(new Array(2,4,8,16,32)) === \"2,4,8,16,32\". Actual: ",
                    "raw": "'#10: String(new Array(2,4,8,16,32)) === \"2,4,8,16,32\". Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1978,
                    "end": 2014,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1979,
                      "end": 2013,
                      "callee": {
                        "type": "Identifier",
                        "start": 1979,
                        "end": 1985,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "NewExpression",
                          "start": 1986,
                          "end": 2012,
                          "callee": {
                            "type": "Identifier",
                            "start": 1990,
                            "end": 1995,
                            "name": "Array"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 1996,
                              "end": 1997,
                              "value": 2,
                              "raw": "2",
                              "regex": null,
                              "bigint": null
                            },
                            {
                              "type": "Literal",
                              "start": 1999,
                              "end": 2000,
                              "value": 4,
                              "raw": "4",
                              "regex": null,
                              "bigint": null
                            },
                            {
                              "type": "Literal",
                              "start": 2002,
                              "end": 2003,
                              "value": 8,
                              "raw": "8",
                              "regex": null,
                              "bigint": null
                            },
                            {
                              "type": "Literal",
                              "start": 2005,
                              "end": 2007,
                              "value": 16,
                              "raw": "16",
                              "regex": null,
                              "bigint": null
                            },
                            {
                              "type": "Literal",
                              "start": 2009,
                              "end": 2011,
                              "value": 32,
                              "raw": "32",
                              "regex": null,
                              "bigint": null
                            }
                          ]
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "VariableDeclaration",
      "start": 2032,
      "end": 2202,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 2036,
          "end": 2201,
          "id": {
            "type": "Identifier",
            "start": 2036,
            "end": 2042,
            "name": "myobj1"
          },
          "init": {
            "type": "ObjectExpression",
            "start": 2045,
            "end": 2201,
            "properties": [
              {
                "type": "Property",
                "start": 2049,
                "end": 2093,
                "method": false,
                "shorthand": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2049,
                  "end": 2057,
                  "name": "toNumber"
                },
                "value": {
                  "type": "FunctionExpression",
                  "start": 2059,
                  "end": 2093,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 2070,
                    "end": 2093,
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "start": 2076,
                        "end": 2089,
                        "argument": {
                          "type": "Literal",
                          "start": 2083,
                          "end": 2088,
                          "value": 12345,
                          "raw": "12345",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ]
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "start": 2097,
                "end": 2141,
                "method": false,
                "shorthand": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2097,
                  "end": 2105,
                  "name": "toString"
                },
                "value": {
                  "type": "FunctionExpression",
                  "start": 2107,
                  "end": 2141,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 2118,
                    "end": 2141,
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "start": 2124,
                        "end": 2137,
                        "argument": {
                          "type": "Literal",
                          "start": 2131,
                          "end": 2136,
                          "value": 67890,
                          "raw": "67890",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ]
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "start": 2145,
                "end": 2199,
                "method": false,
                "shorthand": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2145,
                  "end": 2152,
                  "name": "valueOf"
                },
                "value": {
                  "type": "FunctionExpression",
                  "start": 2154,
                  "end": 2199,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 2165,
                    "end": 2199,
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "start": 2171,
                        "end": 2195,
                        "argument": {
                          "type": "Literal",
                          "start": 2178,
                          "end": 2194,
                          "value": "[object MyObj]",
                          "raw": "\"[object MyObj]\"",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ]
                  }
                },
                "kind": "init"
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "IfStatement",
      "start": 2204,
      "end": 2322,
      "test": {
        "type": "BinaryExpression",
        "start": 2208,
        "end": 2234,
        "left": {
          "type": "CallExpression",
          "start": 2208,
          "end": 2222,
          "callee": {
            "type": "Identifier",
            "start": 2208,
            "end": 2214,
            "name": "String"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 2215,
              "end": 2221,
              "name": "myobj1"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 2227,
          "end": 2234,
          "value": "67890",
          "raw": "\"67890\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 2236,
        "end": 2322,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 2240,
            "end": 2320,
            "argument": {
              "type": "NewExpression",
              "start": 2246,
              "end": 2319,
              "callee": {
                "type": "Identifier",
                "start": 2250,
                "end": 2262,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 2263,
                  "end": 2318,
                  "value": "#11: String(myobj) calls ToPrimitive with hint String",
                  "raw": "\"#11: String(myobj) calls ToPrimitive with hint String\"",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "VariableDeclaration",
      "start": 2336,
      "end": 2502,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 2340,
          "end": 2501,
          "id": {
            "type": "Identifier",
            "start": 2340,
            "end": 2346,
            "name": "myobj2"
          },
          "init": {
            "type": "ObjectExpression",
            "start": 2349,
            "end": 2501,
            "properties": [
              {
                "type": "Property",
                "start": 2353,
                "end": 2397,
                "method": false,
                "shorthand": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2353,
                  "end": 2361,
                  "name": "toNumber"
                },
                "value": {
                  "type": "FunctionExpression",
                  "start": 2363,
                  "end": 2397,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 2374,
                    "end": 2397,
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "start": 2380,
                        "end": 2393,
                        "argument": {
                          "type": "Literal",
                          "start": 2387,
                          "end": 2392,
                          "value": 12345,
                          "raw": "12345",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ]
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "start": 2401,
                "end": 2441,
                "method": false,
                "shorthand": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2401,
                  "end": 2409,
                  "name": "toString"
                },
                "value": {
                  "type": "FunctionExpression",
                  "start": 2411,
                  "end": 2441,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 2422,
                    "end": 2441,
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "start": 2428,
                        "end": 2437,
                        "argument": {
                          "type": "ObjectExpression",
                          "start": 2435,
                          "end": 2437,
                          "properties": []
                        }
                      }
                    ]
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "start": 2445,
                "end": 2499,
                "method": false,
                "shorthand": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2445,
                  "end": 2452,
                  "name": "valueOf"
                },
                "value": {
                  "type": "FunctionExpression",
                  "start": 2454,
                  "end": 2499,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 2465,
                    "end": 2499,
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "start": 2471,
                        "end": 2495,
                        "argument": {
                          "type": "Literal",
                          "start": 2478,
                          "end": 2494,
                          "value": "[object MyObj]",
                          "raw": "\"[object MyObj]\"",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ]
                  }
                },
                "kind": "init"
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "IfStatement",
      "start": 2504,
      "end": 2631,
      "test": {
        "type": "BinaryExpression",
        "start": 2508,
        "end": 2543,
        "left": {
          "type": "CallExpression",
          "start": 2508,
          "end": 2522,
          "callee": {
            "type": "Identifier",
            "start": 2508,
            "end": 2514,
            "name": "String"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 2515,
              "end": 2521,
              "name": "myobj2"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 2527,
          "end": 2543,
          "value": "[object MyObj]",
          "raw": "\"[object MyObj]\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 2545,
        "end": 2631,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 2549,
            "end": 2629,
            "argument": {
              "type": "NewExpression",
              "start": 2555,
              "end": 2628,
              "callee": {
                "type": "Identifier",
                "start": 2559,
                "end": 2571,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 2572,
                  "end": 2627,
                  "value": "#12: String(myobj) calls ToPrimitive with hint String",
                  "raw": "\"#12: String(myobj) calls ToPrimitive with hint String\"",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "VariableDeclaration",
      "start": 2645,
      "end": 2767,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 2649,
          "end": 2766,
          "id": {
            "type": "Identifier",
            "start": 2649,
            "end": 2655,
            "name": "myobj3"
          },
          "init": {
            "type": "ObjectExpression",
            "start": 2658,
            "end": 2766,
            "properties": [
              {
                "type": "Property",
                "start": 2662,
                "end": 2706,
                "method": false,
                "shorthand": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2662,
                  "end": 2670,
                  "name": "toNumber"
                },
                "value": {
                  "type": "FunctionExpression",
                  "start": 2672,
                  "end": 2706,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 2683,
                    "end": 2706,
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "start": 2689,
                        "end": 2702,
                        "argument": {
                          "type": "Literal",
                          "start": 2696,
                          "end": 2701,
                          "value": 12345,
                          "raw": "12345",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ]
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "start": 2710,
                "end": 2764,
                "method": false,
                "shorthand": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2710,
                  "end": 2717,
                  "name": "valueOf"
                },
                "value": {
                  "type": "FunctionExpression",
                  "start": 2719,
                  "end": 2764,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 2730,
                    "end": 2764,
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "start": 2736,
                        "end": 2760,
                        "argument": {
                          "type": "Literal",
                          "start": 2743,
                          "end": 2759,
                          "value": "[object MyObj]",
                          "raw": "\"[object MyObj]\"",
                          "regex": null,
                          "bigint": null
                        }
                      }
                    ]
                  }
                },
                "kind": "init"
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "IfStatement",
      "start": 2769,
      "end": 2897,
      "test": {
        "type": "BinaryExpression",
        "start": 2773,
        "end": 2809,
        "left": {
          "type": "CallExpression",
          "start": 2773,
          "end": 2787,
          "callee": {
            "type": "Identifier",
            "start": 2773,
            "end": 2779,
            "name": "String"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 2780,
              "end": 2786,
              "name": "myobj3"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 2792,
          "end": 2809,
          "value": "[object Object]",
          "raw": "\"[object Object]\"",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 2811,
        "end": 2897,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 2815,
            "end": 2895,
            "argument": {
              "type": "NewExpression",
              "start": 2821,
              "end": 2894,
              "callee": {
                "type": "Identifier",
                "start": 2825,
                "end": 2837,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 2838,
                  "end": 2893,
                  "value": "#13: String(myobj) calls ToPrimitive with hint String",
                  "raw": "\"#13: String(myobj) calls ToPrimitive with hint String\"",
                  "regex": null,
                  "bigint": null
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}