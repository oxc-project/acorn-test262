{
  "type": "Program",
  "start": 0,
  "end": 1454,
  "body": [
    {
      "type": "IfStatement",
      "start": 377,
      "end": 520,
      "test": {
        "type": "BinaryExpression",
        "start": 381,
        "end": 412,
        "left": {
          "type": "CallExpression",
          "start": 381,
          "end": 404,
          "callee": {
            "type": "Identifier",
            "start": 381,
            "end": 391,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 392,
              "end": 403,
              "value": "-11string",
              "raw": "\"-11string\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "UnaryExpression",
          "start": 409,
          "end": 412,
          "operator": "-",
          "prefix": true,
          "argument": {
            "type": "Literal",
            "start": 410,
            "end": 412,
            "value": 11,
            "raw": "11",
            "regex": null,
            "bigint": null
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 414,
        "end": 520,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 418,
            "end": 518,
            "argument": {
              "type": "NewExpression",
              "start": 424,
              "end": 517,
              "callee": {
                "type": "Identifier",
                "start": 428,
                "end": 440,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 441,
                  "end": 516,
                  "left": {
                    "type": "Literal",
                    "start": 441,
                    "end": 488,
                    "value": "#1: parseFloat(\"-11string\") === -11. Actual: ",
                    "raw": "'#1: parseFloat(\"-11string\") === -11. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 491,
                    "end": 516,
                    "expression": {
                      "type": "CallExpression",
                      "start": 492,
                      "end": 515,
                      "callee": {
                        "type": "Identifier",
                        "start": 492,
                        "end": 502,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 503,
                          "end": 514,
                          "value": "-11string",
                          "raw": "\"-11string\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 532,
      "end": 668,
      "test": {
        "type": "BinaryExpression",
        "start": 536,
        "end": 564,
        "left": {
          "type": "CallExpression",
          "start": 536,
          "end": 558,
          "callee": {
            "type": "Identifier",
            "start": 536,
            "end": 546,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 547,
              "end": 557,
              "value": "01string",
              "raw": "\"01string\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 563,
          "end": 564,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 566,
        "end": 668,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 570,
            "end": 666,
            "argument": {
              "type": "NewExpression",
              "start": 576,
              "end": 665,
              "callee": {
                "type": "Identifier",
                "start": 580,
                "end": 592,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 593,
                  "end": 664,
                  "left": {
                    "type": "Literal",
                    "start": 593,
                    "end": 637,
                    "value": "#2: parseFloat(\"01string\") === 1. Actual: ",
                    "raw": "'#2: parseFloat(\"01string\") === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 640,
                    "end": 664,
                    "expression": {
                      "type": "CallExpression",
                      "start": 641,
                      "end": 663,
                      "callee": {
                        "type": "Identifier",
                        "start": 641,
                        "end": 651,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 652,
                          "end": 662,
                          "value": "01string",
                          "raw": "\"01string\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 680,
      "end": 834,
      "test": {
        "type": "BinaryExpression",
        "start": 684,
        "end": 719,
        "left": {
          "type": "CallExpression",
          "start": 684,
          "end": 710,
          "callee": {
            "type": "Identifier",
            "start": 684,
            "end": 694,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 695,
              "end": 709,
              "value": "-11e-1string",
              "raw": "\"-11e-1string\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "UnaryExpression",
          "start": 715,
          "end": 719,
          "operator": "-",
          "prefix": true,
          "argument": {
            "type": "Literal",
            "start": 716,
            "end": 719,
            "value": 1.1,
            "raw": "1.1",
            "regex": null,
            "bigint": null
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 721,
        "end": 834,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 725,
            "end": 832,
            "argument": {
              "type": "NewExpression",
              "start": 731,
              "end": 831,
              "callee": {
                "type": "Identifier",
                "start": 735,
                "end": 747,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 748,
                  "end": 830,
                  "left": {
                    "type": "Literal",
                    "start": 748,
                    "end": 799,
                    "value": "#3: parseFloat(\"-11e-1string\") === -1.1. Actual: ",
                    "raw": "'#3: parseFloat(\"-11e-1string\") === -1.1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 802,
                    "end": 830,
                    "expression": {
                      "type": "CallExpression",
                      "start": 803,
                      "end": 829,
                      "callee": {
                        "type": "Identifier",
                        "start": 803,
                        "end": 813,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 814,
                          "end": 828,
                          "value": "-11e-1string",
                          "raw": "\"-11e-1string\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 846,
      "end": 990,
      "test": {
        "type": "BinaryExpression",
        "start": 850,
        "end": 881,
        "left": {
          "type": "CallExpression",
          "start": 850,
          "end": 874,
          "callee": {
            "type": "Identifier",
            "start": 850,
            "end": 860,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 861,
              "end": 873,
              "value": "01e1string",
              "raw": "\"01e1string\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 879,
          "end": 881,
          "value": 10,
          "raw": "10",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 883,
        "end": 990,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 887,
            "end": 988,
            "argument": {
              "type": "NewExpression",
              "start": 893,
              "end": 987,
              "callee": {
                "type": "Identifier",
                "start": 897,
                "end": 909,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 910,
                  "end": 986,
                  "left": {
                    "type": "Literal",
                    "start": 910,
                    "end": 957,
                    "value": "#4: parseFloat(\"01e1string\") === 10. Actual: ",
                    "raw": "'#4: parseFloat(\"01e1string\") === 10. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 960,
                    "end": 986,
                    "expression": {
                      "type": "CallExpression",
                      "start": 961,
                      "end": 985,
                      "callee": {
                        "type": "Identifier",
                        "start": 961,
                        "end": 971,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 972,
                          "end": 984,
                          "value": "01e1string",
                          "raw": "\"01e1string\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1002,
      "end": 1141,
      "test": {
        "type": "BinaryExpression",
        "start": 1006,
        "end": 1035,
        "left": {
          "type": "CallExpression",
          "start": 1006,
          "end": 1029,
          "callee": {
            "type": "Identifier",
            "start": 1006,
            "end": 1016,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1017,
              "end": 1028,
              "value": "001string",
              "raw": "\"001string\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1034,
          "end": 1035,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1037,
        "end": 1141,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1041,
            "end": 1139,
            "argument": {
              "type": "NewExpression",
              "start": 1047,
              "end": 1138,
              "callee": {
                "type": "Identifier",
                "start": 1051,
                "end": 1063,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1064,
                  "end": 1137,
                  "left": {
                    "type": "Literal",
                    "start": 1064,
                    "end": 1109,
                    "value": "#5: parseFloat(\"001string\") === 1. Actual: ",
                    "raw": "'#5: parseFloat(\"001string\") === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1112,
                    "end": 1137,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1113,
                      "end": 1136,
                      "callee": {
                        "type": "Identifier",
                        "start": 1113,
                        "end": 1123,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1124,
                          "end": 1135,
                          "value": "001string",
                          "raw": "\"001string\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1153,
      "end": 1300,
      "test": {
        "type": "BinaryExpression",
        "start": 1157,
        "end": 1189,
        "left": {
          "type": "CallExpression",
          "start": 1157,
          "end": 1182,
          "callee": {
            "type": "Identifier",
            "start": 1157,
            "end": 1167,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1168,
              "end": 1181,
              "value": "1e001string",
              "raw": "\"1e001string\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1187,
          "end": 1189,
          "value": 10,
          "raw": "10",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1191,
        "end": 1300,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1195,
            "end": 1298,
            "argument": {
              "type": "NewExpression",
              "start": 1201,
              "end": 1297,
              "callee": {
                "type": "Identifier",
                "start": 1205,
                "end": 1217,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1218,
                  "end": 1296,
                  "left": {
                    "type": "Literal",
                    "start": 1218,
                    "end": 1266,
                    "value": "#6: parseFloat(\"1e001string\") === 10. Actual: ",
                    "raw": "'#6: parseFloat(\"1e001string\") === 10. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1269,
                    "end": 1296,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1270,
                      "end": 1295,
                      "callee": {
                        "type": "Identifier",
                        "start": 1270,
                        "end": 1280,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1281,
                          "end": 1294,
                          "value": "1e001string",
                          "raw": "\"1e001string\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1312,
      "end": 1453,
      "test": {
        "type": "BinaryExpression",
        "start": 1316,
        "end": 1346,
        "left": {
          "type": "CallExpression",
          "start": 1316,
          "end": 1339,
          "callee": {
            "type": "Identifier",
            "start": 1316,
            "end": 1326,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1327,
              "end": 1338,
              "value": "010string",
              "raw": "\"010string\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1344,
          "end": 1346,
          "value": 10,
          "raw": "10",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1348,
        "end": 1453,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1352,
            "end": 1451,
            "argument": {
              "type": "NewExpression",
              "start": 1358,
              "end": 1450,
              "callee": {
                "type": "Identifier",
                "start": 1362,
                "end": 1374,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1375,
                  "end": 1449,
                  "left": {
                    "type": "Literal",
                    "start": 1375,
                    "end": 1421,
                    "value": "#7: parseFloat(\"010string\") === 10. Actual: ",
                    "raw": "'#7: parseFloat(\"010string\") === 10. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1424,
                    "end": 1449,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1425,
                      "end": 1448,
                      "callee": {
                        "type": "Identifier",
                        "start": 1425,
                        "end": 1435,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1436,
                          "end": 1447,
                          "value": "010string",
                          "raw": "\"010string\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}