{
  "type": "Program",
  "start": 0,
  "end": 1242,
  "body": [
    {
      "type": "IfStatement",
      "start": 291,
      "end": 416,
      "test": {
        "type": "BinaryExpression",
        "start": 295,
        "end": 320,
        "left": {
          "type": "CallExpression",
          "start": 295,
          "end": 312,
          "callee": {
            "type": "Identifier",
            "start": 295,
            "end": 305,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 306,
              "end": 311,
              "value": "-11",
              "raw": "\"-11\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "UnaryExpression",
          "start": 317,
          "end": 320,
          "operator": "-",
          "prefix": true,
          "argument": {
            "type": "Literal",
            "start": 318,
            "end": 320,
            "value": 11,
            "raw": "11",
            "regex": null,
            "bigint": null
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 322,
        "end": 416,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 326,
            "end": 414,
            "argument": {
              "type": "NewExpression",
              "start": 332,
              "end": 413,
              "callee": {
                "type": "Identifier",
                "start": 336,
                "end": 348,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 349,
                  "end": 412,
                  "left": {
                    "type": "Literal",
                    "start": 349,
                    "end": 390,
                    "value": "#1: parseFloat(\"-11\") === -11. Actual: ",
                    "raw": "'#1: parseFloat(\"-11\") === -11. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 393,
                    "end": 412,
                    "expression": {
                      "type": "CallExpression",
                      "start": 394,
                      "end": 411,
                      "callee": {
                        "type": "Identifier",
                        "start": 394,
                        "end": 404,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 405,
                          "end": 410,
                          "value": "-11",
                          "raw": "\"-11\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 428,
      "end": 546,
      "test": {
        "type": "BinaryExpression",
        "start": 432,
        "end": 454,
        "left": {
          "type": "CallExpression",
          "start": 432,
          "end": 448,
          "callee": {
            "type": "Identifier",
            "start": 432,
            "end": 442,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 443,
              "end": 447,
              "value": "01",
              "raw": "\"01\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 453,
          "end": 454,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 456,
        "end": 546,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 460,
            "end": 544,
            "argument": {
              "type": "NewExpression",
              "start": 466,
              "end": 543,
              "callee": {
                "type": "Identifier",
                "start": 470,
                "end": 482,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 483,
                  "end": 542,
                  "left": {
                    "type": "Literal",
                    "start": 483,
                    "end": 521,
                    "value": "#2: parseFloat(\"01\") === 1. Actual: ",
                    "raw": "'#2: parseFloat(\"01\") === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 524,
                    "end": 542,
                    "expression": {
                      "type": "CallExpression",
                      "start": 525,
                      "end": 541,
                      "callee": {
                        "type": "Identifier",
                        "start": 525,
                        "end": 535,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 536,
                          "end": 540,
                          "value": "01",
                          "raw": "\"01\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 558,
      "end": 694,
      "test": {
        "type": "BinaryExpression",
        "start": 562,
        "end": 591,
        "left": {
          "type": "CallExpression",
          "start": 562,
          "end": 582,
          "callee": {
            "type": "Identifier",
            "start": 562,
            "end": 572,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 573,
              "end": 581,
              "value": "-11e-1",
              "raw": "\"-11e-1\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "UnaryExpression",
          "start": 587,
          "end": 591,
          "operator": "-",
          "prefix": true,
          "argument": {
            "type": "Literal",
            "start": 588,
            "end": 591,
            "value": 1.1,
            "raw": "1.1",
            "regex": null,
            "bigint": null
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 593,
        "end": 694,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 597,
            "end": 692,
            "argument": {
              "type": "NewExpression",
              "start": 603,
              "end": 691,
              "callee": {
                "type": "Identifier",
                "start": 607,
                "end": 619,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 620,
                  "end": 690,
                  "left": {
                    "type": "Literal",
                    "start": 620,
                    "end": 665,
                    "value": "#3: parseFloat(\"-11e-1\") === -1.1. Actual: ",
                    "raw": "'#3: parseFloat(\"-11e-1\") === -1.1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 668,
                    "end": 690,
                    "expression": {
                      "type": "CallExpression",
                      "start": 669,
                      "end": 689,
                      "callee": {
                        "type": "Identifier",
                        "start": 669,
                        "end": 679,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 680,
                          "end": 688,
                          "value": "-11e-1",
                          "raw": "\"-11e-1\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 706,
      "end": 832,
      "test": {
        "type": "BinaryExpression",
        "start": 710,
        "end": 735,
        "left": {
          "type": "CallExpression",
          "start": 710,
          "end": 728,
          "callee": {
            "type": "Identifier",
            "start": 710,
            "end": 720,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 721,
              "end": 727,
              "value": "01e1",
              "raw": "\"01e1\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 733,
          "end": 735,
          "value": 10,
          "raw": "10",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 737,
        "end": 832,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 741,
            "end": 830,
            "argument": {
              "type": "NewExpression",
              "start": 747,
              "end": 829,
              "callee": {
                "type": "Identifier",
                "start": 751,
                "end": 763,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 764,
                  "end": 828,
                  "left": {
                    "type": "Literal",
                    "start": 764,
                    "end": 805,
                    "value": "#4: parseFloat(\"01e1\") === 10. Actual: ",
                    "raw": "'#4: parseFloat(\"01e1\") === 10. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 808,
                    "end": 828,
                    "expression": {
                      "type": "CallExpression",
                      "start": 809,
                      "end": 827,
                      "callee": {
                        "type": "Identifier",
                        "start": 809,
                        "end": 819,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 820,
                          "end": 826,
                          "value": "01e1",
                          "raw": "\"01e1\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 844,
      "end": 965,
      "test": {
        "type": "BinaryExpression",
        "start": 848,
        "end": 871,
        "left": {
          "type": "CallExpression",
          "start": 848,
          "end": 865,
          "callee": {
            "type": "Identifier",
            "start": 848,
            "end": 858,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 859,
              "end": 864,
              "value": "001",
              "raw": "\"001\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 870,
          "end": 871,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 873,
        "end": 965,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 877,
            "end": 963,
            "argument": {
              "type": "NewExpression",
              "start": 883,
              "end": 962,
              "callee": {
                "type": "Identifier",
                "start": 887,
                "end": 899,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 900,
                  "end": 961,
                  "left": {
                    "type": "Literal",
                    "start": 900,
                    "end": 939,
                    "value": "#5: parseFloat(\"001\") === 1. Actual: ",
                    "raw": "'#5: parseFloat(\"001\") === 1. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 942,
                    "end": 961,
                    "expression": {
                      "type": "CallExpression",
                      "start": 943,
                      "end": 960,
                      "callee": {
                        "type": "Identifier",
                        "start": 943,
                        "end": 953,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 954,
                          "end": 959,
                          "value": "001",
                          "raw": "\"001\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 977,
      "end": 1106,
      "test": {
        "type": "BinaryExpression",
        "start": 981,
        "end": 1007,
        "left": {
          "type": "CallExpression",
          "start": 981,
          "end": 1000,
          "callee": {
            "type": "Identifier",
            "start": 981,
            "end": 991,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 992,
              "end": 999,
              "value": "1e001",
              "raw": "\"1e001\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1005,
          "end": 1007,
          "value": 10,
          "raw": "10",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1009,
        "end": 1106,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1013,
            "end": 1104,
            "argument": {
              "type": "NewExpression",
              "start": 1019,
              "end": 1103,
              "callee": {
                "type": "Identifier",
                "start": 1023,
                "end": 1035,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1036,
                  "end": 1102,
                  "left": {
                    "type": "Literal",
                    "start": 1036,
                    "end": 1078,
                    "value": "#6: parseFloat(\"1e001\") === 10. Actual: ",
                    "raw": "'#6: parseFloat(\"1e001\") === 10. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1081,
                    "end": 1102,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1082,
                      "end": 1101,
                      "callee": {
                        "type": "Identifier",
                        "start": 1082,
                        "end": 1092,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1093,
                          "end": 1100,
                          "value": "1e001",
                          "raw": "\"1e001\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1118,
      "end": 1241,
      "test": {
        "type": "BinaryExpression",
        "start": 1122,
        "end": 1146,
        "left": {
          "type": "CallExpression",
          "start": 1122,
          "end": 1139,
          "callee": {
            "type": "Identifier",
            "start": 1122,
            "end": 1132,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1133,
              "end": 1138,
              "value": "010",
              "raw": "\"010\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1144,
          "end": 1146,
          "value": 10,
          "raw": "10",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1148,
        "end": 1241,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1152,
            "end": 1239,
            "argument": {
              "type": "NewExpression",
              "start": 1158,
              "end": 1238,
              "callee": {
                "type": "Identifier",
                "start": 1162,
                "end": 1174,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1175,
                  "end": 1237,
                  "left": {
                    "type": "Literal",
                    "start": 1175,
                    "end": 1215,
                    "value": "#7: parseFloat(\"010\") === 10. Actual: ",
                    "raw": "'#7: parseFloat(\"010\") === 10. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1218,
                    "end": 1237,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1219,
                      "end": 1236,
                      "callee": {
                        "type": "Identifier",
                        "start": 1219,
                        "end": 1229,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1230,
                          "end": 1235,
                          "value": "010",
                          "raw": "\"010\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}