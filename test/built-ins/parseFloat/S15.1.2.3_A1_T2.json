{
  "type": "Program",
  "start": 0,
  "end": 1205,
  "body": [
    {
      "type": "IfStatement",
      "start": 255,
      "end": 407,
      "test": {
        "type": "BinaryExpression",
        "start": 259,
        "end": 298,
        "left": {
          "type": "CallExpression",
          "start": 259,
          "end": 275,
          "callee": {
            "type": "Identifier",
            "start": 259,
            "end": 269,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "UnaryExpression",
              "start": 270,
              "end": 274,
              "operator": "-",
              "prefix": true,
              "argument": {
                "type": "Literal",
                "start": 271,
                "end": 274,
                "value": 1.1,
                "raw": "1.1"
              }
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "start": 280,
          "end": 298,
          "callee": {
            "type": "Identifier",
            "start": 280,
            "end": 290,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 291,
              "end": 297,
              "value": "-1.1",
              "raw": "\"-1.1\""
            }
          ],
          "optional": false
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 300,
        "end": 407,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 304,
            "end": 405,
            "argument": {
              "type": "NewExpression",
              "start": 310,
              "end": 404,
              "callee": {
                "type": "Identifier",
                "start": 314,
                "end": 326,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 327,
                  "end": 403,
                  "left": {
                    "type": "Literal",
                    "start": 327,
                    "end": 382,
                    "value": "#1: parseFloat(-1.1) === parseFloat(\"-1.1\"). Actual: ",
                    "raw": "'#1: parseFloat(-1.1) === parseFloat(\"-1.1\"). Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 385,
                    "end": 403,
                    "expression": {
                      "type": "CallExpression",
                      "start": 386,
                      "end": 402,
                      "callee": {
                        "type": "Identifier",
                        "start": 386,
                        "end": 396,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "UnaryExpression",
                          "start": 397,
                          "end": 401,
                          "operator": "-",
                          "prefix": true,
                          "argument": {
                            "type": "Literal",
                            "start": 398,
                            "end": 401,
                            "value": 1.1,
                            "raw": "1.1"
                          }
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 419,
      "end": 591,
      "test": {
        "type": "BinaryExpression",
        "start": 423,
        "end": 470,
        "left": {
          "type": "CallExpression",
          "start": 423,
          "end": 443,
          "callee": {
            "type": "Identifier",
            "start": 423,
            "end": 433,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Identifier",
              "start": 434,
              "end": 442,
              "name": "Infinity"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "start": 448,
          "end": 470,
          "callee": {
            "type": "Identifier",
            "start": 448,
            "end": 458,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 459,
              "end": 469,
              "value": "Infinity",
              "raw": "\"Infinity\""
            }
          ],
          "optional": false
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 472,
        "end": 591,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 476,
            "end": 589,
            "argument": {
              "type": "NewExpression",
              "start": 482,
              "end": 588,
              "callee": {
                "type": "Identifier",
                "start": 486,
                "end": 498,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 499,
                  "end": 587,
                  "left": {
                    "type": "Literal",
                    "start": 499,
                    "end": 562,
                    "value": "#2: parseFloat(Infinity) === parseFloat(\"Infinity\"). Actual: ",
                    "raw": "'#2: parseFloat(Infinity) === parseFloat(\"Infinity\"). Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 565,
                    "end": 587,
                    "expression": {
                      "type": "CallExpression",
                      "start": 566,
                      "end": 586,
                      "callee": {
                        "type": "Identifier",
                        "start": 566,
                        "end": 576,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "start": 577,
                          "end": 585,
                          "name": "Infinity"
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 603,
      "end": 750,
      "test": {
        "type": "BinaryExpression",
        "start": 607,
        "end": 640,
        "left": {
          "type": "CallExpression",
          "start": 607,
          "end": 630,
          "callee": {
            "type": "Identifier",
            "start": 607,
            "end": 613,
            "name": "String"
          },
          "arguments": [
            {
              "type": "CallExpression",
              "start": 614,
              "end": 629,
              "callee": {
                "type": "Identifier",
                "start": 614,
                "end": 624,
                "name": "parseFloat"
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "start": 625,
                  "end": 628,
                  "name": "NaN"
                }
              ],
              "optional": false
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 635,
          "end": 640,
          "value": "NaN",
          "raw": "\"NaN\""
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 642,
        "end": 750,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 646,
            "end": 748,
            "argument": {
              "type": "NewExpression",
              "start": 652,
              "end": 747,
              "callee": {
                "type": "Identifier",
                "start": 656,
                "end": 668,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 669,
                  "end": 746,
                  "left": {
                    "type": "Literal",
                    "start": 669,
                    "end": 718,
                    "value": "#3: String(parseFloat(NaN)) === \"NaN\". Actual: ",
                    "raw": "'#3: String(parseFloat(NaN)) === \"NaN\". Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 721,
                    "end": 746,
                    "expression": {
                      "type": "CallExpression",
                      "start": 722,
                      "end": 745,
                      "callee": {
                        "type": "Identifier",
                        "start": 722,
                        "end": 728,
                        "name": "String"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "start": 729,
                          "end": 744,
                          "callee": {
                            "type": "Identifier",
                            "start": 729,
                            "end": 739,
                            "name": "parseFloat"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "start": 740,
                              "end": 743,
                              "name": "NaN"
                            }
                          ],
                          "optional": false
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 762,
      "end": 924,
      "test": {
        "type": "BinaryExpression",
        "start": 766,
        "end": 809,
        "left": {
          "type": "CallExpression",
          "start": 766,
          "end": 784,
          "callee": {
            "type": "Identifier",
            "start": 766,
            "end": 776,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 777,
              "end": 783,
              "value": 1,
              "raw": ".01e+2"
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "CallExpression",
          "start": 789,
          "end": 809,
          "callee": {
            "type": "Identifier",
            "start": 789,
            "end": 799,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 800,
              "end": 808,
              "value": ".01e+2",
              "raw": "\".01e+2\""
            }
          ],
          "optional": false
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 811,
        "end": 924,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 815,
            "end": 922,
            "argument": {
              "type": "NewExpression",
              "start": 821,
              "end": 921,
              "callee": {
                "type": "Identifier",
                "start": 825,
                "end": 837,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 838,
                  "end": 920,
                  "left": {
                    "type": "Literal",
                    "start": 838,
                    "end": 897,
                    "value": "#4: parseFloat(.01e+2) === parseFloat(\".01e+2\"). Actual: ",
                    "raw": "'#4: parseFloat(.01e+2) === parseFloat(\".01e+2\"). Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 900,
                    "end": 920,
                    "expression": {
                      "type": "CallExpression",
                      "start": 901,
                      "end": 919,
                      "callee": {
                        "type": "Identifier",
                        "start": 901,
                        "end": 911,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 912,
                          "end": 918,
                          "value": 1,
                          "raw": ".01e+2"
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 936,
      "end": 1204,
      "test": {
        "type": "BinaryExpression",
        "start": 940,
        "end": 960,
        "left": {
          "type": "CallExpression",
          "start": 940,
          "end": 954,
          "callee": {
            "type": "Identifier",
            "start": 940,
            "end": 950,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "UnaryExpression",
              "start": 951,
              "end": 953,
              "operator": "-",
              "prefix": true,
              "argument": {
                "type": "Literal",
                "start": 952,
                "end": 953,
                "value": 0,
                "raw": "0"
              }
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 959,
          "end": 960,
          "value": 0,
          "raw": "0"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 962,
        "end": 1048,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 966,
            "end": 1046,
            "argument": {
              "type": "NewExpression",
              "start": 972,
              "end": 1045,
              "callee": {
                "type": "Identifier",
                "start": 976,
                "end": 988,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 989,
                  "end": 1044,
                  "left": {
                    "type": "Literal",
                    "start": 989,
                    "end": 1025,
                    "value": "#5: parseFloat(-0) === 0. Actual: ",
                    "raw": "'#5: parseFloat(-0) === 0. Actual: '"
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1028,
                    "end": 1044,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1029,
                      "end": 1043,
                      "callee": {
                        "type": "Identifier",
                        "start": 1029,
                        "end": 1039,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "UnaryExpression",
                          "start": 1040,
                          "end": 1042,
                          "operator": "-",
                          "prefix": true,
                          "argument": {
                            "type": "Literal",
                            "start": 1041,
                            "end": 1042,
                            "value": 0,
                            "raw": "0"
                          }
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": {
        "type": "BlockStatement",
        "start": 1054,
        "end": 1204,
        "body": [
          {
            "type": "IfStatement",
            "start": 1058,
            "end": 1202,
            "test": {
              "type": "BinaryExpression",
              "start": 1062,
              "end": 1109,
              "left": {
                "type": "BinaryExpression",
                "start": 1062,
                "end": 1080,
                "left": {
                  "type": "Literal",
                  "start": 1062,
                  "end": 1063,
                  "value": 1,
                  "raw": "1"
                },
                "operator": "/",
                "right": {
                  "type": "CallExpression",
                  "start": 1066,
                  "end": 1080,
                  "callee": {
                    "type": "Identifier",
                    "start": 1066,
                    "end": 1076,
                    "name": "parseFloat"
                  },
                  "arguments": [
                    {
                      "type": "UnaryExpression",
                      "start": 1077,
                      "end": 1079,
                      "operator": "-",
                      "prefix": true,
                      "argument": {
                        "type": "Literal",
                        "start": 1078,
                        "end": 1079,
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  ],
                  "optional": false
                }
              },
              "operator": "!==",
              "right": {
                "type": "MemberExpression",
                "start": 1085,
                "end": 1109,
                "object": {
                  "type": "Identifier",
                  "start": 1085,
                  "end": 1091,
                  "name": "Number"
                },
                "property": {
                  "type": "Identifier",
                  "start": 1092,
                  "end": 1109,
                  "name": "POSITIVE_INFINITY"
                },
                "computed": false,
                "optional": false
              }
            },
            "consequent": {
              "type": "BlockStatement",
              "start": 1111,
              "end": 1202,
              "body": [
                {
                  "type": "ThrowStatement",
                  "start": 1117,
                  "end": 1198,
                  "argument": {
                    "type": "NewExpression",
                    "start": 1123,
                    "end": 1197,
                    "callee": {
                      "type": "Identifier",
                      "start": 1127,
                      "end": 1139,
                      "name": "Test262Error"
                    },
                    "arguments": [
                      {
                        "type": "BinaryExpression",
                        "start": 1140,
                        "end": 1196,
                        "left": {
                          "type": "Literal",
                          "start": 1140,
                          "end": 1177,
                          "value": "#5: parseFloat(-0) === +0. Actual: ",
                          "raw": "'#5: parseFloat(-0) === +0. Actual: '"
                        },
                        "operator": "+",
                        "right": {
                          "type": "ParenthesizedExpression",
                          "start": 1180,
                          "end": 1196,
                          "expression": {
                            "type": "CallExpression",
                            "start": 1181,
                            "end": 1195,
                            "callee": {
                              "type": "Identifier",
                              "start": 1181,
                              "end": 1191,
                              "name": "parseFloat"
                            },
                            "arguments": [
                              {
                                "type": "UnaryExpression",
                                "start": 1192,
                                "end": 1194,
                                "operator": "-",
                                "prefix": true,
                                "argument": {
                                  "type": "Literal",
                                  "start": 1193,
                                  "end": 1194,
                                  "value": 0,
                                  "raw": "0"
                                }
                              }
                            ],
                            "optional": false
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "alternate": null
          }
        ]
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}