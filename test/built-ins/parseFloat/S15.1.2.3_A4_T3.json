{
  "type": "Program",
  "start": 0,
  "end": 2502,
  "body": [
    {
      "type": "IfStatement",
      "start": 385,
      "end": 506,
      "test": {
        "type": "BinaryExpression",
        "start": 389,
        "end": 412,
        "left": {
          "type": "CallExpression",
          "start": 389,
          "end": 406,
          "callee": {
            "type": "Identifier",
            "start": 389,
            "end": 399,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 400,
              "end": 405,
              "value": "0x0",
              "raw": "\"0x0\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 411,
          "end": 412,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 414,
        "end": 506,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 418,
            "end": 504,
            "argument": {
              "type": "NewExpression",
              "start": 424,
              "end": 503,
              "callee": {
                "type": "Identifier",
                "start": 428,
                "end": 440,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 441,
                  "end": 502,
                  "left": {
                    "type": "Literal",
                    "start": 441,
                    "end": 480,
                    "value": "#0: parseFloat(\"0x0\") === 0. Actual: ",
                    "raw": "'#0: parseFloat(\"0x0\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 483,
                    "end": 502,
                    "expression": {
                      "type": "CallExpression",
                      "start": 484,
                      "end": 501,
                      "callee": {
                        "type": "Identifier",
                        "start": 484,
                        "end": 494,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 495,
                          "end": 500,
                          "value": "0x0",
                          "raw": "\"0x0\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 518,
      "end": 639,
      "test": {
        "type": "BinaryExpression",
        "start": 522,
        "end": 545,
        "left": {
          "type": "CallExpression",
          "start": 522,
          "end": 539,
          "callee": {
            "type": "Identifier",
            "start": 522,
            "end": 532,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 533,
              "end": 538,
              "value": "0x1",
              "raw": "\"0x1\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 544,
          "end": 545,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 547,
        "end": 639,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 551,
            "end": 637,
            "argument": {
              "type": "NewExpression",
              "start": 557,
              "end": 636,
              "callee": {
                "type": "Identifier",
                "start": 561,
                "end": 573,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 574,
                  "end": 635,
                  "left": {
                    "type": "Literal",
                    "start": 574,
                    "end": 613,
                    "value": "#1: parseFloat(\"0x1\") === 0. Actual: ",
                    "raw": "'#1: parseFloat(\"0x1\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 616,
                    "end": 635,
                    "expression": {
                      "type": "CallExpression",
                      "start": 617,
                      "end": 634,
                      "callee": {
                        "type": "Identifier",
                        "start": 617,
                        "end": 627,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 628,
                          "end": 633,
                          "value": "0x1",
                          "raw": "\"0x1\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 651,
      "end": 772,
      "test": {
        "type": "BinaryExpression",
        "start": 655,
        "end": 678,
        "left": {
          "type": "CallExpression",
          "start": 655,
          "end": 672,
          "callee": {
            "type": "Identifier",
            "start": 655,
            "end": 665,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 666,
              "end": 671,
              "value": "0x2",
              "raw": "\"0x2\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 677,
          "end": 678,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 680,
        "end": 772,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 684,
            "end": 770,
            "argument": {
              "type": "NewExpression",
              "start": 690,
              "end": 769,
              "callee": {
                "type": "Identifier",
                "start": 694,
                "end": 706,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 707,
                  "end": 768,
                  "left": {
                    "type": "Literal",
                    "start": 707,
                    "end": 746,
                    "value": "#2: parseFloat(\"0x2\") === 0. Actual: ",
                    "raw": "'#2: parseFloat(\"0x2\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 749,
                    "end": 768,
                    "expression": {
                      "type": "CallExpression",
                      "start": 750,
                      "end": 767,
                      "callee": {
                        "type": "Identifier",
                        "start": 750,
                        "end": 760,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 761,
                          "end": 766,
                          "value": "0x2",
                          "raw": "\"0x2\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 784,
      "end": 905,
      "test": {
        "type": "BinaryExpression",
        "start": 788,
        "end": 811,
        "left": {
          "type": "CallExpression",
          "start": 788,
          "end": 805,
          "callee": {
            "type": "Identifier",
            "start": 788,
            "end": 798,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 799,
              "end": 804,
              "value": "0x3",
              "raw": "\"0x3\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 810,
          "end": 811,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 813,
        "end": 905,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 817,
            "end": 903,
            "argument": {
              "type": "NewExpression",
              "start": 823,
              "end": 902,
              "callee": {
                "type": "Identifier",
                "start": 827,
                "end": 839,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 840,
                  "end": 901,
                  "left": {
                    "type": "Literal",
                    "start": 840,
                    "end": 879,
                    "value": "#3: parseFloat(\"0x3\") === 0. Actual: ",
                    "raw": "'#3: parseFloat(\"0x3\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 882,
                    "end": 901,
                    "expression": {
                      "type": "CallExpression",
                      "start": 883,
                      "end": 900,
                      "callee": {
                        "type": "Identifier",
                        "start": 883,
                        "end": 893,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 894,
                          "end": 899,
                          "value": "0x3",
                          "raw": "\"0x3\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 917,
      "end": 1038,
      "test": {
        "type": "BinaryExpression",
        "start": 921,
        "end": 944,
        "left": {
          "type": "CallExpression",
          "start": 921,
          "end": 938,
          "callee": {
            "type": "Identifier",
            "start": 921,
            "end": 931,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 932,
              "end": 937,
              "value": "0x4",
              "raw": "\"0x4\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 943,
          "end": 944,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 946,
        "end": 1038,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 950,
            "end": 1036,
            "argument": {
              "type": "NewExpression",
              "start": 956,
              "end": 1035,
              "callee": {
                "type": "Identifier",
                "start": 960,
                "end": 972,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 973,
                  "end": 1034,
                  "left": {
                    "type": "Literal",
                    "start": 973,
                    "end": 1012,
                    "value": "#4: parseFloat(\"0x4\") === 0. Actual: ",
                    "raw": "'#4: parseFloat(\"0x4\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1015,
                    "end": 1034,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1016,
                      "end": 1033,
                      "callee": {
                        "type": "Identifier",
                        "start": 1016,
                        "end": 1026,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1027,
                          "end": 1032,
                          "value": "0x4",
                          "raw": "\"0x4\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1050,
      "end": 1171,
      "test": {
        "type": "BinaryExpression",
        "start": 1054,
        "end": 1077,
        "left": {
          "type": "CallExpression",
          "start": 1054,
          "end": 1071,
          "callee": {
            "type": "Identifier",
            "start": 1054,
            "end": 1064,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1065,
              "end": 1070,
              "value": "0x5",
              "raw": "\"0x5\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1076,
          "end": 1077,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1079,
        "end": 1171,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1083,
            "end": 1169,
            "argument": {
              "type": "NewExpression",
              "start": 1089,
              "end": 1168,
              "callee": {
                "type": "Identifier",
                "start": 1093,
                "end": 1105,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1106,
                  "end": 1167,
                  "left": {
                    "type": "Literal",
                    "start": 1106,
                    "end": 1145,
                    "value": "#5: parseFloat(\"0x5\") === 0. Actual: ",
                    "raw": "'#5: parseFloat(\"0x5\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1148,
                    "end": 1167,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1149,
                      "end": 1166,
                      "callee": {
                        "type": "Identifier",
                        "start": 1149,
                        "end": 1159,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1160,
                          "end": 1165,
                          "value": "0x5",
                          "raw": "\"0x5\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1183,
      "end": 1304,
      "test": {
        "type": "BinaryExpression",
        "start": 1187,
        "end": 1210,
        "left": {
          "type": "CallExpression",
          "start": 1187,
          "end": 1204,
          "callee": {
            "type": "Identifier",
            "start": 1187,
            "end": 1197,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1198,
              "end": 1203,
              "value": "0x6",
              "raw": "\"0x6\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1209,
          "end": 1210,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1212,
        "end": 1304,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1216,
            "end": 1302,
            "argument": {
              "type": "NewExpression",
              "start": 1222,
              "end": 1301,
              "callee": {
                "type": "Identifier",
                "start": 1226,
                "end": 1238,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1239,
                  "end": 1300,
                  "left": {
                    "type": "Literal",
                    "start": 1239,
                    "end": 1278,
                    "value": "#6: parseFloat(\"0x6\") === 0. Actual: ",
                    "raw": "'#6: parseFloat(\"0x6\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1281,
                    "end": 1300,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1282,
                      "end": 1299,
                      "callee": {
                        "type": "Identifier",
                        "start": 1282,
                        "end": 1292,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1293,
                          "end": 1298,
                          "value": "0x6",
                          "raw": "\"0x6\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1316,
      "end": 1437,
      "test": {
        "type": "BinaryExpression",
        "start": 1320,
        "end": 1343,
        "left": {
          "type": "CallExpression",
          "start": 1320,
          "end": 1337,
          "callee": {
            "type": "Identifier",
            "start": 1320,
            "end": 1330,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1331,
              "end": 1336,
              "value": "0x7",
              "raw": "\"0x7\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1342,
          "end": 1343,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1345,
        "end": 1437,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1349,
            "end": 1435,
            "argument": {
              "type": "NewExpression",
              "start": 1355,
              "end": 1434,
              "callee": {
                "type": "Identifier",
                "start": 1359,
                "end": 1371,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1372,
                  "end": 1433,
                  "left": {
                    "type": "Literal",
                    "start": 1372,
                    "end": 1411,
                    "value": "#7: parseFloat(\"0x7\") === 0. Actual: ",
                    "raw": "'#7: parseFloat(\"0x7\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1414,
                    "end": 1433,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1415,
                      "end": 1432,
                      "callee": {
                        "type": "Identifier",
                        "start": 1415,
                        "end": 1425,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1426,
                          "end": 1431,
                          "value": "0x7",
                          "raw": "\"0x7\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1449,
      "end": 1570,
      "test": {
        "type": "BinaryExpression",
        "start": 1453,
        "end": 1476,
        "left": {
          "type": "CallExpression",
          "start": 1453,
          "end": 1470,
          "callee": {
            "type": "Identifier",
            "start": 1453,
            "end": 1463,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1464,
              "end": 1469,
              "value": "0x8",
              "raw": "\"0x8\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1475,
          "end": 1476,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1478,
        "end": 1570,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1482,
            "end": 1568,
            "argument": {
              "type": "NewExpression",
              "start": 1488,
              "end": 1567,
              "callee": {
                "type": "Identifier",
                "start": 1492,
                "end": 1504,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1505,
                  "end": 1566,
                  "left": {
                    "type": "Literal",
                    "start": 1505,
                    "end": 1544,
                    "value": "#8: parseFloat(\"0x8\") === 0. Actual: ",
                    "raw": "'#8: parseFloat(\"0x8\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1547,
                    "end": 1566,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1548,
                      "end": 1565,
                      "callee": {
                        "type": "Identifier",
                        "start": 1548,
                        "end": 1558,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1559,
                          "end": 1564,
                          "value": "0x8",
                          "raw": "\"0x8\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1582,
      "end": 1703,
      "test": {
        "type": "BinaryExpression",
        "start": 1586,
        "end": 1609,
        "left": {
          "type": "CallExpression",
          "start": 1586,
          "end": 1603,
          "callee": {
            "type": "Identifier",
            "start": 1586,
            "end": 1596,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1597,
              "end": 1602,
              "value": "0x9",
              "raw": "\"0x9\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1608,
          "end": 1609,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1611,
        "end": 1703,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1615,
            "end": 1701,
            "argument": {
              "type": "NewExpression",
              "start": 1621,
              "end": 1700,
              "callee": {
                "type": "Identifier",
                "start": 1625,
                "end": 1637,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1638,
                  "end": 1699,
                  "left": {
                    "type": "Literal",
                    "start": 1638,
                    "end": 1677,
                    "value": "#9: parseFloat(\"0x9\") === 0. Actual: ",
                    "raw": "'#9: parseFloat(\"0x9\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1680,
                    "end": 1699,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1681,
                      "end": 1698,
                      "callee": {
                        "type": "Identifier",
                        "start": 1681,
                        "end": 1691,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1692,
                          "end": 1697,
                          "value": "0x9",
                          "raw": "\"0x9\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1715,
      "end": 1836,
      "test": {
        "type": "BinaryExpression",
        "start": 1719,
        "end": 1742,
        "left": {
          "type": "CallExpression",
          "start": 1719,
          "end": 1736,
          "callee": {
            "type": "Identifier",
            "start": 1719,
            "end": 1729,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1730,
              "end": 1735,
              "value": "0xA",
              "raw": "\"0xA\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1741,
          "end": 1742,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1744,
        "end": 1836,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1748,
            "end": 1834,
            "argument": {
              "type": "NewExpression",
              "start": 1754,
              "end": 1833,
              "callee": {
                "type": "Identifier",
                "start": 1758,
                "end": 1770,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1771,
                  "end": 1832,
                  "left": {
                    "type": "Literal",
                    "start": 1771,
                    "end": 1810,
                    "value": "#A: parseFloat(\"0xA\") === 0. Actual: ",
                    "raw": "'#A: parseFloat(\"0xA\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1813,
                    "end": 1832,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1814,
                      "end": 1831,
                      "callee": {
                        "type": "Identifier",
                        "start": 1814,
                        "end": 1824,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1825,
                          "end": 1830,
                          "value": "0xA",
                          "raw": "\"0xA\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1848,
      "end": 1969,
      "test": {
        "type": "BinaryExpression",
        "start": 1852,
        "end": 1875,
        "left": {
          "type": "CallExpression",
          "start": 1852,
          "end": 1869,
          "callee": {
            "type": "Identifier",
            "start": 1852,
            "end": 1862,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1863,
              "end": 1868,
              "value": "0xB",
              "raw": "\"0xB\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 1874,
          "end": 1875,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1877,
        "end": 1969,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1881,
            "end": 1967,
            "argument": {
              "type": "NewExpression",
              "start": 1887,
              "end": 1966,
              "callee": {
                "type": "Identifier",
                "start": 1891,
                "end": 1903,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 1904,
                  "end": 1965,
                  "left": {
                    "type": "Literal",
                    "start": 1904,
                    "end": 1943,
                    "value": "#B: parseFloat(\"0xB\") === 0. Actual: ",
                    "raw": "'#B: parseFloat(\"0xB\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 1946,
                    "end": 1965,
                    "expression": {
                      "type": "CallExpression",
                      "start": 1947,
                      "end": 1964,
                      "callee": {
                        "type": "Identifier",
                        "start": 1947,
                        "end": 1957,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 1958,
                          "end": 1963,
                          "value": "0xB",
                          "raw": "\"0xB\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 1981,
      "end": 2102,
      "test": {
        "type": "BinaryExpression",
        "start": 1985,
        "end": 2008,
        "left": {
          "type": "CallExpression",
          "start": 1985,
          "end": 2002,
          "callee": {
            "type": "Identifier",
            "start": 1985,
            "end": 1995,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 1996,
              "end": 2001,
              "value": "0xC",
              "raw": "\"0xC\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 2007,
          "end": 2008,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 2010,
        "end": 2102,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 2014,
            "end": 2100,
            "argument": {
              "type": "NewExpression",
              "start": 2020,
              "end": 2099,
              "callee": {
                "type": "Identifier",
                "start": 2024,
                "end": 2036,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 2037,
                  "end": 2098,
                  "left": {
                    "type": "Literal",
                    "start": 2037,
                    "end": 2076,
                    "value": "#C: parseFloat(\"0xC\") === 0. Actual: ",
                    "raw": "'#C: parseFloat(\"0xC\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 2079,
                    "end": 2098,
                    "expression": {
                      "type": "CallExpression",
                      "start": 2080,
                      "end": 2097,
                      "callee": {
                        "type": "Identifier",
                        "start": 2080,
                        "end": 2090,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 2091,
                          "end": 2096,
                          "value": "0xC",
                          "raw": "\"0xC\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 2114,
      "end": 2235,
      "test": {
        "type": "BinaryExpression",
        "start": 2118,
        "end": 2141,
        "left": {
          "type": "CallExpression",
          "start": 2118,
          "end": 2135,
          "callee": {
            "type": "Identifier",
            "start": 2118,
            "end": 2128,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 2129,
              "end": 2134,
              "value": "0xD",
              "raw": "\"0xD\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 2140,
          "end": 2141,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 2143,
        "end": 2235,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 2147,
            "end": 2233,
            "argument": {
              "type": "NewExpression",
              "start": 2153,
              "end": 2232,
              "callee": {
                "type": "Identifier",
                "start": 2157,
                "end": 2169,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 2170,
                  "end": 2231,
                  "left": {
                    "type": "Literal",
                    "start": 2170,
                    "end": 2209,
                    "value": "#D: parseFloat(\"0xD\") === 0. Actual: ",
                    "raw": "'#D: parseFloat(\"0xD\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 2212,
                    "end": 2231,
                    "expression": {
                      "type": "CallExpression",
                      "start": 2213,
                      "end": 2230,
                      "callee": {
                        "type": "Identifier",
                        "start": 2213,
                        "end": 2223,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 2224,
                          "end": 2229,
                          "value": "0xD",
                          "raw": "\"0xD\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 2247,
      "end": 2368,
      "test": {
        "type": "BinaryExpression",
        "start": 2251,
        "end": 2274,
        "left": {
          "type": "CallExpression",
          "start": 2251,
          "end": 2268,
          "callee": {
            "type": "Identifier",
            "start": 2251,
            "end": 2261,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 2262,
              "end": 2267,
              "value": "0xE",
              "raw": "\"0xE\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 2273,
          "end": 2274,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 2276,
        "end": 2368,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 2280,
            "end": 2366,
            "argument": {
              "type": "NewExpression",
              "start": 2286,
              "end": 2365,
              "callee": {
                "type": "Identifier",
                "start": 2290,
                "end": 2302,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 2303,
                  "end": 2364,
                  "left": {
                    "type": "Literal",
                    "start": 2303,
                    "end": 2342,
                    "value": "#E: parseFloat(\"0xE\") === 0. Actual: ",
                    "raw": "'#E: parseFloat(\"0xE\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 2345,
                    "end": 2364,
                    "expression": {
                      "type": "CallExpression",
                      "start": 2346,
                      "end": 2363,
                      "callee": {
                        "type": "Identifier",
                        "start": 2346,
                        "end": 2356,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 2357,
                          "end": 2362,
                          "value": "0xE",
                          "raw": "\"0xE\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "start": 2380,
      "end": 2501,
      "test": {
        "type": "BinaryExpression",
        "start": 2384,
        "end": 2407,
        "left": {
          "type": "CallExpression",
          "start": 2384,
          "end": 2401,
          "callee": {
            "type": "Identifier",
            "start": 2384,
            "end": 2394,
            "name": "parseFloat"
          },
          "arguments": [
            {
              "type": "Literal",
              "start": 2395,
              "end": 2400,
              "value": "0xF",
              "raw": "\"0xF\"",
              "regex": null,
              "bigint": null
            }
          ],
          "optional": false
        },
        "operator": "!==",
        "right": {
          "type": "Literal",
          "start": 2406,
          "end": 2407,
          "value": 0,
          "raw": "0",
          "regex": null,
          "bigint": null
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 2409,
        "end": 2501,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 2413,
            "end": 2499,
            "argument": {
              "type": "NewExpression",
              "start": 2419,
              "end": 2498,
              "callee": {
                "type": "Identifier",
                "start": 2423,
                "end": 2435,
                "name": "Test262Error"
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "start": 2436,
                  "end": 2497,
                  "left": {
                    "type": "Literal",
                    "start": 2436,
                    "end": 2475,
                    "value": "#F: parseFloat(\"0xF\") === 0. Actual: ",
                    "raw": "'#F: parseFloat(\"0xF\") === 0. Actual: '",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "ParenthesizedExpression",
                    "start": 2478,
                    "end": 2497,
                    "expression": {
                      "type": "CallExpression",
                      "start": 2479,
                      "end": 2496,
                      "callee": {
                        "type": "Identifier",
                        "start": 2479,
                        "end": 2489,
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "start": 2490,
                          "end": 2495,
                          "value": "0xF",
                          "raw": "\"0xF\"",
                          "regex": null,
                          "bigint": null
                        }
                      ],
                      "optional": false
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}