{
  "type": "Program",
  "start": 0,
  "end": 829,
  "body": [
    {
      "type": "ExpressionStatement",
      "start": 203,
      "end": 299,
      "expression": {
        "type": "CallExpression",
        "start": 203,
        "end": 298,
        "callee": {
          "type": "MemberExpression",
          "start": 203,
          "end": 219,
          "object": {
            "type": "Identifier",
            "start": 203,
            "end": 209,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 210,
            "end": 219,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 220,
            "end": 235,
            "callee": {
              "type": "MemberExpression",
              "start": 220,
              "end": 230,
              "object": {
                "type": "Identifier",
                "start": 220,
                "end": 224,
                "name": "Math"
              },
              "property": {
                "type": "Identifier",
                "start": 225,
                "end": 230,
                "name": "asinh"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "Identifier",
                "start": 231,
                "end": 234,
                "name": "NaN"
              }
            ],
            "optional": false
          },
          {
            "type": "MemberExpression",
            "start": 237,
            "end": 247,
            "object": {
              "type": "Identifier",
              "start": 237,
              "end": 243,
              "name": "Number"
            },
            "property": {
              "type": "Identifier",
              "start": 244,
              "end": 247,
              "name": "NaN"
            },
            "computed": false,
            "optional": false
          },
          {
            "type": "Literal",
            "start": 251,
            "end": 297,
            "value": "Math.asinh produces incorrect output for NaN",
            "raw": "\"Math.asinh produces incorrect output for NaN\"",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 300,
      "end": 459,
      "expression": {
        "type": "CallExpression",
        "start": 300,
        "end": 458,
        "callee": {
          "type": "MemberExpression",
          "start": 300,
          "end": 316,
          "object": {
            "type": "Identifier",
            "start": 300,
            "end": 306,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 307,
            "end": 316,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 317,
            "end": 353,
            "callee": {
              "type": "MemberExpression",
              "start": 317,
              "end": 327,
              "object": {
                "type": "Identifier",
                "start": 317,
                "end": 321,
                "name": "Math"
              },
              "property": {
                "type": "Identifier",
                "start": 322,
                "end": 327,
                "name": "asinh"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "MemberExpression",
                "start": 328,
                "end": 352,
                "object": {
                  "type": "Identifier",
                  "start": 328,
                  "end": 334,
                  "name": "Number"
                },
                "property": {
                  "type": "Identifier",
                  "start": 335,
                  "end": 352,
                  "name": "NEGATIVE_INFINITY"
                },
                "computed": false,
                "optional": false
              }
            ],
            "optional": false
          },
          {
            "type": "MemberExpression",
            "start": 355,
            "end": 379,
            "object": {
              "type": "Identifier",
              "start": 355,
              "end": 361,
              "name": "Number"
            },
            "property": {
              "type": "Identifier",
              "start": 362,
              "end": 379,
              "name": "NEGATIVE_INFINITY"
            },
            "computed": false,
            "optional": false
          },
          {
            "type": "Literal",
            "start": 383,
            "end": 457,
            "value": "Math.asinh should produce negative infinity for Number.NEGATIVE_INFINITY",
            "raw": "\"Math.asinh should produce negative infinity for Number.NEGATIVE_INFINITY\"",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 460,
      "end": 619,
      "expression": {
        "type": "CallExpression",
        "start": 460,
        "end": 618,
        "callee": {
          "type": "MemberExpression",
          "start": 460,
          "end": 476,
          "object": {
            "type": "Identifier",
            "start": 460,
            "end": 466,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 467,
            "end": 476,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 477,
            "end": 513,
            "callee": {
              "type": "MemberExpression",
              "start": 477,
              "end": 487,
              "object": {
                "type": "Identifier",
                "start": 477,
                "end": 481,
                "name": "Math"
              },
              "property": {
                "type": "Identifier",
                "start": 482,
                "end": 487,
                "name": "asinh"
              },
              "computed": false,
              "optional": false
            },
            "arguments": [
              {
                "type": "MemberExpression",
                "start": 488,
                "end": 512,
                "object": {
                  "type": "Identifier",
                  "start": 488,
                  "end": 494,
                  "name": "Number"
                },
                "property": {
                  "type": "Identifier",
                  "start": 495,
                  "end": 512,
                  "name": "POSITIVE_INFINITY"
                },
                "computed": false,
                "optional": false
              }
            ],
            "optional": false
          },
          {
            "type": "MemberExpression",
            "start": 515,
            "end": 539,
            "object": {
              "type": "Identifier",
              "start": 515,
              "end": 521,
              "name": "Number"
            },
            "property": {
              "type": "Identifier",
              "start": 522,
              "end": 539,
              "name": "POSITIVE_INFINITY"
            },
            "computed": false,
            "optional": false
          },
          {
            "type": "Literal",
            "start": 543,
            "end": 617,
            "value": "Math.asinh should produce positive infinity for Number.POSITIVE_INFINITY",
            "raw": "\"Math.asinh should produce positive infinity for Number.POSITIVE_INFINITY\"",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 620,
      "end": 724,
      "expression": {
        "type": "CallExpression",
        "start": 620,
        "end": 723,
        "callee": {
          "type": "MemberExpression",
          "start": 620,
          "end": 636,
          "object": {
            "type": "Identifier",
            "start": 620,
            "end": 626,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 627,
            "end": 636,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 637,
            "end": 655,
            "left": {
              "type": "Literal",
              "start": 637,
              "end": 638,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            "operator": "/",
            "right": {
              "type": "CallExpression",
              "start": 641,
              "end": 655,
              "callee": {
                "type": "MemberExpression",
                "start": 641,
                "end": 651,
                "object": {
                  "type": "Identifier",
                  "start": 641,
                  "end": 645,
                  "name": "Math"
                },
                "property": {
                  "type": "Identifier",
                  "start": 646,
                  "end": 651,
                  "name": "asinh"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [
                {
                  "type": "UnaryExpression",
                  "start": 652,
                  "end": 654,
                  "operator": "-",
                  "prefix": true,
                  "argument": {
                    "type": "Literal",
                    "start": 653,
                    "end": 654,
                    "value": 0,
                    "raw": "0",
                    "regex": null,
                    "bigint": null
                  }
                }
              ],
              "optional": false
            }
          },
          {
            "type": "MemberExpression",
            "start": 657,
            "end": 681,
            "object": {
              "type": "Identifier",
              "start": 657,
              "end": 663,
              "name": "Number"
            },
            "property": {
              "type": "Identifier",
              "start": 664,
              "end": 681,
              "name": "NEGATIVE_INFINITY"
            },
            "computed": false,
            "optional": false
          },
          {
            "type": "Literal",
            "start": 685,
            "end": 722,
            "value": "Math.asinh should produce -0 for -0",
            "raw": "\"Math.asinh should produce -0 for -0\"",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 725,
      "end": 828,
      "expression": {
        "type": "CallExpression",
        "start": 725,
        "end": 827,
        "callee": {
          "type": "MemberExpression",
          "start": 725,
          "end": 741,
          "object": {
            "type": "Identifier",
            "start": 725,
            "end": 731,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 732,
            "end": 741,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 742,
            "end": 759,
            "left": {
              "type": "Literal",
              "start": 742,
              "end": 743,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            },
            "operator": "/",
            "right": {
              "type": "CallExpression",
              "start": 746,
              "end": 759,
              "callee": {
                "type": "MemberExpression",
                "start": 746,
                "end": 756,
                "object": {
                  "type": "Identifier",
                  "start": 746,
                  "end": 750,
                  "name": "Math"
                },
                "property": {
                  "type": "Identifier",
                  "start": 751,
                  "end": 756,
                  "name": "asinh"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [
                {
                  "type": "Literal",
                  "start": 757,
                  "end": 758,
                  "value": 0,
                  "raw": "0",
                  "regex": null,
                  "bigint": null
                }
              ],
              "optional": false
            }
          },
          {
            "type": "MemberExpression",
            "start": 761,
            "end": 785,
            "object": {
              "type": "Identifier",
              "start": 761,
              "end": 767,
              "name": "Number"
            },
            "property": {
              "type": "Identifier",
              "start": 768,
              "end": 785,
              "name": "POSITIVE_INFINITY"
            },
            "computed": false,
            "optional": false
          },
          {
            "type": "Literal",
            "start": 789,
            "end": 826,
            "value": "Math.asinh should produce +0 for +0",
            "raw": "\"Math.asinh should produce +0 for +0\"",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}