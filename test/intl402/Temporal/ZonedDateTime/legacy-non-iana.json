{
  "type": "Program",
  "start": 0,
  "end": 796,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 383,
      "end": 637,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 389,
          "end": 636,
          "id": {
            "type": "Identifier",
            "start": 389,
            "end": 405,
            "name": "invalidTimeZones"
          },
          "init": {
            "type": "ArrayExpression",
            "start": 408,
            "end": 636,
            "elements": [
              {
                "type": "Literal",
                "start": 412,
                "end": 417,
                "value": "ACT",
                "raw": "\"ACT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 421,
                "end": 426,
                "value": "AET",
                "raw": "\"AET\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 430,
                "end": 435,
                "value": "AGT",
                "raw": "\"AGT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 439,
                "end": 444,
                "value": "ART",
                "raw": "\"ART\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 448,
                "end": 453,
                "value": "AST",
                "raw": "\"AST\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 457,
                "end": 462,
                "value": "BET",
                "raw": "\"BET\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 466,
                "end": 471,
                "value": "BST",
                "raw": "\"BST\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 475,
                "end": 480,
                "value": "CAT",
                "raw": "\"CAT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 484,
                "end": 489,
                "value": "CNT",
                "raw": "\"CNT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 493,
                "end": 498,
                "value": "CST",
                "raw": "\"CST\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 502,
                "end": 507,
                "value": "CTT",
                "raw": "\"CTT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 511,
                "end": 516,
                "value": "EAT",
                "raw": "\"EAT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 520,
                "end": 525,
                "value": "ECT",
                "raw": "\"ECT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 529,
                "end": 534,
                "value": "IET",
                "raw": "\"IET\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 538,
                "end": 543,
                "value": "IST",
                "raw": "\"IST\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 547,
                "end": 552,
                "value": "JST",
                "raw": "\"JST\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 556,
                "end": 561,
                "value": "MIT",
                "raw": "\"MIT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 565,
                "end": 570,
                "value": "NET",
                "raw": "\"NET\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 574,
                "end": 579,
                "value": "NST",
                "raw": "\"NST\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 583,
                "end": 588,
                "value": "PLT",
                "raw": "\"PLT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 592,
                "end": 597,
                "value": "PNT",
                "raw": "\"PNT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 601,
                "end": 606,
                "value": "PRT",
                "raw": "\"PRT\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 610,
                "end": 615,
                "value": "PST",
                "raw": "\"PST\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 619,
                "end": 624,
                "value": "SST",
                "raw": "\"SST\"",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Literal",
                "start": 628,
                "end": 633,
                "value": "VST",
                "raw": "\"VST\"",
                "regex": null,
                "bigint": null
              }
            ]
          }
        }
      ],
      "kind": "const"
    },
    {
      "type": "ForOfStatement",
      "start": 639,
      "end": 795,
      "await": false,
      "left": {
        "type": "VariableDeclaration",
        "start": 644,
        "end": 656,
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 648,
            "end": 656,
            "id": {
              "type": "Identifier",
              "start": 648,
              "end": 656,
              "name": "timeZone"
            },
            "init": null
          }
        ],
        "kind": "let"
      },
      "right": {
        "type": "Identifier",
        "start": 660,
        "end": 676,
        "name": "invalidTimeZones"
      },
      "body": {
        "type": "BlockStatement",
        "start": 678,
        "end": 795,
        "body": [
          {
            "type": "ExpressionStatement",
            "start": 682,
            "end": 793,
            "expression": {
              "type": "CallExpression",
              "start": 682,
              "end": 792,
              "callee": {
                "type": "MemberExpression",
                "start": 682,
                "end": 695,
                "object": {
                  "type": "Identifier",
                  "start": 682,
                  "end": 688,
                  "name": "assert"
                },
                "property": {
                  "type": "Identifier",
                  "start": 689,
                  "end": 695,
                  "name": "throws"
                },
                "computed": false,
                "optional": false
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "start": 696,
                  "end": 706,
                  "name": "RangeError"
                },
                {
                  "type": "ArrowFunctionExpression",
                  "start": 708,
                  "end": 765,
                  "id": null,
                  "expression": false,
                  "generator": false,
                  "async": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "start": 714,
                    "end": 765,
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "start": 720,
                        "end": 761,
                        "expression": {
                          "type": "NewExpression",
                          "start": 720,
                          "end": 760,
                          "callee": {
                            "type": "MemberExpression",
                            "start": 724,
                            "end": 746,
                            "object": {
                              "type": "Identifier",
                              "start": 724,
                              "end": 732,
                              "name": "Temporal"
                            },
                            "property": {
                              "type": "Identifier",
                              "start": 733,
                              "end": 746,
                              "name": "ZonedDateTime"
                            },
                            "computed": false,
                            "optional": false
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "start": 747,
                              "end": 749,
                              "value": null,
                              "raw": "0n",
                              "regex": null,
                              "bigint": "0"
                            },
                            {
                              "type": "Identifier",
                              "start": 751,
                              "end": 759,
                              "name": "timeZone"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "BinaryExpression",
                  "start": 767,
                  "end": 791,
                  "left": {
                    "type": "Literal",
                    "start": 767,
                    "end": 780,
                    "value": "Time zone: ",
                    "raw": "\"Time zone: \"",
                    "regex": null,
                    "bigint": null
                  },
                  "operator": "+",
                  "right": {
                    "type": "Identifier",
                    "start": 783,
                    "end": 791,
                    "name": "timeZone"
                  }
                }
              ],
              "optional": false
            }
          }
        ]
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}