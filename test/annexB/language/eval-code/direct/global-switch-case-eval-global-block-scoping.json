{
  "type": "Program",
  "start": 0,
  "end": 1543,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 1085,
      "end": 1110,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 1089,
          "end": 1098,
          "id": {
            "type": "Identifier",
            "start": 1089,
            "end": 1098,
            "name": "initialBV"
          },
          "init": null
        },
        {
          "type": "VariableDeclarator",
          "start": 1100,
          "end": 1109,
          "id": {
            "type": "Identifier",
            "start": 1100,
            "end": 1109,
            "name": "currentBV"
          },
          "init": null
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 1112,
      "end": 1246,
      "expression": {
        "type": "CallExpression",
        "start": 1112,
        "end": 1245,
        "callee": {
          "type": "Identifier",
          "start": 1112,
          "end": 1116,
          "name": "eval"
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 1120,
            "end": 1243,
            "left": {
              "type": "BinaryExpression",
              "start": 1120,
              "end": 1231,
              "left": {
                "type": "BinaryExpression",
                "start": 1120,
                "end": 1150,
                "left": {
                  "type": "Literal",
                  "start": 1120,
                  "end": 1134,
                  "value": "switch (1) {",
                  "raw": "'switch (1) {'",
                  "regex": null,
                  "bigint": null
                },
                "operator": "+",
                "right": {
                  "type": "Literal",
                  "start": 1139,
                  "end": 1150,
                  "value": "  case 1:",
                  "raw": "'  case 1:'",
                  "regex": null,
                  "bigint": null
                }
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 1155,
                "end": 1231,
                "value": "    function f() { initialBV = f; f = 123; currentBV = f; return \"decl\"; }",
                "raw": "'    function f() { initialBV = f; f = 123; currentBV = f; return \"decl\"; }'",
                "regex": null,
                "bigint": null
              }
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "start": 1236,
              "end": 1243,
              "value": "}  ",
              "raw": "'}\\\n  '",
              "regex": null,
              "bigint": null
            }
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1248,
      "end": 1252,
      "expression": {
        "type": "CallExpression",
        "start": 1248,
        "end": 1251,
        "callee": {
          "type": "Identifier",
          "start": 1248,
          "end": 1249,
          "name": "f"
        },
        "arguments": [],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1254,
      "end": 1367,
      "expression": {
        "type": "CallExpression",
        "start": 1254,
        "end": 1366,
        "callee": {
          "type": "MemberExpression",
          "start": 1254,
          "end": 1270,
          "object": {
            "type": "Identifier",
            "start": 1254,
            "end": 1260,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1261,
            "end": 1270,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 1274,
            "end": 1285,
            "callee": {
              "type": "Identifier",
              "start": 1274,
              "end": 1283,
              "name": "initialBV"
            },
            "arguments": [],
            "optional": false
          },
          {
            "type": "Literal",
            "start": 1289,
            "end": 1295,
            "value": "decl",
            "raw": "'decl'",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 1299,
            "end": 1364,
            "value": "Block-scoped binding value is function object at execution time",
            "raw": "'Block-scoped binding value is function object at execution time'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1368,
      "end": 1436,
      "expression": {
        "type": "CallExpression",
        "start": 1368,
        "end": 1435,
        "callee": {
          "type": "MemberExpression",
          "start": 1368,
          "end": 1384,
          "object": {
            "type": "Identifier",
            "start": 1368,
            "end": 1374,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1375,
            "end": 1384,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1385,
            "end": 1394,
            "name": "currentBV"
          },
          {
            "type": "Literal",
            "start": 1396,
            "end": 1399,
            "value": 123,
            "raw": "123",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 1401,
            "end": 1434,
            "value": "Block-scoped binding is mutable",
            "raw": "'Block-scoped binding is mutable'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1437,
      "end": 1542,
      "expression": {
        "type": "CallExpression",
        "start": 1437,
        "end": 1541,
        "callee": {
          "type": "MemberExpression",
          "start": 1437,
          "end": 1453,
          "object": {
            "type": "Identifier",
            "start": 1437,
            "end": 1443,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1444,
            "end": 1453,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "CallExpression",
            "start": 1457,
            "end": 1460,
            "callee": {
              "type": "Identifier",
              "start": 1457,
              "end": 1458,
              "name": "f"
            },
            "arguments": [],
            "optional": false
          },
          {
            "type": "Literal",
            "start": 1464,
            "end": 1470,
            "value": "decl",
            "raw": "'decl'",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 1474,
            "end": 1539,
            "value": "Block-scoped binding is independent of outer var-scoped binding",
            "raw": "'Block-scoped binding is independent of outer var-scoped binding'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}