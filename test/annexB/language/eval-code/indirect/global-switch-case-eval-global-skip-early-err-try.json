{
  "type": "Program",
  "start": 0,
  "end": 1774,
  "body": [
    {
      "type": "ExpressionStatement",
      "start": 1138,
      "end": 1773,
      "expression": {
        "type": "CallExpression",
        "start": 1138,
        "end": 1772,
        "callee": {
          "type": "ParenthesizedExpression",
          "start": 1138,
          "end": 1146,
          "expression": {
            "type": "SequenceExpression",
            "start": 1139,
            "end": 1145,
            "expressions": [
              {
                "type": "Literal",
                "start": 1139,
                "end": 1140,
                "value": 0,
                "raw": "0",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Identifier",
                "start": 1141,
                "end": 1145,
                "name": "eval"
              }
            ]
          }
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 1150,
            "end": 1770,
            "left": {
              "type": "BinaryExpression",
              "start": 1150,
              "end": 1502,
              "left": {
                "type": "BinaryExpression",
                "start": 1150,
                "end": 1474,
                "left": {
                  "type": "Literal",
                  "start": 1150,
                  "end": 1458,
                  "value": "assert.throws(ReferenceError, function() {    f;  }, \"An initialized binding is not created prior to evaluation\");  assert.sameValue(    typeof f,    \"undefined\",    \"An uninitialized binding is not created prior to evaluation\"  );    try {    throw {};  } catch ({ f }) {switch (1) {",
                  "raw": "'assert.throws(ReferenceError, function() {\\\n    f;\\\n  }, \"An initialized binding is not created prior to evaluation\");\\\n  assert.sameValue(\\\n    typeof f,\\\n    \"undefined\",\\\n    \"An uninitialized binding is not created prior to evaluation\"\\\n  );\\\n  \\\n  try {\\\n    throw {};\\\n  } catch ({ f }) {switch (1) {'",
                  "regex": null,
                  "bigint": null
                },
                "operator": "+",
                "right": {
                  "type": "Literal",
                  "start": 1463,
                  "end": 1474,
                  "value": "  case 1:",
                  "raw": "'  case 1:'",
                  "regex": null,
                  "bigint": null
                }
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 1479,
                "end": 1502,
                "value": "    function f() {  }",
                "raw": "'    function f() {  }'",
                "regex": null,
                "bigint": null
              }
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "start": 1507,
              "end": 1770,
              "value": "}  }    assert.throws(ReferenceError, function() {    f;  }, \"An initialized binding is not created following evaluation\");  assert.sameValue(    typeof f,    \"undefined\",    \"An uninitialized binding is not created following evaluation\"  );",
              "raw": "'}\\\n  }\\\n  \\\n  assert.throws(ReferenceError, function() {\\\n    f;\\\n  }, \"An initialized binding is not created following evaluation\");\\\n  assert.sameValue(\\\n    typeof f,\\\n    \"undefined\",\\\n    \"An uninitialized binding is not created following evaluation\"\\\n  );'",
              "regex": null,
              "bigint": null
            }
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}