{
  "type": "Program",
  "start": 0,
  "end": 732,
  "body": [
    {
      "type": "ExpressionStatement",
      "start": 580,
      "end": 731,
      "expression": {
        "type": "CallExpression",
        "start": 580,
        "end": 730,
        "callee": {
          "type": "ParenthesizedExpression",
          "start": 580,
          "end": 588,
          "expression": {
            "type": "SequenceExpression",
            "start": 581,
            "end": 587,
            "expressions": [
              {
                "type": "Literal",
                "start": 581,
                "end": 582,
                "value": 0,
                "raw": "0",
                "regex": null,
                "bigint": null
              },
              {
                "type": "Identifier",
                "start": 583,
                "end": 587,
                "name": "eval"
              }
            ]
          }
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 592,
            "end": 728,
            "left": {
              "type": "BinaryExpression",
              "start": 592,
              "end": 716,
              "left": {
                "type": "BinaryExpression",
                "start": 592,
                "end": 688,
                "left": {
                  "type": "Literal",
                  "start": 592,
                  "end": 672,
                  "value": "assert.sameValue(f, undefined);    {    function f() {}  }switch (1) {",
                  "raw": "'assert.sameValue(f, undefined);\\\n  \\\n  {\\\n    function f() {}\\\n  }switch (1) {'",
                  "regex": null,
                  "bigint": null
                },
                "operator": "+",
                "right": {
                  "type": "Literal",
                  "start": 677,
                  "end": 688,
                  "value": "  case 1:",
                  "raw": "'  case 1:'",
                  "regex": null,
                  "bigint": null
                }
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 693,
                "end": 716,
                "value": "    function f() {  }",
                "raw": "'    function f() {  }'",
                "regex": null,
                "bigint": null
              }
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "start": 721,
              "end": 728,
              "value": "}  ",
              "raw": "'}\\\n  '",
              "regex": null,
              "bigint": null
            }
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}