{
  "type": "Program",
  "start": 0,
  "end": 1515,
  "body": [
    {
      "type": "ExpressionStatement",
      "start": 1131,
      "end": 1514,
      "expression": {
        "type": "CallExpression",
        "start": 1131,
        "end": 1513,
        "callee": {
          "type": "ParenthesizedExpression",
          "start": 1131,
          "end": 1139,
          "expression": {
            "type": "SequenceExpression",
            "start": 1132,
            "end": 1138,
            "expressions": [
              {
                "type": "Literal",
                "start": 1132,
                "end": 1133,
                "value": 0,
                "raw": "0"
              },
              {
                "type": "Identifier",
                "start": 1134,
                "end": 1138,
                "name": "eval"
              }
            ]
          }
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "start": 1143,
            "end": 1511,
            "left": {
              "type": "BinaryExpression",
              "start": 1143,
              "end": 1351,
              "left": {
                "type": "BinaryExpression",
                "start": 1143,
                "end": 1312,
                "left": {
                  "type": "Literal",
                  "start": 1143,
                  "end": 1296,
                  "value": "assert.sameValue(    f, undefined, \"Initialized binding created prior to evaluation\"  );    try {    throw null;  } catch (f) {switch (1) {",
                  "raw": "'assert.sameValue(\\\n    f, undefined, \"Initialized binding created prior to evaluation\"\\\n  );\\\n  \\\n  try {\\\n    throw null;\\\n  } catch (f) {switch (1) {'"
                },
                "operator": "+",
                "right": {
                  "type": "Literal",
                  "start": 1301,
                  "end": 1312,
                  "value": "  case 1:",
                  "raw": "'  case 1:'"
                }
              },
              "operator": "+",
              "right": {
                "type": "Literal",
                "start": 1317,
                "end": 1351,
                "value": "    function f() { return 123; }",
                "raw": "'    function f() { return 123; }'"
              }
            },
            "operator": "+",
            "right": {
              "type": "Literal",
              "start": 1356,
              "end": 1511,
              "value": "}  }    assert.sameValue(    typeof f,    \"function\",    \"binding value is updated following evaluation\"  );  assert.sameValue(f(), 123);",
              "raw": "'}\\\n  }\\\n  \\\n  assert.sameValue(\\\n    typeof f,\\\n    \"function\",\\\n    \"binding value is updated following evaluation\"\\\n  );\\\n  assert.sameValue(f(), 123);'"
            }
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}