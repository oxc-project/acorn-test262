{
  "type": "Program",
  "start": 0,
  "end": 1492,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 1225,
      "end": 1241,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 1229,
          "end": 1233,
          "id": {
            "type": "Identifier",
            "start": 1229,
            "end": 1233,
            "name": "init"
          },
          "init": null
        },
        {
          "type": "VariableDeclarator",
          "start": 1235,
          "end": 1240,
          "id": {
            "type": "Identifier",
            "start": 1235,
            "end": 1240,
            "name": "after"
          },
          "init": null
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 1243,
      "end": 1341,
      "expression": {
        "type": "ParenthesizedExpression",
        "start": 1243,
        "end": 1340,
        "expression": {
          "type": "CallExpression",
          "start": 1244,
          "end": 1339,
          "callee": {
            "type": "FunctionExpression",
            "start": 1244,
            "end": 1337,
            "id": null,
            "expression": false,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "start": 1255,
              "end": 1337,
              "body": [
                {
                  "type": "VariableDeclaration",
                  "start": 1259,
                  "end": 1271,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 1263,
                      "end": 1270,
                      "id": {
                        "type": "Identifier",
                        "start": 1263,
                        "end": 1264,
                        "name": "f"
                      },
                      "init": {
                        "type": "Literal",
                        "start": 1267,
                        "end": 1270,
                        "value": 123,
                        "raw": "123",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  ],
                  "kind": "let"
                },
                {
                  "type": "ExpressionStatement",
                  "start": 1274,
                  "end": 1283,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 1274,
                    "end": 1282,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 1274,
                      "end": 1278,
                      "name": "init"
                    },
                    "right": {
                      "type": "Identifier",
                      "start": 1281,
                      "end": 1282,
                      "name": "f"
                    }
                  }
                },
                {
                  "type": "IfStatement",
                  "start": 1287,
                  "end": 1321,
                  "test": {
                    "type": "Literal",
                    "start": 1291,
                    "end": 1295,
                    "value": true,
                    "raw": "true",
                    "regex": null,
                    "bigint": null
                  },
                  "consequent": {
                    "type": "FunctionDeclaration",
                    "start": 1297,
                    "end": 1314,
                    "id": {
                      "type": "Identifier",
                      "start": 1306,
                      "end": 1307,
                      "name": "f"
                    },
                    "expression": false,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 1310,
                      "end": 1314,
                      "body": []
                    }
                  },
                  "alternate": {
                    "type": "EmptyStatement",
                    "start": 1320,
                    "end": 1321
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "start": 1325,
                  "end": 1335,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 1325,
                    "end": 1334,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 1325,
                      "end": 1330,
                      "name": "after"
                    },
                    "right": {
                      "type": "Identifier",
                      "start": 1333,
                      "end": 1334,
                      "name": "f"
                    }
                  }
                }
              ]
            }
          },
          "arguments": [],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1343,
      "end": 1416,
      "expression": {
        "type": "CallExpression",
        "start": 1343,
        "end": 1415,
        "callee": {
          "type": "MemberExpression",
          "start": 1343,
          "end": 1359,
          "object": {
            "type": "Identifier",
            "start": 1343,
            "end": 1349,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1350,
            "end": 1359,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1360,
            "end": 1364,
            "name": "init"
          },
          {
            "type": "Literal",
            "start": 1366,
            "end": 1369,
            "value": 123,
            "raw": "123",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 1371,
            "end": 1414,
            "value": "binding is not initialized to `undefined`",
            "raw": "'binding is not initialized to `undefined`'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1417,
      "end": 1491,
      "expression": {
        "type": "CallExpression",
        "start": 1417,
        "end": 1490,
        "callee": {
          "type": "MemberExpression",
          "start": 1417,
          "end": 1433,
          "object": {
            "type": "Identifier",
            "start": 1417,
            "end": 1423,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1424,
            "end": 1433,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1434,
            "end": 1439,
            "name": "after"
          },
          {
            "type": "Literal",
            "start": 1441,
            "end": 1444,
            "value": 123,
            "raw": "123",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 1446,
            "end": 1489,
            "value": "value is not updated following evaluation",
            "raw": "'value is not updated following evaluation'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}