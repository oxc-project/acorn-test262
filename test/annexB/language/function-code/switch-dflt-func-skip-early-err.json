{
  "type": "Program",
  "start": 0,
  "end": 1041,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 755,
      "end": 771,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 759,
          "end": 763,
          "id": {
            "type": "Identifier",
            "start": 759,
            "end": 763,
            "name": "init"
          },
          "init": null
        },
        {
          "type": "VariableDeclarator",
          "start": 765,
          "end": 770,
          "id": {
            "type": "Identifier",
            "start": 765,
            "end": 770,
            "name": "after"
          },
          "init": null
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 773,
      "end": 890,
      "expression": {
        "type": "ParenthesizedExpression",
        "start": 773,
        "end": 889,
        "expression": {
          "type": "CallExpression",
          "start": 774,
          "end": 888,
          "callee": {
            "type": "FunctionExpression",
            "start": 774,
            "end": 886,
            "id": null,
            "expression": false,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "start": 785,
              "end": 886,
              "body": [
                {
                  "type": "VariableDeclaration",
                  "start": 789,
                  "end": 801,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 793,
                      "end": 800,
                      "id": {
                        "type": "Identifier",
                        "start": 793,
                        "end": 794,
                        "name": "f"
                      },
                      "init": {
                        "type": "Literal",
                        "start": 797,
                        "end": 800,
                        "value": 123,
                        "raw": "123",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  ],
                  "kind": "let"
                },
                {
                  "type": "ExpressionStatement",
                  "start": 804,
                  "end": 813,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 804,
                    "end": 812,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 804,
                      "end": 808,
                      "name": "init"
                    },
                    "right": {
                      "type": "Identifier",
                      "start": 811,
                      "end": 812,
                      "name": "f"
                    }
                  }
                },
                {
                  "type": "SwitchStatement",
                  "start": 817,
                  "end": 870,
                  "discriminant": {
                    "type": "Literal",
                    "start": 825,
                    "end": 826,
                    "value": 1,
                    "raw": "1",
                    "regex": null,
                    "bigint": null
                  },
                  "cases": [
                    {
                      "type": "SwitchCase",
                      "start": 834,
                      "end": 866,
                      "consequent": [
                        {
                          "type": "FunctionDeclaration",
                          "start": 849,
                          "end": 866,
                          "id": {
                            "type": "Identifier",
                            "start": 858,
                            "end": 859,
                            "name": "f"
                          },
                          "expression": false,
                          "generator": false,
                          "async": false,
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "start": 862,
                            "end": 866,
                            "body": []
                          }
                        }
                      ],
                      "test": null
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "start": 874,
                  "end": 884,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 874,
                    "end": 883,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 874,
                      "end": 879,
                      "name": "after"
                    },
                    "right": {
                      "type": "Identifier",
                      "start": 882,
                      "end": 883,
                      "name": "f"
                    }
                  }
                }
              ]
            }
          },
          "arguments": [],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 892,
      "end": 965,
      "expression": {
        "type": "CallExpression",
        "start": 892,
        "end": 964,
        "callee": {
          "type": "MemberExpression",
          "start": 892,
          "end": 908,
          "object": {
            "type": "Identifier",
            "start": 892,
            "end": 898,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 899,
            "end": 908,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 909,
            "end": 913,
            "name": "init"
          },
          {
            "type": "Literal",
            "start": 915,
            "end": 918,
            "value": 123,
            "raw": "123",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 920,
            "end": 963,
            "value": "binding is not initialized to `undefined`",
            "raw": "'binding is not initialized to `undefined`'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 966,
      "end": 1040,
      "expression": {
        "type": "CallExpression",
        "start": 966,
        "end": 1039,
        "callee": {
          "type": "MemberExpression",
          "start": 966,
          "end": 982,
          "object": {
            "type": "Identifier",
            "start": 966,
            "end": 972,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 973,
            "end": 982,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 983,
            "end": 988,
            "name": "after"
          },
          {
            "type": "Literal",
            "start": 990,
            "end": 993,
            "value": 123,
            "raw": "123",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 995,
            "end": 1038,
            "value": "value is not updated following evaluation",
            "raw": "'value is not updated following evaluation'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}