{
  "type": "Program",
  "start": 0,
  "end": 1494,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 1226,
      "end": 1242,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 1230,
          "end": 1234,
          "id": {
            "type": "Identifier",
            "start": 1230,
            "end": 1234,
            "name": "init"
          },
          "init": null
        },
        {
          "type": "VariableDeclarator",
          "start": 1236,
          "end": 1241,
          "id": {
            "type": "Identifier",
            "start": 1236,
            "end": 1241,
            "name": "after"
          },
          "init": null
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 1244,
      "end": 1343,
      "expression": {
        "type": "ParenthesizedExpression",
        "start": 1244,
        "end": 1342,
        "expression": {
          "type": "CallExpression",
          "start": 1245,
          "end": 1341,
          "callee": {
            "type": "FunctionExpression",
            "start": 1245,
            "end": 1339,
            "id": null,
            "expression": false,
            "generator": false,
            "async": false,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "start": 1256,
              "end": 1339,
              "body": [
                {
                  "type": "VariableDeclaration",
                  "start": 1260,
                  "end": 1272,
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "start": 1264,
                      "end": 1271,
                      "id": {
                        "type": "Identifier",
                        "start": 1264,
                        "end": 1265,
                        "name": "f"
                      },
                      "init": {
                        "type": "Literal",
                        "start": 1268,
                        "end": 1271,
                        "value": 123,
                        "raw": "123",
                        "regex": null,
                        "bigint": null
                      }
                    }
                  ],
                  "kind": "let"
                },
                {
                  "type": "ExpressionStatement",
                  "start": 1275,
                  "end": 1284,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 1275,
                    "end": 1283,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 1275,
                      "end": 1279,
                      "name": "init"
                    },
                    "right": {
                      "type": "Identifier",
                      "start": 1282,
                      "end": 1283,
                      "name": "f"
                    }
                  }
                },
                {
                  "type": "IfStatement",
                  "start": 1288,
                  "end": 1323,
                  "test": {
                    "type": "Literal",
                    "start": 1292,
                    "end": 1297,
                    "value": false,
                    "raw": "false",
                    "regex": null,
                    "bigint": null
                  },
                  "consequent": {
                    "type": "EmptyStatement",
                    "start": 1299,
                    "end": 1300
                  },
                  "alternate": {
                    "type": "FunctionDeclaration",
                    "start": 1306,
                    "end": 1323,
                    "id": {
                      "type": "Identifier",
                      "start": 1315,
                      "end": 1316,
                      "name": "f"
                    },
                    "expression": false,
                    "generator": false,
                    "async": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "start": 1319,
                      "end": 1323,
                      "body": []
                    }
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "start": 1327,
                  "end": 1337,
                  "expression": {
                    "type": "AssignmentExpression",
                    "start": 1327,
                    "end": 1336,
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "start": 1327,
                      "end": 1332,
                      "name": "after"
                    },
                    "right": {
                      "type": "Identifier",
                      "start": 1335,
                      "end": 1336,
                      "name": "f"
                    }
                  }
                }
              ]
            }
          },
          "arguments": [],
          "optional": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1345,
      "end": 1418,
      "expression": {
        "type": "CallExpression",
        "start": 1345,
        "end": 1417,
        "callee": {
          "type": "MemberExpression",
          "start": 1345,
          "end": 1361,
          "object": {
            "type": "Identifier",
            "start": 1345,
            "end": 1351,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1352,
            "end": 1361,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1362,
            "end": 1366,
            "name": "init"
          },
          {
            "type": "Literal",
            "start": 1368,
            "end": 1371,
            "value": 123,
            "raw": "123",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 1373,
            "end": 1416,
            "value": "binding is not initialized to `undefined`",
            "raw": "'binding is not initialized to `undefined`'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1419,
      "end": 1493,
      "expression": {
        "type": "CallExpression",
        "start": 1419,
        "end": 1492,
        "callee": {
          "type": "MemberExpression",
          "start": 1419,
          "end": 1435,
          "object": {
            "type": "Identifier",
            "start": 1419,
            "end": 1425,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1426,
            "end": 1435,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1436,
            "end": 1441,
            "name": "after"
          },
          {
            "type": "Literal",
            "start": 1443,
            "end": 1446,
            "value": 123,
            "raw": "123",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 1448,
            "end": 1491,
            "value": "value is not updated following evaluation",
            "raw": "'value is not updated following evaluation'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}