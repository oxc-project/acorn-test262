{
  "type": "Program",
  "start": 0,
  "end": 1179,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 505,
      "end": 521,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 509,
          "end": 520,
          "id": {
            "type": "Identifier",
            "start": 509,
            "end": 516,
            "name": "counter"
          },
          "init": {
            "type": "Literal",
            "start": 519,
            "end": 520,
            "value": 0,
            "raw": "0",
            "regex": null,
            "bigint": null
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 527,
      "end": 540,
      "expression": {
        "type": "AssignmentExpression",
        "start": 527,
        "end": 539,
        "operator": "+=",
        "left": {
          "type": "Identifier",
          "start": 527,
          "end": 534,
          "name": "counter"
        },
        "right": {
          "type": "Literal",
          "start": 538,
          "end": 539,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 586,
      "end": 599,
      "expression": {
        "type": "AssignmentExpression",
        "start": 586,
        "end": 598,
        "operator": "+=",
        "left": {
          "type": "Identifier",
          "start": 586,
          "end": 593,
          "name": "counter"
        },
        "right": {
          "type": "Literal",
          "start": 597,
          "end": 598,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 601,
      "end": 614,
      "expression": {
        "type": "AssignmentExpression",
        "start": 601,
        "end": 613,
        "operator": "+=",
        "left": {
          "type": "Identifier",
          "start": 601,
          "end": 608,
          "name": "counter"
        },
        "right": {
          "type": "Literal",
          "start": 612,
          "end": 613,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 658,
      "end": 671,
      "expression": {
        "type": "AssignmentExpression",
        "start": 658,
        "end": 670,
        "operator": "+=",
        "left": {
          "type": "Identifier",
          "start": 658,
          "end": 665,
          "name": "counter"
        },
        "right": {
          "type": "Literal",
          "start": 669,
          "end": 670,
          "value": 1,
          "raw": "1",
          "regex": null,
          "bigint": null
        }
      }
    },
    {
      "type": "VariableDeclaration",
      "start": 673,
      "end": 683,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 677,
          "end": 682,
          "id": {
            "type": "Identifier",
            "start": 677,
            "end": 678,
            "name": "x"
          },
          "init": {
            "type": "Literal",
            "start": 681,
            "end": 682,
            "value": 0,
            "raw": "0",
            "regex": null,
            "bigint": null
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "start": 684,
      "end": 690,
      "expression": {
        "type": "AssignmentExpression",
        "start": 684,
        "end": 690,
        "operator": "=",
        "left": {
          "type": "Identifier",
          "start": 684,
          "end": 685,
          "name": "x"
        },
        "right": {
          "type": "UnaryExpression",
          "start": 688,
          "end": 690,
          "operator": "-",
          "prefix": true,
          "argument": {
            "type": "Literal",
            "start": 689,
            "end": 690,
            "value": 1,
            "raw": "1",
            "regex": null,
            "bigint": null
          }
        }
      }
    },
    {
      "type": "IfStatement",
      "start": 1116,
      "end": 1178,
      "test": {
        "type": "LogicalExpression",
        "start": 1120,
        "end": 1145,
        "left": {
          "type": "BinaryExpression",
          "start": 1120,
          "end": 1133,
          "left": {
            "type": "Identifier",
            "start": 1120,
            "end": 1127,
            "name": "counter"
          },
          "operator": "===",
          "right": {
            "type": "Literal",
            "start": 1132,
            "end": 1133,
            "value": 4,
            "raw": "4",
            "regex": null,
            "bigint": null
          }
        },
        "operator": "&&",
        "right": {
          "type": "BinaryExpression",
          "start": 1137,
          "end": 1145,
          "left": {
            "type": "Identifier",
            "start": 1137,
            "end": 1138,
            "name": "x"
          },
          "operator": "===",
          "right": {
            "type": "UnaryExpression",
            "start": 1143,
            "end": 1145,
            "operator": "-",
            "prefix": true,
            "argument": {
              "type": "Literal",
              "start": 1144,
              "end": 1145,
              "value": 1,
              "raw": "1",
              "regex": null,
              "bigint": null
            }
          }
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "start": 1147,
        "end": 1178,
        "body": [
          {
            "type": "ThrowStatement",
            "start": 1151,
            "end": 1176,
            "argument": {
              "type": "NewExpression",
              "start": 1157,
              "end": 1175,
              "callee": {
                "type": "Identifier",
                "start": 1161,
                "end": 1173,
                "name": "Test262Error"
              },
              "arguments": []
            }
          }
        ]
      },
      "alternate": null
    }
  ],
  "sourceType": "script",
  "hashbang": null
}