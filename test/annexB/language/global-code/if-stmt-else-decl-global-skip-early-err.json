{
  "type": "Program",
  "start": 0,
  "end": 1367,
  "body": [
    {
      "type": "VariableDeclaration",
      "start": 1174,
      "end": 1186,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 1178,
          "end": 1185,
          "id": {
            "type": "Identifier",
            "start": 1178,
            "end": 1179,
            "name": "f"
          },
          "init": {
            "type": "Literal",
            "start": 1182,
            "end": 1185,
            "value": 123,
            "raw": "123",
            "regex": null,
            "bigint": null
          }
        }
      ],
      "kind": "let"
    },
    {
      "type": "ExpressionStatement",
      "start": 1187,
      "end": 1257,
      "expression": {
        "type": "CallExpression",
        "start": 1187,
        "end": 1256,
        "callee": {
          "type": "MemberExpression",
          "start": 1187,
          "end": 1203,
          "object": {
            "type": "Identifier",
            "start": 1187,
            "end": 1193,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1194,
            "end": 1203,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1204,
            "end": 1205,
            "name": "f"
          },
          {
            "type": "Literal",
            "start": 1207,
            "end": 1210,
            "value": 123,
            "raw": "123",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 1212,
            "end": 1255,
            "value": "binding is not initialized to `undefined`",
            "raw": "'binding is not initialized to `undefined`'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    },
    {
      "type": "IfStatement",
      "start": 1259,
      "end": 1294,
      "test": {
        "type": "Literal",
        "start": 1263,
        "end": 1268,
        "value": false,
        "raw": "false",
        "regex": null,
        "bigint": null
      },
      "consequent": {
        "type": "EmptyStatement",
        "start": 1270,
        "end": 1271
      },
      "alternate": {
        "type": "FunctionDeclaration",
        "start": 1277,
        "end": 1294,
        "id": {
          "type": "Identifier",
          "start": 1286,
          "end": 1287,
          "name": "f"
        },
        "expression": false,
        "generator": false,
        "async": false,
        "params": [],
        "body": {
          "type": "BlockStatement",
          "start": 1290,
          "end": 1294,
          "body": []
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "start": 1296,
      "end": 1366,
      "expression": {
        "type": "CallExpression",
        "start": 1296,
        "end": 1365,
        "callee": {
          "type": "MemberExpression",
          "start": 1296,
          "end": 1312,
          "object": {
            "type": "Identifier",
            "start": 1296,
            "end": 1302,
            "name": "assert"
          },
          "property": {
            "type": "Identifier",
            "start": 1303,
            "end": 1312,
            "name": "sameValue"
          },
          "computed": false,
          "optional": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "start": 1313,
            "end": 1314,
            "name": "f"
          },
          {
            "type": "Literal",
            "start": 1316,
            "end": 1319,
            "value": 123,
            "raw": "123",
            "regex": null,
            "bigint": null
          },
          {
            "type": "Literal",
            "start": 1321,
            "end": 1364,
            "value": "value is not updated following evaluation",
            "raw": "'value is not updated following evaluation'",
            "regex": null,
            "bigint": null
          }
        ],
        "optional": false
      }
    }
  ],
  "sourceType": "script",
  "hashbang": null
}